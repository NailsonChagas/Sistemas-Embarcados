
aula12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004880  08004880  00005880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048dc  080048dc  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080048dc  080048dc  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080048dc  080048dc  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000058dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080048e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005394  2000006c  08004950  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005400  08004950  00006400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a10  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfb  00000000  00000000  00017aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0001a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e2e  00000000  00000000  0001bb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002bab  00000000  00000000  0001c94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001219d  00000000  00000000  0001f4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7ec6  00000000  00000000  00031696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f955c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fbc  00000000  00000000  000f95a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000fe55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004868 	.word	0x08004868

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	08004868 	.word	0x08004868

08000220 <pisca_led>:
	GPIO_TypeDef *led_port;
} led_t;


void pisca_led(void *param)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t*)param;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	60fb      	str	r3, [r7, #12]

	TickType_t timer;

	while(1)
	{
		timer = xTaskGetTickCount();
 800022c:	f002 fe98 	bl	8002f60 <xTaskGetTickCount>
 8000230:	4603      	mov	r3, r0
 8000232:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(led->led_port, led->led_pin);
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	689a      	ldr	r2, [r3, #8]
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	889b      	ldrh	r3, [r3, #4]
 800023c:	4619      	mov	r1, r3
 800023e:	4610      	mov	r0, r2
 8000240:	f000 fc8c 	bl	8000b5c <HAL_GPIO_TogglePin>
//		vTaskDelay(1000);
		vTaskDelayUntil(&timer, led->led_time);
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	4611      	mov	r1, r2
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fccc 	bl	8002bec <vTaskDelayUntil>
		timer = xTaskGetTickCount();
 8000254:	bf00      	nop
 8000256:	e7e9      	b.n	800022c <pisca_led+0xc>

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b5b0      	push	{r4, r5, r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 f9cc 	bl	80005fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f82b 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f873 	bl	8000350 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <main+0x50>)
 800026c:	1d3c      	adds	r4, r7, #4
 800026e:	461d      	mov	r5, r3
 8000270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000274:	682b      	ldr	r3, [r5, #0]
 8000276:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fdca 	bl	8001e16 <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a09      	ldr	r2, [pc, #36]	@ (80002ac <main+0x54>)
 8000286:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // se n√£o for stack vai ser desalocado ao sair da main (tira a variavel da pilha e vai para data)
  static led_t led_1000 = {1000, LED_Pin, LED_GPIO_Port};
  static led_t led_75 = {75, LED_Pin, LED_GPIO_Port};
  xTaskCreate(pisca_led, "Tarefa led", 256, &led_75, 4, NULL);
 8000288:	2300      	movs	r3, #0
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2304      	movs	r3, #4
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4b07      	ldr	r3, [pc, #28]	@ (80002b0 <main+0x58>)
 8000292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000296:	4907      	ldr	r1, [pc, #28]	@ (80002b4 <main+0x5c>)
 8000298:	4807      	ldr	r0, [pc, #28]	@ (80002b8 <main+0x60>)
 800029a:	f002 fb5b 	bl	8002954 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800029e:	f001 fdb3 	bl	8001e08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <main+0x4a>
 80002a6:	bf00      	nop
 80002a8:	08004898 	.word	0x08004898
 80002ac:	20000088 	.word	0x20000088
 80002b0:	20000000 	.word	0x20000000
 80002b4:	08004880 	.word	0x08004880
 80002b8:	08000221 	.word	0x08000221

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b094      	sub	sp, #80	@ 0x50
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2238      	movs	r2, #56	@ 0x38
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 f9dc 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002de:	2000      	movs	r0, #0
 80002e0:	f000 fc56 	bl	8000b90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e4:	2301      	movs	r3, #1
 80002e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ec:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f2:	2303      	movs	r3, #3
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80002f6:	2306      	movs	r3, #6
 80002f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002fa:	2355      	movs	r3, #85	@ 0x55
 80002fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000302:	2302      	movs	r3, #2
 8000304:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000306:	2302      	movs	r3, #2
 8000308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fcf2 	bl	8000cf8 <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800031a:	f000 f871 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2303      	movs	r3, #3
 8000324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2104      	movs	r1, #4
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fff0 	bl	800131c <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000342:	f000 f85d 	bl	8000400 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3750      	adds	r7, #80	@ 0x50
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 030c 	add.w	r3, r7, #12
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000366:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <MX_GPIO_Init+0x78>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036a:	4a17      	ldr	r2, [pc, #92]	@ (80003c8 <MX_GPIO_Init+0x78>)
 800036c:	f043 0320 	orr.w	r3, r3, #32
 8000370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000372:	4b15      	ldr	r3, [pc, #84]	@ (80003c8 <MX_GPIO_Init+0x78>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	f003 0320 	and.w	r3, r3, #32
 800037a:	60bb      	str	r3, [r7, #8]
 800037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b12      	ldr	r3, [pc, #72]	@ (80003c8 <MX_GPIO_Init+0x78>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000382:	4a11      	ldr	r2, [pc, #68]	@ (80003c8 <MX_GPIO_Init+0x78>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800038a:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_GPIO_Init+0x78>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2120      	movs	r1, #32
 800039a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800039e:	f000 fbc5 	bl	8000b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80003a2:	2320      	movs	r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f107 030c 	add.w	r3, r7, #12
 80003b6:	4619      	mov	r1, r3
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003bc:	f000 fa34 	bl	8000828 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000

080003cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003d4:	2001      	movs	r0, #1
 80003d6:	f001 fd45 	bl	8001e64 <osDelay>
 80003da:	e7fb      	b.n	80003d4 <StartDefaultTask+0x8>

080003dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a04      	ldr	r2, [pc, #16]	@ (80003fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d101      	bne.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80003ee:	f000 f91d 	bl	800062c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40014800 	.word	0x40014800

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <Error_Handler+0x8>

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	@ (800045c <HAL_MspInit+0x50>)
 8000414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000416:	4a11      	ldr	r2, [pc, #68]	@ (800045c <HAL_MspInit+0x50>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6613      	str	r3, [r2, #96]	@ 0x60
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <HAL_MspInit+0x50>)
 8000420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <HAL_MspInit+0x50>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800042e:	4a0b      	ldr	r2, [pc, #44]	@ (800045c <HAL_MspInit+0x50>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000434:	6593      	str	r3, [r2, #88]	@ 0x58
 8000436:	4b09      	ldr	r3, [pc, #36]	@ (800045c <HAL_MspInit+0x50>)
 8000438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800043a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000442:	2200      	movs	r2, #0
 8000444:	210f      	movs	r1, #15
 8000446:	f06f 0001 	mvn.w	r0, #1
 800044a:	f000 f9c5 	bl	80007d8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800044e:	f000 fc43 	bl	8000cd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000

08000460 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08c      	sub	sp, #48	@ 0x30
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000470:	4b2c      	ldr	r3, [pc, #176]	@ (8000524 <HAL_InitTick+0xc4>)
 8000472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000474:	4a2b      	ldr	r2, [pc, #172]	@ (8000524 <HAL_InitTick+0xc4>)
 8000476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800047a:	6613      	str	r3, [r2, #96]	@ 0x60
 800047c:	4b29      	ldr	r3, [pc, #164]	@ (8000524 <HAL_InitTick+0xc4>)
 800047e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000480:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000488:	f107 020c 	add.w	r2, r7, #12
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4611      	mov	r1, r2
 8000492:	4618      	mov	r0, r3
 8000494:	f001 f902 	bl	800169c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000498:	f001 f8ea 	bl	8001670 <HAL_RCC_GetPCLK2Freq>
 800049c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800049e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004a0:	4a21      	ldr	r2, [pc, #132]	@ (8000528 <HAL_InitTick+0xc8>)
 80004a2:	fba2 2303 	umull	r2, r3, r2, r3
 80004a6:	0c9b      	lsrs	r3, r3, #18
 80004a8:	3b01      	subs	r3, #1
 80004aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	@ (800052c <HAL_InitTick+0xcc>)
 80004ae:	4a20      	ldr	r2, [pc, #128]	@ (8000530 <HAL_InitTick+0xd0>)
 80004b0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <HAL_InitTick+0xcc>)
 80004b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004b8:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80004ba:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <HAL_InitTick+0xcc>)
 80004bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004be:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80004c0:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <HAL_InitTick+0xcc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c6:	4b19      	ldr	r3, [pc, #100]	@ (800052c <HAL_InitTick+0xcc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80004cc:	4817      	ldr	r0, [pc, #92]	@ (800052c <HAL_InitTick+0xcc>)
 80004ce:	f001 f95d 	bl	800178c <HAL_TIM_Base_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80004d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d11b      	bne.n	8000518 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80004e0:	4812      	ldr	r0, [pc, #72]	@ (800052c <HAL_InitTick+0xcc>)
 80004e2:	f001 f9b5 	bl	8001850 <HAL_TIM_Base_Start_IT>
 80004e6:	4603      	mov	r3, r0
 80004e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80004ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d111      	bne.n	8000518 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80004f4:	201a      	movs	r0, #26
 80004f6:	f000 f989 	bl	800080c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b0f      	cmp	r3, #15
 80004fe:	d808      	bhi.n	8000512 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8000500:	2200      	movs	r2, #0
 8000502:	6879      	ldr	r1, [r7, #4]
 8000504:	201a      	movs	r0, #26
 8000506:	f000 f967 	bl	80007d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <HAL_InitTick+0xd4>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	e002      	b.n	8000518 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000518:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800051c:	4618      	mov	r0, r3
 800051e:	3730      	adds	r7, #48	@ 0x30
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	431bde83 	.word	0x431bde83
 800052c:	2000008c 	.word	0x2000008c
 8000530:	40014800 	.word	0x40014800
 8000534:	20000010 	.word	0x20000010

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <NMI_Handler+0x4>

08000540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <MemManage_Handler+0x4>

08000550 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <UsageFault_Handler+0x4>

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000574:	4802      	ldr	r0, [pc, #8]	@ (8000580 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000576:	f001 f9d5 	bl	8001924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000008c 	.word	0x2000008c

08000584 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <SystemInit+0x20>)
 800058a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800058e:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <SystemInit+0x20>)
 8000590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ac:	f7ff ffea 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490d      	ldr	r1, [pc, #52]	@ (80005e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0d      	ldr	r2, [pc, #52]	@ (80005ec <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0a      	ldr	r4, [pc, #40]	@ (80005f4 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80005d6:	f004 f8bd 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005da:	f7ff fe3d 	bl	8000258 <main>

080005de <LoopForever>:

LoopForever:
    b LoopForever
 80005de:	e7fe      	b.n	80005de <LoopForever>
  ldr   r0, =_estack
 80005e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80005ec:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 80005f0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80005f4:	20005400 	.word	0x20005400

080005f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f8:	e7fe      	b.n	80005f8 <ADC1_2_IRQHandler>

080005fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f8dc 	bl	80007c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060a:	200f      	movs	r0, #15
 800060c:	f7ff ff28 	bl	8000460 <HAL_InitTick>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d002      	beq.n	800061c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000616:	2301      	movs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	e001      	b.n	8000620 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800061c:	f7ff fef6 	bl	800040c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000620:	79fb      	ldrb	r3, [r7, #7]

}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <HAL_IncTick+0x1c>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x20>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4413      	add	r3, r2
 800063a:	4a03      	ldr	r2, [pc, #12]	@ (8000648 <HAL_IncTick+0x1c>)
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	200000d8 	.word	0x200000d8
 800064c:	20000014 	.word	0x20000014

08000650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b03      	ldr	r3, [pc, #12]	@ (8000664 <HAL_GetTick+0x14>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200000d8 	.word	0x200000d8

08000668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f003 0307 	and.w	r3, r3, #7
 8000676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <__NVIC_SetPriorityGrouping+0x44>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b4:	4b04      	ldr	r3, [pc, #16]	@ (80006c8 <__NVIC_GetPriorityGrouping+0x18>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 0307 	and.w	r3, r3, #7
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	db0b      	blt.n	80006f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	f003 021f 	and.w	r2, r3, #31
 80006e4:	4907      	ldr	r1, [pc, #28]	@ (8000704 <__NVIC_EnableIRQ+0x38>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	2001      	movs	r0, #1
 80006ee:	fa00 f202 	lsl.w	r2, r0, r2
 80006f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	@ (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	@ (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	@ 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	@ 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ff4c 	bl	8000668 <__NVIC_SetPriorityGrouping>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007e6:	f7ff ff63 	bl	80006b0 <__NVIC_GetPriorityGrouping>
 80007ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	68b9      	ldr	r1, [r7, #8]
 80007f0:	6978      	ldr	r0, [r7, #20]
 80007f2:	f7ff ffb3 	bl	800075c <NVIC_EncodePriority>
 80007f6:	4602      	mov	r2, r0
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff82 	bl	8000708 <__NVIC_SetPriority>
}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ff56 	bl	80006cc <__NVIC_EnableIRQ>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000836:	e15a      	b.n	8000aee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	f000 814c 	beq.w	8000ae8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	2b01      	cmp	r3, #1
 800085a:	d005      	beq.n	8000868 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000864:	2b02      	cmp	r3, #2
 8000866:	d130      	bne.n	80008ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2203      	movs	r2, #3
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	693a      	ldr	r2, [r7, #16]
 800087c:	4013      	ands	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68da      	ldr	r2, [r3, #12]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4313      	orrs	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800089e:	2201      	movs	r2, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	091b      	lsrs	r3, r3, #4
 80008b4:	f003 0201 	and.w	r2, r3, #1
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 0303 	and.w	r3, r3, #3
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d017      	beq.n	8000906 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	2203      	movs	r2, #3
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	2b02      	cmp	r3, #2
 8000910:	d123      	bne.n	800095a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800091e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	220f      	movs	r2, #15
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	691a      	ldr	r2, [r3, #16]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	08da      	lsrs	r2, r3, #3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3208      	adds	r2, #8
 8000954:	6939      	ldr	r1, [r7, #16]
 8000956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0203 	and.w	r2, r3, #3
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80a6 	beq.w	8000ae8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b0c <HAL_GPIO_Init+0x2e4>)
 800099e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a0:	4a5a      	ldr	r2, [pc, #360]	@ (8000b0c <HAL_GPIO_Init+0x2e4>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80009a8:	4b58      	ldr	r3, [pc, #352]	@ (8000b0c <HAL_GPIO_Init+0x2e4>)
 80009aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009b4:	4a56      	ldr	r2, [pc, #344]	@ (8000b10 <HAL_GPIO_Init+0x2e8>)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009de:	d01f      	beq.n	8000a20 <HAL_GPIO_Init+0x1f8>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000b14 <HAL_GPIO_Init+0x2ec>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d019      	beq.n	8000a1c <HAL_GPIO_Init+0x1f4>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a4b      	ldr	r2, [pc, #300]	@ (8000b18 <HAL_GPIO_Init+0x2f0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d013      	beq.n	8000a18 <HAL_GPIO_Init+0x1f0>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a4a      	ldr	r2, [pc, #296]	@ (8000b1c <HAL_GPIO_Init+0x2f4>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d00d      	beq.n	8000a14 <HAL_GPIO_Init+0x1ec>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a49      	ldr	r2, [pc, #292]	@ (8000b20 <HAL_GPIO_Init+0x2f8>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d007      	beq.n	8000a10 <HAL_GPIO_Init+0x1e8>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a48      	ldr	r2, [pc, #288]	@ (8000b24 <HAL_GPIO_Init+0x2fc>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d101      	bne.n	8000a0c <HAL_GPIO_Init+0x1e4>
 8000a08:	2305      	movs	r3, #5
 8000a0a:	e00a      	b.n	8000a22 <HAL_GPIO_Init+0x1fa>
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	e008      	b.n	8000a22 <HAL_GPIO_Init+0x1fa>
 8000a10:	2304      	movs	r3, #4
 8000a12:	e006      	b.n	8000a22 <HAL_GPIO_Init+0x1fa>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e004      	b.n	8000a22 <HAL_GPIO_Init+0x1fa>
 8000a18:	2302      	movs	r3, #2
 8000a1a:	e002      	b.n	8000a22 <HAL_GPIO_Init+0x1fa>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e000      	b.n	8000a22 <HAL_GPIO_Init+0x1fa>
 8000a20:	2300      	movs	r3, #0
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	f002 0203 	and.w	r2, r2, #3
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	4093      	lsls	r3, r2
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a32:	4937      	ldr	r1, [pc, #220]	@ (8000b10 <HAL_GPIO_Init+0x2e8>)
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	089b      	lsrs	r3, r3, #2
 8000a38:	3302      	adds	r3, #2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a40:	4b39      	ldr	r3, [pc, #228]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a64:	4a30      	ldr	r2, [pc, #192]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a8e:	4a26      	ldr	r2, [pc, #152]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000a94:	4b24      	ldr	r3, [pc, #144]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ae2:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <HAL_GPIO_Init+0x300>)
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f47f ae9d 	bne.w	8000838 <HAL_GPIO_Init+0x10>
  }
}
 8000afe:	bf00      	nop
 8000b00:	bf00      	nop
 8000b02:	371c      	adds	r7, #28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48000c00 	.word	0x48000c00
 8000b20:	48001000 	.word	0x48001000
 8000b24:	48001400 	.word	0x48001400
 8000b28:	40010400 	.word	0x40010400

08000b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b3c:	787b      	ldrb	r3, [r7, #1]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b48:	e002      	b.n	8000b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b6e:	887a      	ldrh	r2, [r7, #2]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4013      	ands	r3, r2
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43d9      	mvns	r1, r3
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	400b      	ands	r3, r1
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d141      	bne.n	8000c22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000baa:	d131      	bne.n	8000c10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bac:	4b47      	ldr	r3, [pc, #284]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bb2:	4a46      	ldr	r2, [pc, #280]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	4b43      	ldr	r3, [pc, #268]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bc4:	4a41      	ldr	r2, [pc, #260]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bcc:	4b40      	ldr	r3, [pc, #256]	@ (8000cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2232      	movs	r2, #50	@ 0x32
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	0c9b      	lsrs	r3, r3, #18
 8000bde:	3301      	adds	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000be2:	e002      	b.n	8000bea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bea:	4b38      	ldr	r3, [pc, #224]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf6:	d102      	bne.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f2      	bne.n	8000be4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bfe:	4b33      	ldr	r3, [pc, #204]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0a:	d158      	bne.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e057      	b.n	8000cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c16:	4a2d      	ldr	r2, [pc, #180]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c20:	e04d      	b.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c28:	d141      	bne.n	8000cae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c36:	d131      	bne.n	8000c9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c3e:	4a23      	ldr	r2, [pc, #140]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c50:	4a1e      	ldr	r2, [pc, #120]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2232      	movs	r2, #50	@ 0x32
 8000c5e:	fb02 f303 	mul.w	r3, r2, r3
 8000c62:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	0c9b      	lsrs	r3, r3, #18
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c6e:	e002      	b.n	8000c76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c82:	d102      	bne.n	8000c8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1f2      	bne.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c96:	d112      	bne.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e011      	b.n	8000cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ca8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000cac:	e007      	b.n	8000cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40007000 	.word	0x40007000
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	431bde83 	.word	0x431bde83

08000cd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce6:	6093      	str	r3, [r2, #8]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e2fe      	b.n	8001308 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d075      	beq.n	8000e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d16:	4b97      	ldr	r3, [pc, #604]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d20:	4b94      	ldr	r3, [pc, #592]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2b0c      	cmp	r3, #12
 8000d2e:	d102      	bne.n	8000d36 <HAL_RCC_OscConfig+0x3e>
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d002      	beq.n	8000d3c <HAL_RCC_OscConfig+0x44>
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	2b08      	cmp	r3, #8
 8000d3a:	d10b      	bne.n	8000d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d05b      	beq.n	8000e00 <HAL_RCC_OscConfig+0x108>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d157      	bne.n	8000e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e2d9      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d5c:	d106      	bne.n	8000d6c <HAL_RCC_OscConfig+0x74>
 8000d5e:	4b85      	ldr	r3, [pc, #532]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a84      	ldr	r2, [pc, #528]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e01d      	b.n	8000da8 <HAL_RCC_OscConfig+0xb0>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x98>
 8000d76:	4b7f      	ldr	r3, [pc, #508]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b7c      	ldr	r3, [pc, #496]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a7b      	ldr	r2, [pc, #492]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e00b      	b.n	8000da8 <HAL_RCC_OscConfig+0xb0>
 8000d90:	4b78      	ldr	r3, [pc, #480]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a77      	ldr	r2, [pc, #476]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a74      	ldr	r2, [pc, #464]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc4e 	bl	8000650 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fc4a 	bl	8000650 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	@ 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e29e      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dca:	4b6a      	ldr	r3, [pc, #424]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d0f0      	beq.n	8000db8 <HAL_RCC_OscConfig+0xc0>
 8000dd6:	e014      	b.n	8000e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc3a 	bl	8000650 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fc36 	bl	8000650 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	@ 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e28a      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000df2:	4b60      	ldr	r3, [pc, #384]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0xe8>
 8000dfe:	e000      	b.n	8000e02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d075      	beq.n	8000efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e0e:	4b59      	ldr	r3, [pc, #356]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e18:	4b56      	ldr	r3, [pc, #344]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2b0c      	cmp	r3, #12
 8000e26:	d102      	bne.n	8000e2e <HAL_RCC_OscConfig+0x136>
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d002      	beq.n	8000e34 <HAL_RCC_OscConfig+0x13c>
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d11f      	bne.n	8000e74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e34:	4b4f      	ldr	r3, [pc, #316]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d005      	beq.n	8000e4c <HAL_RCC_OscConfig+0x154>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e25d      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e4c:	4b49      	ldr	r3, [pc, #292]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	061b      	lsls	r3, r3, #24
 8000e5a:	4946      	ldr	r1, [pc, #280]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e60:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <HAL_RCC_OscConfig+0x280>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fafb 	bl	8000460 <HAL_InitTick>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d043      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e249      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d023      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a3c      	ldr	r2, [pc, #240]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f7ff fbe2 	bl	8000650 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e90:	f7ff fbde 	bl	8000650 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e232      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ea2:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f0      	beq.n	8000e90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	061b      	lsls	r3, r3, #24
 8000ebc:	492d      	ldr	r1, [pc, #180]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	604b      	str	r3, [r1, #4]
 8000ec2:	e01a      	b.n	8000efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fbbe 	bl	8000650 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fbba 	bl	8000650 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e20e      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eea:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x1e0>
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d041      	beq.n	8000f8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d01c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f14:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fb97 	bl	8000650 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f26:	f7ff fb93 	bl	8000650 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e1e7      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0ef      	beq.n	8000f26 <HAL_RCC_OscConfig+0x22e>
 8000f46:	e020      	b.n	8000f8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f4e:	4a09      	ldr	r2, [pc, #36]	@ (8000f74 <HAL_RCC_OscConfig+0x27c>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f58:	f7ff fb7a 	bl	8000650 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f5e:	e00d      	b.n	8000f7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f60:	f7ff fb76 	bl	8000650 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d906      	bls.n	8000f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e1ca      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8000f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1ea      	bne.n	8000f60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80a6 	beq.w	80010e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f9c:	4b84      	ldr	r3, [pc, #528]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_RCC_OscConfig+0x2b4>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x2b6>
 8000fac:	2300      	movs	r3, #0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00d      	beq.n	8000fce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fce:	4b79      	ldr	r3, [pc, #484]	@ (80011b4 <HAL_RCC_OscConfig+0x4bc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fda:	4b76      	ldr	r3, [pc, #472]	@ (80011b4 <HAL_RCC_OscConfig+0x4bc>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a75      	ldr	r2, [pc, #468]	@ (80011b4 <HAL_RCC_OscConfig+0x4bc>)
 8000fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb33 	bl	8000650 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fee:	f7ff fb2f 	bl	8000650 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e183      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001000:	4b6c      	ldr	r3, [pc, #432]	@ (80011b4 <HAL_RCC_OscConfig+0x4bc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f0      	beq.n	8000fee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_RCC_OscConfig+0x32e>
 8001014:	4b66      	ldr	r3, [pc, #408]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800101a:	4a65      	ldr	r2, [pc, #404]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001024:	e024      	b.n	8001070 <HAL_RCC_OscConfig+0x378>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b05      	cmp	r3, #5
 800102c:	d110      	bne.n	8001050 <HAL_RCC_OscConfig+0x358>
 800102e:	4b60      	ldr	r3, [pc, #384]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001034:	4a5e      	ldr	r2, [pc, #376]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800103e:	4b5c      	ldr	r3, [pc, #368]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001044:	4a5a      	ldr	r2, [pc, #360]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800104e:	e00f      	b.n	8001070 <HAL_RCC_OscConfig+0x378>
 8001050:	4b57      	ldr	r3, [pc, #348]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001056:	4a56      	ldr	r2, [pc, #344]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001060:	4b53      	ldr	r3, [pc, #332]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001066:	4a52      	ldr	r2, [pc, #328]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001068:	f023 0304 	bic.w	r3, r3, #4
 800106c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d016      	beq.n	80010a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001078:	f7ff faea 	bl	8000650 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800107e:	e00a      	b.n	8001096 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001080:	f7ff fae6 	bl	8000650 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108e:	4293      	cmp	r3, r2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e138      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001096:	4b46      	ldr	r3, [pc, #280]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0ed      	beq.n	8001080 <HAL_RCC_OscConfig+0x388>
 80010a4:	e015      	b.n	80010d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a6:	f7ff fad3 	bl	8000650 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ac:	e00a      	b.n	80010c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff facf 	bl	8000650 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e121      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010c4:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 80010c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1ed      	bne.n	80010ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010d2:	7ffb      	ldrb	r3, [r7, #31]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d105      	bne.n	80010e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	4a34      	ldr	r2, [pc, #208]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 80010de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d03c      	beq.n	800116a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01c      	beq.n	8001132 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 80010fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80010fe:	4a2c      	ldr	r2, [pc, #176]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001108:	f7ff faa2 	bl	8000650 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001110:	f7ff fa9e 	bl	8000650 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e0f2      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001122:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0ef      	beq.n	8001110 <HAL_RCC_OscConfig+0x418>
 8001130:	e01b      	b.n	800116a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001138:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 800113a:	f023 0301 	bic.w	r3, r3, #1
 800113e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001142:	f7ff fa85 	bl	8000650 <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800114a:	f7ff fa81 	bl	8000650 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0d5      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 800115e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1ef      	bne.n	800114a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80c9 	beq.w	8001306 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b0c      	cmp	r3, #12
 800117e:	f000 8083 	beq.w	8001288 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d15e      	bne.n	8001248 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <HAL_RCC_OscConfig+0x4b8>)
 8001190:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001196:	f7ff fa5b 	bl	8000650 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800119c:	e00c      	b.n	80011b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff fa57 	bl	8000650 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d905      	bls.n	80011b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0ab      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b8:	4b55      	ldr	r3, [pc, #340]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1ec      	bne.n	800119e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c4:	4b52      	ldr	r3, [pc, #328]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4b52      	ldr	r3, [pc, #328]	@ (8001314 <HAL_RCC_OscConfig+0x61c>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6a11      	ldr	r1, [r2, #32]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011d4:	3a01      	subs	r2, #1
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	4311      	orrs	r1, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80011de:	0212      	lsls	r2, r2, #8
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80011e6:	0852      	lsrs	r2, r2, #1
 80011e8:	3a01      	subs	r2, #1
 80011ea:	0552      	lsls	r2, r2, #21
 80011ec:	4311      	orrs	r1, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80011f2:	0852      	lsrs	r2, r2, #1
 80011f4:	3a01      	subs	r2, #1
 80011f6:	0652      	lsls	r2, r2, #25
 80011f8:	4311      	orrs	r1, r2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011fe:	06d2      	lsls	r2, r2, #27
 8001200:	430a      	orrs	r2, r1
 8001202:	4943      	ldr	r1, [pc, #268]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 8001204:	4313      	orrs	r3, r2
 8001206:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001208:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a40      	ldr	r2, [pc, #256]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800120e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001212:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001214:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	4a3d      	ldr	r2, [pc, #244]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800121a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800121e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001220:	f7ff fa16 	bl	8000650 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001228:	f7ff fa12 	bl	8000650 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e066      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800123a:	4b35      	ldr	r3, [pc, #212]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x530>
 8001246:	e05e      	b.n	8001306 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001248:	4b31      	ldr	r3, [pc, #196]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a30      	ldr	r2, [pc, #192]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800124e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff f9fc 	bl	8000650 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff f9f8 	bl	8000650 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e04c      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800127a:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	4924      	ldr	r1, [pc, #144]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 8001280:	4b25      	ldr	r3, [pc, #148]	@ (8001318 <HAL_RCC_OscConfig+0x620>)
 8001282:	4013      	ands	r3, r2
 8001284:	60cb      	str	r3, [r1, #12]
 8001286:	e03e      	b.n	8001306 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e039      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <HAL_RCC_OscConfig+0x618>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d12c      	bne.n	8001302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	3b01      	subs	r3, #1
 80012b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d123      	bne.n	8001302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d11b      	bne.n	8001302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d113      	bne.n	8001302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	3b01      	subs	r3, #1
 80012e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d109      	bne.n	8001302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	3b01      	subs	r3, #1
 80012fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d001      	beq.n	8001306 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40021000 	.word	0x40021000
 8001314:	019f800c 	.word	0x019f800c
 8001318:	feeefffc 	.word	0xfeeefffc

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e11e      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b91      	ldr	r3, [pc, #580]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d910      	bls.n	8001364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b8e      	ldr	r3, [pc, #568]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 020f 	bic.w	r2, r3, #15
 800134a:	498c      	ldr	r1, [pc, #560]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b8a      	ldr	r3, [pc, #552]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e106      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d073      	beq.n	8001458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d129      	bne.n	80013cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001378:	4b81      	ldr	r3, [pc, #516]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0f4      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001388:	f000 f9ba 	bl	8001700 <RCC_GetSysClockFreqFromPLLSource>
 800138c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4a7c      	ldr	r2, [pc, #496]	@ (8001584 <HAL_RCC_ClockConfig+0x268>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d93f      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001396:	4b7a      	ldr	r3, [pc, #488]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d033      	beq.n	8001416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d12f      	bne.n	8001416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013b6:	4b72      	ldr	r3, [pc, #456]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013be:	4a70      	ldr	r2, [pc, #448]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013c6:	2380      	movs	r3, #128	@ 0x80
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e024      	b.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0c6      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	4b66      	ldr	r3, [pc, #408]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0be      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013f4:	f000 f8ce 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4a61      	ldr	r2, [pc, #388]	@ (8001584 <HAL_RCC_ClockConfig+0x268>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d909      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001402:	4b5f      	ldr	r3, [pc, #380]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800140a:	4a5d      	ldr	r2, [pc, #372]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001412:	2380      	movs	r3, #128	@ 0x80
 8001414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b5a      	ldr	r3, [pc, #360]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4957      	ldr	r1, [pc, #348]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001428:	f7ff f912 	bl	8000650 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff f90e 	bl	8000650 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e095      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b4e      	ldr	r3, [pc, #312]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b43      	ldr	r3, [pc, #268]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a42      	ldr	r2, [pc, #264]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800147a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001488:	4b3d      	ldr	r3, [pc, #244]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001490:	4a3b      	ldr	r2, [pc, #236]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4936      	ldr	r1, [pc, #216]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
 80014aa:	e008      	b.n	80014be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b80      	cmp	r3, #128	@ 0x80
 80014b0:	d105      	bne.n	80014be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014b2:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4a32      	ldr	r2, [pc, #200]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014be:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d21d      	bcs.n	8001508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 020f 	bic.w	r2, r3, #15
 80014d4:	4929      	ldr	r1, [pc, #164]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f8b8 	bl	8000650 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff f8b4 	bl	8000650 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e03b      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_RCC_ClockConfig+0x260>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ed      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4917      	ldr	r1, [pc, #92]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	490f      	ldr	r1, [pc, #60]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001546:	f000 f825 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800154a:	4602      	mov	r2, r0
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <HAL_RCC_ClockConfig+0x264>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <HAL_RCC_ClockConfig+0x26c>)
 8001558:	5ccb      	ldrb	r3, [r1, r3]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_RCC_ClockConfig+0x270>)
 8001564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_RCC_ClockConfig+0x274>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff78 	bl	8000460 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000
 8001580:	40021000 	.word	0x40021000
 8001584:	04c4b400 	.word	0x04c4b400
 8001588:	080048c4 	.word	0x080048c4
 800158c:	2000000c 	.word	0x2000000c
 8001590:	20000010 	.word	0x20000010

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e047      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015ac:	4b27      	ldr	r3, [pc, #156]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d102      	bne.n	80015be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e03e      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d136      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ca:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	4a16      	ldr	r2, [pc, #88]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f2:	68d2      	ldr	r2, [r2, #12]
 80015f4:	0a12      	lsrs	r2, r2, #8
 80015f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
      break;
 8001600:	e00c      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4a10      	ldr	r2, [pc, #64]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800160c:	68d2      	ldr	r2, [r2, #12]
 800160e:	0a12      	lsrs	r2, r2, #8
 8001610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
      break;
 800161a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800161c:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0e5b      	lsrs	r3, r3, #25
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e001      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800163c:	693b      	ldr	r3, [r7, #16]
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	00f42400 	.word	0x00f42400
 8001654:	016e3600 	.word	0x016e3600

08001658 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_RCC_GetHCLKFreq+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000000c 	.word	0x2000000c

08001670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001674:	f7ff fff0 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 8001678:	4602      	mov	r2, r0
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	0adb      	lsrs	r3, r3, #11
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	4904      	ldr	r1, [pc, #16]	@ (8001698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001686:	5ccb      	ldrb	r3, [r1, r3]
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	080048d4 	.word	0x080048d4

0800169c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	220f      	movs	r2, #15
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 0203 	and.w	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80016b8:	4b0f      	ldr	r3, [pc, #60]	@ (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_GetClockConfig+0x5c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <HAL_RCC_GetClockConfig+0x60>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 020f 	and.w	r2, r3, #15
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40022000 	.word	0x40022000

08001700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001706:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3301      	adds	r3, #1
 800171c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d10c      	bne.n	800173e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	0a12      	lsrs	r2, r2, #8
 8001732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
    break;
 800173c:	e00c      	b.n	8001758 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	0a12      	lsrs	r2, r2, #8
 800174c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    break;
 8001756:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0e5b      	lsrs	r3, r3, #25
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40021000 	.word	0x40021000
 8001784:	016e3600 	.word	0x016e3600
 8001788:	00f42400 	.word	0x00f42400

0800178c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e049      	b.n	8001832 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f841 	bl	800183a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2202      	movs	r2, #2
 80017bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f000 fa22 	bl	8001c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d001      	beq.n	8001868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e04a      	b.n	80018fe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a21      	ldr	r2, [pc, #132]	@ (800190c <HAL_TIM_Base_Start_IT+0xbc>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d018      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x6c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001892:	d013      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x6c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <HAL_TIM_Base_Start_IT+0xc0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00e      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x6c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001914 <HAL_TIM_Base_Start_IT+0xc4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x6c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001918 <HAL_TIM_Base_Start_IT+0xc8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_TIM_Base_Start_IT+0x6c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_TIM_Base_Start_IT+0xcc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d115      	bne.n	80018e8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_TIM_Base_Start_IT+0xd0>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d015      	beq.n	80018fa <HAL_TIM_Base_Start_IT+0xaa>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d4:	d011      	beq.n	80018fa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	e008      	b.n	80018fa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e000      	b.n	80018fc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40012c00 	.word	0x40012c00
 8001910:	40000400 	.word	0x40000400
 8001914:	40000800 	.word	0x40000800
 8001918:	40013400 	.word	0x40013400
 800191c:	40014000 	.word	0x40014000
 8001920:	00010007 	.word	0x00010007

08001924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d020      	beq.n	8001988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01b      	beq.n	8001988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f06f 0202 	mvn.w	r2, #2
 8001958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f931 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 8001974:	e005      	b.n	8001982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f923 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f934 	bl	8001bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d020      	beq.n	80019d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01b      	beq.n	80019d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0204 	mvn.w	r2, #4
 80019a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2202      	movs	r2, #2
 80019aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f90b 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 80019c0:	e005      	b.n	80019ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 f8fd 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f90e 	bl	8001bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d020      	beq.n	8001a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f06f 0208 	mvn.w	r2, #8
 80019f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2204      	movs	r2, #4
 80019f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8e5 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 8001a0c:	e005      	b.n	8001a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8d7 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8e8 	bl	8001bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d020      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0210 	mvn.w	r2, #16
 8001a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2208      	movs	r2, #8
 8001a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f8bf 	bl	8001bd6 <HAL_TIM_IC_CaptureCallback>
 8001a58:	e005      	b.n	8001a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8b1 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8c2 	bl	8001bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00c      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0201 	mvn.w	r2, #1
 8001a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe fca6 	bl	80003dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00c      	beq.n	8001abe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f951 	bl	8001d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f949 	bl	8001d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00c      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f87c 	bl	8001bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00c      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0320 	and.w	r3, r3, #32
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f06f 0220 	mvn.w	r2, #32
 8001b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f911 	bl	8001d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00c      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8001b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f91d 	bl	8001d88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8001b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f915 	bl	8001d9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00c      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8001b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f90d 	bl	8001db0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00c      	beq.n	8001bba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8001bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f905 	bl	8001dc4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a42      	ldr	r2, [pc, #264]	@ (8001d30 <TIM_Base_SetConfig+0x11c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00f      	beq.n	8001c4c <TIM_Base_SetConfig+0x38>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c32:	d00b      	beq.n	8001c4c <TIM_Base_SetConfig+0x38>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a3f      	ldr	r2, [pc, #252]	@ (8001d34 <TIM_Base_SetConfig+0x120>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <TIM_Base_SetConfig+0x38>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d38 <TIM_Base_SetConfig+0x124>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d003      	beq.n	8001c4c <TIM_Base_SetConfig+0x38>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a3d      	ldr	r2, [pc, #244]	@ (8001d3c <TIM_Base_SetConfig+0x128>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d108      	bne.n	8001c5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a33      	ldr	r2, [pc, #204]	@ (8001d30 <TIM_Base_SetConfig+0x11c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01b      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c6c:	d017      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a30      	ldr	r2, [pc, #192]	@ (8001d34 <TIM_Base_SetConfig+0x120>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a2f      	ldr	r2, [pc, #188]	@ (8001d38 <TIM_Base_SetConfig+0x124>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00f      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a2e      	ldr	r2, [pc, #184]	@ (8001d3c <TIM_Base_SetConfig+0x128>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00b      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a2d      	ldr	r2, [pc, #180]	@ (8001d40 <TIM_Base_SetConfig+0x12c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a2c      	ldr	r2, [pc, #176]	@ (8001d44 <TIM_Base_SetConfig+0x130>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d003      	beq.n	8001c9e <TIM_Base_SetConfig+0x8a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <TIM_Base_SetConfig+0x134>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d108      	bne.n	8001cb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <TIM_Base_SetConfig+0x11c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00f      	beq.n	8001cfc <TIM_Base_SetConfig+0xe8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <TIM_Base_SetConfig+0x128>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00b      	beq.n	8001cfc <TIM_Base_SetConfig+0xe8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <TIM_Base_SetConfig+0x12c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <TIM_Base_SetConfig+0xe8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <TIM_Base_SetConfig+0x130>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <TIM_Base_SetConfig+0xe8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <TIM_Base_SetConfig+0x134>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d103      	bne.n	8001d04 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f023 0201 	bic.w	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
  }
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40013400 	.word	0x40013400
 8001d40:	40014000 	.word	0x40014000
 8001d44:	40014400 	.word	0x40014400
 8001d48:	40014800 	.word	0x40014800

08001d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	2b84      	cmp	r3, #132	@ 0x84
 8001dec:	d005      	beq.n	8001dfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001dee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4413      	add	r3, r2
 8001df6:	3303      	adds	r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e0c:	f000 ffa4 	bl	8002d58 <vTaskStartScheduler>
  
  return osOK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e18:	b087      	sub	sp, #28
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685c      	ldr	r4, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e2c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ffcf 	bl	8001dd8 <makeFreeRtosPriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	9200      	str	r2, [sp, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4632      	mov	r2, r6
 8001e48:	4629      	mov	r1, r5
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f000 fd82 	bl	8002954 <xTaskCreate>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <osDelay+0x16>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	e000      	b.n	8001e7c <osDelay+0x18>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 ff35 	bl	8002cec <vTaskDelay>
  
  return osOK;
 8001e82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f103 0208 	add.w	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 0208 	add.w	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0208 	add.w	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f44:	d103      	bne.n	8001f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e00c      	b.n	8001f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3308      	adds	r3, #8
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e002      	b.n	8001f5c <vListInsert+0x2e>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d2f6      	bcs.n	8001f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6892      	ldr	r2, [r2, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6852      	ldr	r2, [r2, #4]
 8001fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d103      	bne.n	8001fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002020:	f002 f822 	bl	8004068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202c:	68f9      	ldr	r1, [r7, #12]
 800202e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	441a      	add	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002050:	3b01      	subs	r3, #1
 8002052:	68f9      	ldr	r1, [r7, #12]
 8002054:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	22ff      	movs	r2, #255	@ 0xff
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	22ff      	movs	r2, #255	@ 0xff
 800206c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d114      	bne.n	80020a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01a      	beq.n	80020b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3310      	adds	r3, #16
 8002082:	4618      	mov	r0, r3
 8002084:	f001 f8ec 	bl	8003260 <xTaskRemoveFromEventList>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <xQueueGenericReset+0xd0>)
 8002090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	e009      	b.n	80020b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3310      	adds	r3, #16
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fef1 	bl	8001e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3324      	adds	r3, #36	@ 0x24
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff feec 	bl	8001e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020b4:	f002 f80a 	bl	80040cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000ed04 	.word	0xe000ed04

080020c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	4613      	mov	r3, r2
 80020d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80020dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	613b      	str	r3, [r7, #16]
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3348      	adds	r3, #72	@ 0x48
 8002102:	4618      	mov	r0, r3
 8002104:	f002 f8d2 	bl	80042ac <pvPortMalloc>
 8002108:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00d      	beq.n	800212c <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3348      	adds	r3, #72	@ 0x48
 8002118:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f805 	bl	8002136 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800212c:	69bb      	ldr	r3, [r7, #24]
	}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e002      	b.n	8002158 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002164:	2101      	movs	r1, #1
 8002166:	69b8      	ldr	r0, [r7, #24]
 8002168:	f7ff ff44 	bl	8001ff4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	@ 0x38
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800218a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <xQueueGenericSend+0x34>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <xQueueGenericSend+0x42>
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <xQueueGenericSend+0x46>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <xQueueGenericSend+0x48>
 80021ba:	2300      	movs	r3, #0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <xQueueGenericSend+0x64>
	__asm volatile
 80021c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c4:	f383 8811 	msr	BASEPRI, r3
 80021c8:	f3bf 8f6f 	isb	sy
 80021cc:	f3bf 8f4f 	dsb	sy
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d103      	bne.n	80021e6 <xQueueGenericSend+0x72>
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <xQueueGenericSend+0x76>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <xQueueGenericSend+0x78>
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <xQueueGenericSend+0x94>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	623b      	str	r3, [r7, #32]
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002208:	f001 f9d0 	bl	80035ac <xTaskGetSchedulerState>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <xQueueGenericSend+0xa4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <xQueueGenericSend+0xa8>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <xQueueGenericSend+0xaa>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <xQueueGenericSend+0xc6>
	__asm volatile
 8002222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002226:	f383 8811 	msr	BASEPRI, r3
 800222a:	f3bf 8f6f 	isb	sy
 800222e:	f3bf 8f4f 	dsb	sy
 8002232:	61fb      	str	r3, [r7, #28]
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	e7fd      	b.n	8002236 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800223a:	f001 ff15 	bl	8004068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002246:	429a      	cmp	r2, r3
 8002248:	d302      	bcc.n	8002250 <xQueueGenericSend+0xdc>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d129      	bne.n	80022a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002256:	f000 fa0f 	bl	8002678 <prvCopyDataToQueue>
 800225a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d010      	beq.n	8002286 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002266:	3324      	adds	r3, #36	@ 0x24
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fff9 	bl	8003260 <xTaskRemoveFromEventList>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002274:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <xQueueGenericSend+0x200>)
 8002276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	e00a      	b.n	800229c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800228c:	4b39      	ldr	r3, [pc, #228]	@ (8002374 <xQueueGenericSend+0x200>)
 800228e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800229c:	f001 ff16 	bl	80040cc <vPortExitCritical>
				return pdPASS;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e063      	b.n	800236c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d103      	bne.n	80022b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022aa:	f001 ff0f 	bl	80040cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e05c      	b.n	800236c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d106      	bne.n	80022c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4618      	mov	r0, r3
 80022be:	f001 f833 	bl	8003328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022c6:	f001 ff01 	bl	80040cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022ca:	f000 fd9d 	bl	8002e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ce:	f001 fecb 	bl	8004068 <vPortEnterCritical>
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022de:	d103      	bne.n	80022e8 <xQueueGenericSend+0x174>
 80022e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022f4:	d103      	bne.n	80022fe <xQueueGenericSend+0x18a>
 80022f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022fe:	f001 fee5 	bl	80040cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002302:	1d3a      	adds	r2, r7, #4
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f822 	bl	8003354 <xTaskCheckForTimeOut>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d124      	bne.n	8002360 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002318:	f000 faa6 	bl	8002868 <prvIsQueueFull>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d018      	beq.n	8002354 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	3310      	adds	r3, #16
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 ff46 	bl	80031bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002332:	f000 fa31 	bl	8002798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002336:	f000 fd75 	bl	8002e24 <xTaskResumeAll>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f47f af7c 	bne.w	800223a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002342:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <xQueueGenericSend+0x200>)
 8002344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	e772      	b.n	800223a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002356:	f000 fa1f 	bl	8002798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800235a:	f000 fd63 	bl	8002e24 <xTaskResumeAll>
 800235e:	e76c      	b.n	800223a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002362:	f000 fa19 	bl	8002798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002366:	f000 fd5d 	bl	8002e24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800236a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800236c:	4618      	mov	r0, r3
 800236e:	3738      	adds	r7, #56	@ 0x38
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b090      	sub	sp, #64	@ 0x40
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <xQueueGenericSendFromISR+0x3e>
 80023ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <xQueueGenericSendFromISR+0x42>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <xQueueGenericSendFromISR+0x44>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d103      	bne.n	80023e6 <xQueueGenericSendFromISR+0x6e>
 80023de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <xQueueGenericSendFromISR+0x72>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueGenericSendFromISR+0x74>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	623b      	str	r3, [r7, #32]
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002408:	f001 ff0e 	bl	8004228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800240c:	f3ef 8211 	mrs	r2, BASEPRI
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	61fa      	str	r2, [r7, #28]
 8002422:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002424:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800242c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <xQueueGenericSendFromISR+0xc2>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d12f      	bne.n	800249a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002440:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002448:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002450:	f000 f912 	bl	8002678 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002454:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800245c:	d112      	bne.n	8002484 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800245e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002468:	3324      	adds	r3, #36	@ 0x24
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fef8 	bl	8003260 <xTaskRemoveFromEventList>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e007      	b.n	8002494 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002488:	3301      	adds	r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	b25a      	sxtb	r2, r3
 800248e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002494:	2301      	movs	r3, #1
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002498:	e001      	b.n	800249e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800249a:	2300      	movs	r3, #0
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800249e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3740      	adds	r7, #64	@ 0x40
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <xQueueReceive+0x32>
	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	623b      	str	r3, [r7, #32]
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	e7fd      	b.n	80024e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d103      	bne.n	80024f4 <xQueueReceive+0x40>
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <xQueueReceive+0x44>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <xQueueReceive+0x46>
 80024f8:	2300      	movs	r3, #0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <xQueueReceive+0x62>
	__asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	61fb      	str	r3, [r7, #28]
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	e7fd      	b.n	8002512 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002516:	f001 f849 	bl	80035ac <xTaskGetSchedulerState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <xQueueReceive+0x72>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <xQueueReceive+0x76>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <xQueueReceive+0x78>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <xQueueReceive+0x94>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	61bb      	str	r3, [r7, #24]
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002548:	f001 fd8e 	bl	8004068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800255c:	f000 f8f6 	bl	800274c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	1e5a      	subs	r2, r3, #1
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00f      	beq.n	8002590 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	3310      	adds	r3, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fe73 	bl	8003260 <xTaskRemoveFromEventList>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002580:	4b3c      	ldr	r3, [pc, #240]	@ (8002674 <xQueueReceive+0x1c0>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002590:	f001 fd9c 	bl	80040cc <vPortExitCritical>
				return pdPASS;
 8002594:	2301      	movs	r3, #1
 8002596:	e069      	b.n	800266c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800259e:	f001 fd95 	bl	80040cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e062      	b.n	800266c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d106      	bne.n	80025ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ac:	f107 0310 	add.w	r3, r7, #16
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 feb9 	bl	8003328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025ba:	f001 fd87 	bl	80040cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025be:	f000 fc23 	bl	8002e08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025c2:	f001 fd51 	bl	8004068 <vPortEnterCritical>
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025d2:	d103      	bne.n	80025dc <xQueueReceive+0x128>
 80025d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025e2:	b25b      	sxtb	r3, r3
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025e8:	d103      	bne.n	80025f2 <xQueueReceive+0x13e>
 80025ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025f2:	f001 fd6b 	bl	80040cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	1d3a      	adds	r2, r7, #4
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fea8 	bl	8003354 <xTaskCheckForTimeOut>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d123      	bne.n	8002652 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800260a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800260c:	f000 f916 	bl	800283c <prvIsQueueEmpty>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d017      	beq.n	8002646 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002618:	3324      	adds	r3, #36	@ 0x24
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fdcc 	bl	80031bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002624:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002626:	f000 f8b7 	bl	8002798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800262a:	f000 fbfb 	bl	8002e24 <xTaskResumeAll>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d189      	bne.n	8002548 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <xQueueReceive+0x1c0>)
 8002636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	e780      	b.n	8002548 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002648:	f000 f8a6 	bl	8002798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800264c:	f000 fbea 	bl	8002e24 <xTaskResumeAll>
 8002650:	e77a      	b.n	8002548 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002654:	f000 f8a0 	bl	8002798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002658:	f000 fbe4 	bl	8002e24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800265c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800265e:	f000 f8ed 	bl	800283c <prvIsQueueEmpty>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	f43f af6f 	beq.w	8002548 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800266a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800266c:	4618      	mov	r0, r3
 800266e:	3730      	adds	r7, #48	@ 0x30
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d14d      	bne.n	800273a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 ffa0 	bl	80035e8 <xTaskPriorityDisinherit>
 80026a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e043      	b.n	800273a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6858      	ldr	r0, [r3, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	461a      	mov	r2, r3
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	f002 f86c 	bl	80047a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	441a      	add	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d32b      	bcc.n	800273a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	e026      	b.n	800273a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68d8      	ldr	r0, [r3, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	461a      	mov	r2, r3
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	f002 f852 	bl	80047a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	425b      	negs	r3, r3
 8002706:	441a      	add	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002720:	425b      	negs	r3, r3
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d105      	bne.n	800273a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3b01      	subs	r3, #1
 8002738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002742:	697b      	ldr	r3, [r7, #20]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	441a      	add	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d303      	bcc.n	8002780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68d9      	ldr	r1, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	461a      	mov	r2, r3
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	f002 f808 	bl	80047a0 <memcpy>
	}
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027a0:	f001 fc62 	bl	8004068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ac:	e011      	b.n	80027d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3324      	adds	r3, #36	@ 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd50 	bl	8003260 <xTaskRemoveFromEventList>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027c6:	f000 fe29 	bl	800341c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	dce9      	bgt.n	80027ae <prvUnlockQueue+0x16>
 80027da:	e000      	b.n	80027de <prvUnlockQueue+0x46>
					break;
 80027dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	22ff      	movs	r2, #255	@ 0xff
 80027e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027e6:	f001 fc71 	bl	80040cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027ea:	f001 fc3d 	bl	8004068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f6:	e011      	b.n	800281c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d012      	beq.n	8002826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3310      	adds	r3, #16
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fd2b 	bl	8003260 <xTaskRemoveFromEventList>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002810:	f000 fe04 	bl	800341c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002814:	7bbb      	ldrb	r3, [r7, #14]
 8002816:	3b01      	subs	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800281c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002820:	2b00      	cmp	r3, #0
 8002822:	dce9      	bgt.n	80027f8 <prvUnlockQueue+0x60>
 8002824:	e000      	b.n	8002828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	22ff      	movs	r2, #255	@ 0xff
 800282c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002830:	f001 fc4c 	bl	80040cc <vPortExitCritical>
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002844:	f001 fc10 	bl	8004068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002850:	2301      	movs	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e001      	b.n	800285a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800285a:	f001 fc37 	bl	80040cc <vPortExitCritical>

	return xReturn;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002870:	f001 fbfa 	bl	8004068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	429a      	cmp	r2, r3
 800287e:	d102      	bne.n	8002886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002880:	2301      	movs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e001      	b.n	800288a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800288a:	f001 fc1f 	bl	80040cc <vPortExitCritical>

	return xReturn;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e014      	b.n	80028d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028a8:	4a0f      	ldr	r2, [pc, #60]	@ (80028e8 <vQueueAddToRegistry+0x50>)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028b4:	490c      	ldr	r1, [pc, #48]	@ (80028e8 <vQueueAddToRegistry+0x50>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <vQueueAddToRegistry+0x50>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028ca:	e006      	b.n	80028da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b07      	cmp	r3, #7
 80028d6:	d9e7      	bls.n	80028a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	200000dc 	.word	0x200000dc

080028ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028fc:	f001 fbb4 	bl	8004068 <vPortEnterCritical>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002906:	b25b      	sxtb	r3, r3
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800290c:	d103      	bne.n	8002916 <vQueueWaitForMessageRestricted+0x2a>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800291c:	b25b      	sxtb	r3, r3
 800291e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002922:	d103      	bne.n	800292c <vQueueWaitForMessageRestricted+0x40>
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800292c:	f001 fbce 	bl	80040cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	3324      	adds	r3, #36	@ 0x24
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fc61 	bl	8003208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002946:	6978      	ldr	r0, [r7, #20]
 8002948:	f7ff ff26 	bl	8002798 <prvUnlockQueue>
	}
 800294c:	bf00      	nop
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	@ 0x30
 8002958:	af04      	add	r7, sp, #16
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fc9f 	bl	80042ac <pvPortMalloc>
 800296e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00e      	beq.n	8002994 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002976:	20a0      	movs	r0, #160	@ 0xa0
 8002978:	f001 fc98 	bl	80042ac <pvPortMalloc>
 800297c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	631a      	str	r2, [r3, #48]	@ 0x30
 800298a:	e005      	b.n	8002998 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800298c:	6978      	ldr	r0, [r7, #20]
 800298e:	f001 fd5b 	bl	8004448 <vPortFree>
 8002992:	e001      	b.n	8002998 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d013      	beq.n	80029c6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	2300      	movs	r3, #0
 80029a2:	9303      	str	r3, [sp, #12]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f80f 	bl	80029d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029ba:	69f8      	ldr	r0, [r7, #28]
 80029bc:	f000 f8ac 	bl	8002b18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029c0:	2301      	movs	r3, #1
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	e002      	b.n	80029cc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029cc:	69bb      	ldr	r3, [r7, #24]
	}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f0:	3b01      	subs	r3, #1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	617b      	str	r3, [r7, #20]
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	e7fd      	b.n	8002a1e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01f      	beq.n	8002a68 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	e012      	b.n	8002a54 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	7819      	ldrb	r1, [r3, #0]
 8002a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3334      	adds	r3, #52	@ 0x34
 8002a3e:	460a      	mov	r2, r1
 8002a40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	d9e9      	bls.n	8002a2e <prvInitialiseNewTask+0x56>
 8002a5a:	e000      	b.n	8002a5e <prvInitialiseNewTask+0x86>
			{
				break;
 8002a5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a66:	e003      	b.n	8002a70 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	2b1f      	cmp	r3, #31
 8002a74:	d901      	bls.n	8002a7a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a76:	231f      	movs	r3, #31
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a88:	2200      	movs	r2, #0
 8002a8a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fa1b 	bl	8001ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a98:	3318      	adds	r3, #24
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fa16 	bl	8001ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa8:	f1c3 0220 	rsb	r2, r3, #32
 8002aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	334c      	adds	r3, #76	@ 0x4c
 8002aca:	224c      	movs	r2, #76	@ 0x4c
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fdda 	bl	8004688 <memset>
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <prvInitialiseNewTask+0x134>)
 8002ad8:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <prvInitialiseNewTask+0x138>)
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8002b14 <prvInitialiseNewTask+0x13c>)
 8002ae4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	68f9      	ldr	r1, [r7, #12]
 8002aea:	69b8      	ldr	r0, [r7, #24]
 8002aec:	f001 f988 	bl	8003e00 <pxPortInitialiseStack>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b02:	bf00      	nop
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200052c0 	.word	0x200052c0
 8002b10:	20005328 	.word	0x20005328
 8002b14:	20005390 	.word	0x20005390

08002b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b20:	f001 faa2 	bl	8004068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b24:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd0 <prvAddNewTaskToReadyList+0xb8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a29      	ldr	r2, [pc, #164]	@ (8002bd0 <prvAddNewTaskToReadyList+0xb8>)
 8002b2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b2e:	4b29      	ldr	r3, [pc, #164]	@ (8002bd4 <prvAddNewTaskToReadyList+0xbc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b36:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <prvAddNewTaskToReadyList+0xbc>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b3c:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <prvAddNewTaskToReadyList+0xb8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d110      	bne.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b44:	f000 fc8e 	bl	8003464 <prvInitialiseTaskLists>
 8002b48:	e00d      	b.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b4a:	4b23      	ldr	r3, [pc, #140]	@ (8002bd8 <prvAddNewTaskToReadyList+0xc0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b52:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <prvAddNewTaskToReadyList+0xbc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d802      	bhi.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b60:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd4 <prvAddNewTaskToReadyList+0xbc>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b66:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <prvAddNewTaskToReadyList+0xc4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <prvAddNewTaskToReadyList+0xc4>)
 8002b6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <prvAddNewTaskToReadyList+0xc8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	4a18      	ldr	r2, [pc, #96]	@ (8002be0 <prvAddNewTaskToReadyList+0xc8>)
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4a15      	ldr	r2, [pc, #84]	@ (8002be4 <prvAddNewTaskToReadyList+0xcc>)
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4610      	mov	r0, r2
 8002b9a:	f7ff f9a4 	bl	8001ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b9e:	f001 fa95 	bl	80040cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <prvAddNewTaskToReadyList+0xc0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <prvAddNewTaskToReadyList+0xbc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d207      	bcs.n	8002bc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <prvAddNewTaskToReadyList+0xd0>)
 8002bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20000410 	.word	0x20000410
 8002bd4:	2000011c 	.word	0x2000011c
 8002bd8:	2000041c 	.word	0x2000041c
 8002bdc:	2000042c 	.word	0x2000042c
 8002be0:	20000418 	.word	0x20000418
 8002be4:	20000120 	.word	0x20000120
 8002be8:	e000ed04 	.word	0xe000ed04

08002bec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <vTaskDelayUntil+0x2c>
	__asm volatile
 8002c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c04:	f383 8811 	msr	BASEPRI, r3
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	617b      	str	r3, [r7, #20]
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <vTaskDelayUntil+0x4a>
	__asm volatile
 8002c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	613b      	str	r3, [r7, #16]
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	e7fd      	b.n	8002c32 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8002c36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce0 <vTaskDelayUntil+0xf4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <vTaskDelayUntil+0x6a>
	__asm volatile
 8002c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60fb      	str	r3, [r7, #12]
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	e7fd      	b.n	8002c52 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8002c56:	f000 f8d7 	bl	8002e08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <vTaskDelayUntil+0xf8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d20b      	bcs.n	8002c8c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d211      	bcs.n	8002ca2 <vTaskDelayUntil+0xb6>
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d90d      	bls.n	8002ca2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002c86:	2301      	movs	r3, #1
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8a:	e00a      	b.n	8002ca2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d303      	bcc.n	8002c9e <vTaskDelayUntil+0xb2>
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d901      	bls.n	8002ca2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fd1e 	bl	80036f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002cbc:	f000 f8b2 	bl	8002e24 <xTaskResumeAll>
 8002cc0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d107      	bne.n	8002cd8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8002cc8:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <vTaskDelayUntil+0xfc>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cd8:	bf00      	nop
 8002cda:	3728      	adds	r7, #40	@ 0x28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000438 	.word	0x20000438
 8002ce4:	20000414 	.word	0x20000414
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d018      	beq.n	8002d30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <vTaskDelay+0x64>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <vTaskDelay+0x32>
	__asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	60bb      	str	r3, [r7, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	e7fd      	b.n	8002d1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d1e:	f000 f873 	bl	8002e08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d22:	2100      	movs	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fce7 	bl	80036f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d2a:	f000 f87b 	bl	8002e24 <xTaskResumeAll>
 8002d2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d107      	bne.n	8002d46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002d36:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <vTaskDelay+0x68>)
 8002d38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000438 	.word	0x20000438
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <vTaskStartScheduler+0x90>)
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	2280      	movs	r2, #128	@ 0x80
 8002d6a:	4920      	ldr	r1, [pc, #128]	@ (8002dec <vTaskStartScheduler+0x94>)
 8002d6c:	4820      	ldr	r0, [pc, #128]	@ (8002df0 <vTaskStartScheduler+0x98>)
 8002d6e:	f7ff fdf1 	bl	8002954 <xTaskCreate>
 8002d72:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002d7a:	f000 fd23 	bl	80037c4 <xTimerCreateTimerTask>
 8002d7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d11b      	bne.n	8002dbe <vTaskStartScheduler+0x66>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	60bb      	str	r3, [r7, #8]
}
 8002d98:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <vTaskStartScheduler+0x9c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	334c      	adds	r3, #76	@ 0x4c
 8002da0:	4a15      	ldr	r2, [pc, #84]	@ (8002df8 <vTaskStartScheduler+0xa0>)
 8002da2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002da4:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <vTaskStartScheduler+0xa4>)
 8002da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002daa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002dac:	4b14      	ldr	r3, [pc, #80]	@ (8002e00 <vTaskStartScheduler+0xa8>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002db2:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <vTaskStartScheduler+0xac>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002db8:	f001 f8b2 	bl	8003f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002dbc:	e00f      	b.n	8002dde <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dc4:	d10b      	bne.n	8002dde <vTaskStartScheduler+0x86>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	607b      	str	r3, [r7, #4]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <vTaskStartScheduler+0x82>
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000434 	.word	0x20000434
 8002dec:	080048ac 	.word	0x080048ac
 8002df0:	08003435 	.word	0x08003435
 8002df4:	2000011c 	.word	0x2000011c
 8002df8:	2000001c 	.word	0x2000001c
 8002dfc:	20000430 	.word	0x20000430
 8002e00:	2000041c 	.word	0x2000041c
 8002e04:	20000414 	.word	0x20000414

08002e08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <vTaskSuspendAll+0x18>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a03      	ldr	r2, [pc, #12]	@ (8002e20 <vTaskSuspendAll+0x18>)
 8002e14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	20000438 	.word	0x20000438

08002e24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e32:	4b42      	ldr	r3, [pc, #264]	@ (8002f3c <xTaskResumeAll+0x118>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10b      	bne.n	8002e52 <xTaskResumeAll+0x2e>
	__asm volatile
 8002e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	603b      	str	r3, [r7, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	e7fd      	b.n	8002e4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e52:	f001 f909 	bl	8004068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e56:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <xTaskResumeAll+0x118>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	4a37      	ldr	r2, [pc, #220]	@ (8002f3c <xTaskResumeAll+0x118>)
 8002e5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e60:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <xTaskResumeAll+0x118>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d161      	bne.n	8002f2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e68:	4b35      	ldr	r3, [pc, #212]	@ (8002f40 <xTaskResumeAll+0x11c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05d      	beq.n	8002f2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e70:	e02e      	b.n	8002ed0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <xTaskResumeAll+0x120>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f88e 	bl	8001fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f889 	bl	8001fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	4b2c      	ldr	r3, [pc, #176]	@ (8002f48 <xTaskResumeAll+0x124>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f48 <xTaskResumeAll+0x124>)
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <xTaskResumeAll+0x128>)
 8002eae:	441a      	add	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f7ff f815 	bl	8001ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec0:	4b23      	ldr	r3, [pc, #140]	@ (8002f50 <xTaskResumeAll+0x12c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002eca:	4b22      	ldr	r3, [pc, #136]	@ (8002f54 <xTaskResumeAll+0x130>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <xTaskResumeAll+0x120>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1cc      	bne.n	8002e72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ede:	f000 fb45 	bl	800356c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <xTaskResumeAll+0x134>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eee:	f000 f847 	bl	8002f80 <xTaskIncrementTick>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	@ (8002f54 <xTaskResumeAll+0x130>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f1      	bne.n	8002eee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <xTaskResumeAll+0x134>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <xTaskResumeAll+0x130>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <xTaskResumeAll+0x138>)
 8002f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f2c:	f001 f8ce 	bl	80040cc <vPortExitCritical>

	return xAlreadyYielded;
 8002f30:	68bb      	ldr	r3, [r7, #8]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000438 	.word	0x20000438
 8002f40:	20000410 	.word	0x20000410
 8002f44:	200003d0 	.word	0x200003d0
 8002f48:	20000418 	.word	0x20000418
 8002f4c:	20000120 	.word	0x20000120
 8002f50:	2000011c 	.word	0x2000011c
 8002f54:	20000424 	.word	0x20000424
 8002f58:	20000420 	.word	0x20000420
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f66:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <xTaskGetTickCount+0x1c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f6c:	687b      	ldr	r3, [r7, #4]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	20000414 	.word	0x20000414

08002f80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	@ (80030c8 <xTaskIncrementTick+0x148>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 808f 	bne.w	80030b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f94:	4b4d      	ldr	r3, [pc, #308]	@ (80030cc <xTaskIncrementTick+0x14c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80030cc <xTaskIncrementTick+0x14c>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d121      	bne.n	8002fec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fa8:	4b49      	ldr	r3, [pc, #292]	@ (80030d0 <xTaskIncrementTick+0x150>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <xTaskIncrementTick+0x4a>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	603b      	str	r3, [r7, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <xTaskIncrementTick+0x46>
 8002fca:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <xTaskIncrementTick+0x150>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	4b40      	ldr	r3, [pc, #256]	@ (80030d4 <xTaskIncrementTick+0x154>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a3e      	ldr	r2, [pc, #248]	@ (80030d0 <xTaskIncrementTick+0x150>)
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4a3e      	ldr	r2, [pc, #248]	@ (80030d4 <xTaskIncrementTick+0x154>)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <xTaskIncrementTick+0x158>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a3c      	ldr	r2, [pc, #240]	@ (80030d8 <xTaskIncrementTick+0x158>)
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	f000 fac0 	bl	800356c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fec:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <xTaskIncrementTick+0x15c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d348      	bcc.n	8003088 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ff6:	4b36      	ldr	r3, [pc, #216]	@ (80030d0 <xTaskIncrementTick+0x150>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003000:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <xTaskIncrementTick+0x15c>)
 8003002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003006:	601a      	str	r2, [r3, #0]
					break;
 8003008:	e03e      	b.n	8003088 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800300a:	4b31      	ldr	r3, [pc, #196]	@ (80030d0 <xTaskIncrementTick+0x150>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d203      	bcs.n	800302a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003022:	4a2e      	ldr	r2, [pc, #184]	@ (80030dc <xTaskIncrementTick+0x15c>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003028:	e02e      	b.n	8003088 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	3304      	adds	r3, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe ffb6 	bl	8001fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3318      	adds	r3, #24
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe ffad 	bl	8001fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	2201      	movs	r2, #1
 800304c:	409a      	lsls	r2, r3
 800304e:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <xTaskIncrementTick+0x160>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	4a22      	ldr	r2, [pc, #136]	@ (80030e0 <xTaskIncrementTick+0x160>)
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4a1f      	ldr	r2, [pc, #124]	@ (80030e4 <xTaskIncrementTick+0x164>)
 8003066:	441a      	add	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	3304      	adds	r3, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fe ff39 	bl	8001ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <xTaskIncrementTick+0x168>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307e:	429a      	cmp	r2, r3
 8003080:	d3b9      	bcc.n	8002ff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003086:	e7b6      	b.n	8002ff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003088:	4b17      	ldr	r3, [pc, #92]	@ (80030e8 <xTaskIncrementTick+0x168>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308e:	4915      	ldr	r1, [pc, #84]	@ (80030e4 <xTaskIncrementTick+0x164>)
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d901      	bls.n	80030a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80030a0:	2301      	movs	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80030a4:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <xTaskIncrementTick+0x16c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	e004      	b.n	80030bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80030b2:	4b0f      	ldr	r3, [pc, #60]	@ (80030f0 <xTaskIncrementTick+0x170>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a0d      	ldr	r2, [pc, #52]	@ (80030f0 <xTaskIncrementTick+0x170>)
 80030ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80030bc:	697b      	ldr	r3, [r7, #20]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000438 	.word	0x20000438
 80030cc:	20000414 	.word	0x20000414
 80030d0:	200003c8 	.word	0x200003c8
 80030d4:	200003cc 	.word	0x200003cc
 80030d8:	20000428 	.word	0x20000428
 80030dc:	20000430 	.word	0x20000430
 80030e0:	20000418 	.word	0x20000418
 80030e4:	20000120 	.word	0x20000120
 80030e8:	2000011c 	.word	0x2000011c
 80030ec:	20000424 	.word	0x20000424
 80030f0:	20000420 	.word	0x20000420

080030f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030fa:	4b2a      	ldr	r3, [pc, #168]	@ (80031a4 <vTaskSwitchContext+0xb0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003102:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <vTaskSwitchContext+0xb4>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003108:	e045      	b.n	8003196 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800310a:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <vTaskSwitchContext+0xb4>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003110:	4b26      	ldr	r3, [pc, #152]	@ (80031ac <vTaskSwitchContext+0xb8>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f1c3 031f 	rsb	r3, r3, #31
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	4922      	ldr	r1, [pc, #136]	@ (80031b0 <vTaskSwitchContext+0xbc>)
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <vTaskSwitchContext+0x5e>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	607b      	str	r3, [r7, #4]
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	e7fd      	b.n	800314e <vTaskSwitchContext+0x5a>
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <vTaskSwitchContext+0xbc>)
 800315e:	4413      	add	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	3308      	adds	r3, #8
 8003174:	429a      	cmp	r2, r3
 8003176:	d104      	bne.n	8003182 <vTaskSwitchContext+0x8e>
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <vTaskSwitchContext+0xc0>)
 800318a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <vTaskSwitchContext+0xc0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	334c      	adds	r3, #76	@ 0x4c
 8003192:	4a09      	ldr	r2, [pc, #36]	@ (80031b8 <vTaskSwitchContext+0xc4>)
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000438 	.word	0x20000438
 80031a8:	20000424 	.word	0x20000424
 80031ac:	20000418 	.word	0x20000418
 80031b0:	20000120 	.word	0x20000120
 80031b4:	2000011c 	.word	0x2000011c
 80031b8:	2000001c 	.word	0x2000001c

080031bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80031cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d0:	f383 8811 	msr	BASEPRI, r3
 80031d4:	f3bf 8f6f 	isb	sy
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	60fb      	str	r3, [r7, #12]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031e4:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <vTaskPlaceOnEventList+0x48>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3318      	adds	r3, #24
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fe fe9e 	bl	8001f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031f2:	2101      	movs	r1, #1
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	f000 fa7f 	bl	80036f8 <prvAddCurrentTaskToDelayedList>
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000011c 	.word	0x2000011c

08003208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	617b      	str	r3, [r7, #20]
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	e7fd      	b.n	800322e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <vTaskPlaceOnEventListRestricted+0x54>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3318      	adds	r3, #24
 8003238:	4619      	mov	r1, r3
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7fe fe53 	bl	8001ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800324a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	68b8      	ldr	r0, [r7, #8]
 8003250:	f000 fa52 	bl	80036f8 <prvAddCurrentTaskToDelayedList>
	}
 8003254:	bf00      	nop
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2000011c 	.word	0x2000011c

08003260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	60fb      	str	r3, [r7, #12]
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	3318      	adds	r3, #24
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe fe84 	bl	8001fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003298:	4b1d      	ldr	r3, [pc, #116]	@ (8003310 <xTaskRemoveFromEventList+0xb0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11c      	bne.n	80032da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fe7b 	bl	8001fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ae:	2201      	movs	r2, #1
 80032b0:	409a      	lsls	r2, r3
 80032b2:	4b18      	ldr	r3, [pc, #96]	@ (8003314 <xTaskRemoveFromEventList+0xb4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	4a16      	ldr	r2, [pc, #88]	@ (8003314 <xTaskRemoveFromEventList+0xb4>)
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4a13      	ldr	r2, [pc, #76]	@ (8003318 <xTaskRemoveFromEventList+0xb8>)
 80032ca:	441a      	add	r2, r3
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	3304      	adds	r3, #4
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7fe fe07 	bl	8001ee6 <vListInsertEnd>
 80032d8:	e005      	b.n	80032e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	3318      	adds	r3, #24
 80032de:	4619      	mov	r1, r3
 80032e0:	480e      	ldr	r0, [pc, #56]	@ (800331c <xTaskRemoveFromEventList+0xbc>)
 80032e2:	f7fe fe00 	bl	8001ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <xTaskRemoveFromEventList+0xc0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d905      	bls.n	8003300 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032f4:	2301      	movs	r3, #1
 80032f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003324 <xTaskRemoveFromEventList+0xc4>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e001      	b.n	8003304 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003304:	697b      	ldr	r3, [r7, #20]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000438 	.word	0x20000438
 8003314:	20000418 	.word	0x20000418
 8003318:	20000120 	.word	0x20000120
 800331c:	200003d0 	.word	0x200003d0
 8003320:	2000011c 	.word	0x2000011c
 8003324:	20000424 	.word	0x20000424

08003328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003330:	4b06      	ldr	r3, [pc, #24]	@ (800334c <vTaskInternalSetTimeOutState+0x24>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <vTaskInternalSetTimeOutState+0x28>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	605a      	str	r2, [r3, #4]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	20000428 	.word	0x20000428
 8003350:	20000414 	.word	0x20000414

08003354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	613b      	str	r3, [r7, #16]
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10b      	bne.n	800339a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	60fb      	str	r3, [r7, #12]
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	e7fd      	b.n	8003396 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800339a:	f000 fe65 	bl	8004068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800339e:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <xTaskCheckForTimeOut+0xc0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033b6:	d102      	bne.n	80033be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	e023      	b.n	8003406 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <xTaskCheckForTimeOut+0xc4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d007      	beq.n	80033da <xTaskCheckForTimeOut+0x86>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e015      	b.n	8003406 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d20b      	bcs.n	80033fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad2      	subs	r2, r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff99 	bl	8003328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e004      	b.n	8003406 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003402:	2301      	movs	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003406:	f000 fe61 	bl	80040cc <vPortExitCritical>

	return xReturn;
 800340a:	69fb      	ldr	r3, [r7, #28]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20000414 	.word	0x20000414
 8003418:	20000428 	.word	0x20000428

0800341c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <vTaskMissedYield+0x14>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20000424 	.word	0x20000424

08003434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800343c:	f000 f852 	bl	80034e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <prvIdleTask+0x28>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d9f9      	bls.n	800343c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003448:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <prvIdleTask+0x2c>)
 800344a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003458:	e7f0      	b.n	800343c <prvIdleTask+0x8>
 800345a:	bf00      	nop
 800345c:	20000120 	.word	0x20000120
 8003460:	e000ed04 	.word	0xe000ed04

08003464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	e00c      	b.n	800348a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <prvInitialiseTaskLists+0x60>)
 800347c:	4413      	add	r3, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe fd04 	bl	8001e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b1f      	cmp	r3, #31
 800348e:	d9ef      	bls.n	8003470 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003490:	480d      	ldr	r0, [pc, #52]	@ (80034c8 <prvInitialiseTaskLists+0x64>)
 8003492:	f7fe fcfb 	bl	8001e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003496:	480d      	ldr	r0, [pc, #52]	@ (80034cc <prvInitialiseTaskLists+0x68>)
 8003498:	f7fe fcf8 	bl	8001e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800349c:	480c      	ldr	r0, [pc, #48]	@ (80034d0 <prvInitialiseTaskLists+0x6c>)
 800349e:	f7fe fcf5 	bl	8001e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034a2:	480c      	ldr	r0, [pc, #48]	@ (80034d4 <prvInitialiseTaskLists+0x70>)
 80034a4:	f7fe fcf2 	bl	8001e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80034a8:	480b      	ldr	r0, [pc, #44]	@ (80034d8 <prvInitialiseTaskLists+0x74>)
 80034aa:	f7fe fcef 	bl	8001e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80034ae:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <prvInitialiseTaskLists+0x78>)
 80034b0:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <prvInitialiseTaskLists+0x64>)
 80034b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <prvInitialiseTaskLists+0x7c>)
 80034b6:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <prvInitialiseTaskLists+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000120 	.word	0x20000120
 80034c8:	200003a0 	.word	0x200003a0
 80034cc:	200003b4 	.word	0x200003b4
 80034d0:	200003d0 	.word	0x200003d0
 80034d4:	200003e4 	.word	0x200003e4
 80034d8:	200003fc 	.word	0x200003fc
 80034dc:	200003c8 	.word	0x200003c8
 80034e0:	200003cc 	.word	0x200003cc

080034e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ea:	e019      	b.n	8003520 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034ec:	f000 fdbc 	bl	8004068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f0:	4b10      	ldr	r3, [pc, #64]	@ (8003534 <prvCheckTasksWaitingTermination+0x50>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fd4f 	bl	8001fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <prvCheckTasksWaitingTermination+0x54>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3b01      	subs	r3, #1
 8003508:	4a0b      	ldr	r2, [pc, #44]	@ (8003538 <prvCheckTasksWaitingTermination+0x54>)
 800350a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800350c:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <prvCheckTasksWaitingTermination+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	4a0a      	ldr	r2, [pc, #40]	@ (800353c <prvCheckTasksWaitingTermination+0x58>)
 8003514:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003516:	f000 fdd9 	bl	80040cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f810 	bl	8003540 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <prvCheckTasksWaitingTermination+0x58>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e1      	bne.n	80034ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200003e4 	.word	0x200003e4
 8003538:	20000410 	.word	0x20000410
 800353c:	200003f8 	.word	0x200003f8

08003540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	334c      	adds	r3, #76	@ 0x4c
 800354c:	4618      	mov	r0, r3
 800354e:	f001 f8a3 	bl	8004698 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff76 	bl	8004448 <vPortFree>
			vPortFree( pxTCB );
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 ff73 	bl	8004448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003572:	4b0c      	ldr	r3, [pc, #48]	@ (80035a4 <prvResetNextTaskUnblockTime+0x38>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800357c:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <prvResetNextTaskUnblockTime+0x3c>)
 800357e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003582:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003584:	e008      	b.n	8003598 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003586:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <prvResetNextTaskUnblockTime+0x38>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a04      	ldr	r2, [pc, #16]	@ (80035a8 <prvResetNextTaskUnblockTime+0x3c>)
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	200003c8 	.word	0x200003c8
 80035a8:	20000430 	.word	0x20000430

080035ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <xTaskGetSchedulerState+0x34>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035ba:	2301      	movs	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	e008      	b.n	80035d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c0:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <xTaskGetSchedulerState+0x38>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035c8:	2302      	movs	r3, #2
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	e001      	b.n	80035d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035d2:	687b      	ldr	r3, [r7, #4]
	}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	2000041c 	.word	0x2000041c
 80035e4:	20000438 	.word	0x20000438

080035e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d070      	beq.n	80036e0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035fe:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <xTaskPriorityDisinherit+0x104>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	429a      	cmp	r2, r3
 8003606:	d00b      	beq.n	8003620 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	60bb      	str	r3, [r7, #8]
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	429a      	cmp	r2, r3
 8003654:	d044      	beq.n	80036e0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365a:	2b00      	cmp	r3, #0
 800365c:	d140      	bne.n	80036e0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fc9c 	bl	8001fa0 <uxListRemove>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d115      	bne.n	800369a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003672:	491f      	ldr	r1, [pc, #124]	@ (80036f0 <xTaskPriorityDisinherit+0x108>)
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <xTaskPriorityDisinherit+0xb2>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	2201      	movs	r2, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43da      	mvns	r2, r3
 8003690:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <xTaskPriorityDisinherit+0x10c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4013      	ands	r3, r2
 8003696:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <xTaskPriorityDisinherit+0x10c>)
 8003698:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	f1c3 0220 	rsb	r2, r3, #32
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	4b0f      	ldr	r3, [pc, #60]	@ (80036f4 <xTaskPriorityDisinherit+0x10c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	4a0d      	ldr	r2, [pc, #52]	@ (80036f4 <xTaskPriorityDisinherit+0x10c>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a08      	ldr	r2, [pc, #32]	@ (80036f0 <xTaskPriorityDisinherit+0x108>)
 80036ce:	441a      	add	r2, r3
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7fe fc05 	bl	8001ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036e0:	697b      	ldr	r3, [r7, #20]
	}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000011c 	.word	0x2000011c
 80036f0:	20000120 	.word	0x20000120
 80036f4:	20000418 	.word	0x20000418

080036f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003702:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003708:	4b28      	ldr	r3, [pc, #160]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3304      	adds	r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fc46 	bl	8001fa0 <uxListRemove>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800371a:	4b24      	ldr	r3, [pc, #144]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	2201      	movs	r2, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	4b21      	ldr	r3, [pc, #132]	@ (80037b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4013      	ands	r3, r2
 800372e:	4a20      	ldr	r2, [pc, #128]	@ (80037b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003730:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003738:	d10a      	bne.n	8003750 <prvAddCurrentTaskToDelayedList+0x58>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003740:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3304      	adds	r3, #4
 8003746:	4619      	mov	r1, r3
 8003748:	481a      	ldr	r0, [pc, #104]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800374a:	f7fe fbcc 	bl	8001ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800374e:	e026      	b.n	800379e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003758:	4b14      	ldr	r3, [pc, #80]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d209      	bcs.n	800377c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003768:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3304      	adds	r3, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4610      	mov	r0, r2
 8003776:	f7fe fbda 	bl	8001f2e <vListInsert>
}
 800377a:	e010      	b.n	800379e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800377c:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3304      	adds	r3, #4
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7fe fbd0 	bl	8001f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800378e:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	d202      	bcs.n	800379e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003798:	4a09      	ldr	r2, [pc, #36]	@ (80037c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6013      	str	r3, [r2, #0]
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000414 	.word	0x20000414
 80037ac:	2000011c 	.word	0x2000011c
 80037b0:	20000418 	.word	0x20000418
 80037b4:	200003fc 	.word	0x200003fc
 80037b8:	200003cc 	.word	0x200003cc
 80037bc:	200003c8 	.word	0x200003c8
 80037c0:	20000430 	.word	0x20000430

080037c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80037ce:	f000 fae1 	bl	8003d94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80037d2:	4b12      	ldr	r3, [pc, #72]	@ (800381c <xTimerCreateTimerTask+0x58>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80037da:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <xTimerCreateTimerTask+0x5c>)
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2302      	movs	r3, #2
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037e8:	490e      	ldr	r1, [pc, #56]	@ (8003824 <xTimerCreateTimerTask+0x60>)
 80037ea:	480f      	ldr	r0, [pc, #60]	@ (8003828 <xTimerCreateTimerTask+0x64>)
 80037ec:	f7ff f8b2 	bl	8002954 <xTaskCreate>
 80037f0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	603b      	str	r3, [r7, #0]
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xTimerCreateTimerTask+0x48>
	return xReturn;
 8003810:	687b      	ldr	r3, [r7, #4]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000046c 	.word	0x2000046c
 8003820:	20000470 	.word	0x20000470
 8003824:	080048b4 	.word	0x080048b4
 8003828:	08003965 	.word	0x08003965

0800382c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	@ 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <xTimerGenericCommand+0x30>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	623b      	str	r3, [r7, #32]
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800385c:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <xTimerGenericCommand+0x98>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02a      	beq.n	80038ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b05      	cmp	r3, #5
 8003874:	dc18      	bgt.n	80038a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003876:	f7ff fe99 	bl	80035ac <xTaskGetSchedulerState>
 800387a:	4603      	mov	r3, r0
 800387c:	2b02      	cmp	r3, #2
 800387e:	d109      	bne.n	8003894 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003880:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <xTimerGenericCommand+0x98>)
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	f107 0114 	add.w	r1, r7, #20
 8003888:	2300      	movs	r3, #0
 800388a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800388c:	f7fe fc72 	bl	8002174 <xQueueGenericSend>
 8003890:	6278      	str	r0, [r7, #36]	@ 0x24
 8003892:	e012      	b.n	80038ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003894:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <xTimerGenericCommand+0x98>)
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	f107 0114 	add.w	r1, r7, #20
 800389c:	2300      	movs	r3, #0
 800389e:	2200      	movs	r2, #0
 80038a0:	f7fe fc68 	bl	8002174 <xQueueGenericSend>
 80038a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80038a6:	e008      	b.n	80038ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <xTimerGenericCommand+0x98>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	f107 0114 	add.w	r1, r7, #20
 80038b0:	2300      	movs	r3, #0
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	f7fe fd60 	bl	8002378 <xQueueGenericSendFromISR>
 80038b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3728      	adds	r7, #40	@ 0x28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	2000046c 	.word	0x2000046c

080038c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038d2:	4b23      	ldr	r3, [pc, #140]	@ (8003960 <prvProcessExpiredTimer+0x98>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3304      	adds	r3, #4
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fe fb5d 	bl	8001fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d023      	beq.n	800393c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	18d1      	adds	r1, r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f000 f8d5 	bl	8003ab0 <prvInsertTimerInActiveList>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2300      	movs	r3, #0
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	2100      	movs	r1, #0
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff88 	bl	800382c <xTimerGenericCommand>
 800391c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d114      	bne.n	800394e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60fb      	str	r3, [r7, #12]
}
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	4798      	blx	r3
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000464 	.word	0x20000464

08003964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f859 	bl	8003a28 <prvGetNextExpireTime>
 8003976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4619      	mov	r1, r3
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f805 	bl	800398c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003982:	f000 f8d7 	bl	8003b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003986:	bf00      	nop
 8003988:	e7f0      	b.n	800396c <prvTimerTask+0x8>
	...

0800398c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003996:	f7ff fa37 	bl	8002e08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f866 	bl	8003a70 <prvSampleTimeNow>
 80039a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d130      	bne.n	8003a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <prvProcessTimerOrBlockTask+0x3c>
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d806      	bhi.n	80039c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80039ba:	f7ff fa33 	bl	8002e24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ff81 	bl	80038c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80039c6:	e024      	b.n	8003a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039ce:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <prvProcessTimerOrBlockTask+0x90>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <prvProcessTimerOrBlockTask+0x50>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <prvProcessTimerOrBlockTask+0x52>
 80039dc:	2300      	movs	r3, #0
 80039de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a20 <prvProcessTimerOrBlockTask+0x94>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fe ff7d 	bl	80028ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80039f2:	f7ff fa17 	bl	8002e24 <xTaskResumeAll>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80039fc:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <prvProcessTimerOrBlockTask+0x98>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
}
 8003a0c:	e001      	b.n	8003a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003a0e:	f7ff fa09 	bl	8002e24 <xTaskResumeAll>
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000468 	.word	0x20000468
 8003a20:	2000046c 	.word	0x2000046c
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a30:	4b0e      	ldr	r3, [pc, #56]	@ (8003a6c <prvGetNextExpireTime+0x44>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <prvGetNextExpireTime+0x16>
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	e000      	b.n	8003a40 <prvGetNextExpireTime+0x18>
 8003a3e:	2200      	movs	r2, #0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a4c:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <prvGetNextExpireTime+0x44>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e001      	b.n	8003a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000464 	.word	0x20000464

08003a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003a78:	f7ff fa72 	bl	8002f60 <xTaskGetTickCount>
 8003a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <prvSampleTimeNow+0x3c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d205      	bcs.n	8003a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a88:	f000 f91e 	bl	8003cc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <prvSampleTimeNow+0x3c>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000474 	.word	0x20000474

08003ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d812      	bhi.n	8003afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e01b      	b.n	8003b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <prvInsertTimerInActiveList+0x7c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7fe fa1a 	bl	8001f2e <vListInsert>
 8003afa:	e012      	b.n	8003b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d206      	bcs.n	8003b12 <prvInsertTimerInActiveList+0x62>
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e007      	b.n	8003b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b12:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <prvInsertTimerInActiveList+0x80>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7fe fa06 	bl	8001f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003b22:	697b      	ldr	r3, [r7, #20]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000468 	.word	0x20000468
 8003b30:	20000464 	.word	0x20000464

08003b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	@ 0x30
 8003b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b3a:	e0b2      	b.n	8003ca2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f2c0 80af 	blt.w	8003ca2 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fa23 	bl	8001fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff87 	bl	8003a70 <prvSampleTimeNow>
 8003b62:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b09      	cmp	r3, #9
 8003b68:	f200 8098 	bhi.w	8003c9c <prvProcessReceivedCommands+0x168>
 8003b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <prvProcessReceivedCommands+0x40>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b9d 	.word	0x08003b9d
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003b9d 	.word	0x08003b9d
 8003b80:	08003c13 	.word	0x08003c13
 8003b84:	08003c27 	.word	0x08003c27
 8003b88:	08003c73 	.word	0x08003c73
 8003b8c:	08003b9d 	.word	0x08003b9d
 8003b90:	08003b9d 	.word	0x08003b9d
 8003b94:	08003c13 	.word	0x08003c13
 8003b98:	08003c27 	.word	0x08003c27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	18d1      	adds	r1, r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bbc:	f7ff ff78 	bl	8003ab0 <prvInsertTimerInActiveList>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d06c      	beq.n	8003ca0 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d061      	beq.n	8003ca0 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	441a      	add	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2300      	movs	r3, #0
 8003bea:	2100      	movs	r1, #0
 8003bec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bee:	f7ff fe1d 	bl	800382c <xTimerGenericCommand>
 8003bf2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d152      	bne.n	8003ca0 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	61bb      	str	r3, [r7, #24]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003c24:	e03d      	b.n	8003ca2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10b      	bne.n	8003c5e <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	617b      	str	r3, [r7, #20]
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	e7fd      	b.n	8003c5a <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	18d1      	adds	r1, r2, r3
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	6a3a      	ldr	r2, [r7, #32]
 8003c6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c6c:	f7ff ff20 	bl	8003ab0 <prvInsertTimerInActiveList>
					break;
 8003c70:	e017      	b.n	8003ca2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8003c80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003c82:	f000 fbe1 	bl	8004448 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c86:	e00c      	b.n	8003ca2 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c8e:	f023 0301 	bic.w	r3, r3, #1
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8003c9a:	e002      	b.n	8003ca2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8003c9c:	bf00      	nop
 8003c9e:	e000      	b.n	8003ca2 <prvProcessReceivedCommands+0x16e>
					break;
 8003ca0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ca2:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <prvProcessReceivedCommands+0x190>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f107 0108 	add.w	r1, r7, #8
 8003caa:	2200      	movs	r2, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe fc01 	bl	80024b4 <xQueueReceive>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f af41 	bne.w	8003b3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3728      	adds	r7, #40	@ 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000046c 	.word	0x2000046c

08003cc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cce:	e049      	b.n	8003d64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d8c <prvSwitchTimerLists+0xc4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cda:	4b2c      	ldr	r3, [pc, #176]	@ (8003d8c <prvSwitchTimerLists+0xc4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe f959 	bl	8001fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d02f      	beq.n	8003d64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d90e      	bls.n	8003d34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d22:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <prvSwitchTimerLists+0xc4>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe f8fe 	bl	8001f2e <vListInsert>
 8003d32:	e017      	b.n	8003d64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d34:	2300      	movs	r3, #0
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff fd74 	bl	800382c <xTimerGenericCommand>
 8003d44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	603b      	str	r3, [r7, #0]
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d64:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <prvSwitchTimerLists+0xc4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1b0      	bne.n	8003cd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003d6e:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <prvSwitchTimerLists+0xc4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <prvSwitchTimerLists+0xc8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a04      	ldr	r2, [pc, #16]	@ (8003d8c <prvSwitchTimerLists+0xc4>)
 8003d7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003d7c:	4a04      	ldr	r2, [pc, #16]	@ (8003d90 <prvSwitchTimerLists+0xc8>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6013      	str	r3, [r2, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000464 	.word	0x20000464
 8003d90:	20000468 	.word	0x20000468

08003d94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d98:	f000 f966 	bl	8004068 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d9c:	4b12      	ldr	r3, [pc, #72]	@ (8003de8 <prvCheckForValidListAndQueue+0x54>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11d      	bne.n	8003de0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003da4:	4811      	ldr	r0, [pc, #68]	@ (8003dec <prvCheckForValidListAndQueue+0x58>)
 8003da6:	f7fe f871 	bl	8001e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003daa:	4811      	ldr	r0, [pc, #68]	@ (8003df0 <prvCheckForValidListAndQueue+0x5c>)
 8003dac:	f7fe f86e 	bl	8001e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003db0:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <prvCheckForValidListAndQueue+0x60>)
 8003db2:	4a0e      	ldr	r2, [pc, #56]	@ (8003dec <prvCheckForValidListAndQueue+0x58>)
 8003db4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <prvCheckForValidListAndQueue+0x64>)
 8003db8:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <prvCheckForValidListAndQueue+0x5c>)
 8003dba:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	210c      	movs	r1, #12
 8003dc0:	200a      	movs	r0, #10
 8003dc2:	f7fe f981 	bl	80020c8 <xQueueGenericCreate>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4a07      	ldr	r2, [pc, #28]	@ (8003de8 <prvCheckForValidListAndQueue+0x54>)
 8003dca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <prvCheckForValidListAndQueue+0x54>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003dd4:	4b04      	ldr	r3, [pc, #16]	@ (8003de8 <prvCheckForValidListAndQueue+0x54>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4908      	ldr	r1, [pc, #32]	@ (8003dfc <prvCheckForValidListAndQueue+0x68>)
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fd5c 	bl	8002898 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003de0:	f000 f974 	bl	80040cc <vPortExitCritical>
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	2000046c 	.word	0x2000046c
 8003dec:	2000043c 	.word	0x2000043c
 8003df0:	20000450 	.word	0x20000450
 8003df4:	20000464 	.word	0x20000464
 8003df8:	20000468 	.word	0x20000468
 8003dfc:	080048bc 	.word	0x080048bc

08003e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3b04      	subs	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e30:	4a0c      	ldr	r2, [pc, #48]	@ (8003e64 <pxPortInitialiseStack+0x64>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b14      	subs	r3, #20
 8003e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b04      	subs	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f06f 0202 	mvn.w	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3b20      	subs	r3, #32
 8003e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e56:	68fb      	ldr	r3, [r7, #12]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	08003e69 	.word	0x08003e69

08003e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e72:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <prvTaskExitError+0x58>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e7a:	d00b      	beq.n	8003e94 <prvTaskExitError+0x2c>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <prvTaskExitError+0x28>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60bb      	str	r3, [r7, #8]
}
 8003ea6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ea8:	bf00      	nop
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0fc      	beq.n	8003eaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000018 	.word	0x20000018
	...

08003ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ed0:	4b07      	ldr	r3, [pc, #28]	@ (8003ef0 <pxCurrentTCBConst2>)
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	6808      	ldr	r0, [r1, #0]
 8003ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eda:	f380 8809 	msr	PSP, r0
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8811 	msr	BASEPRI, r0
 8003eea:	4770      	bx	lr
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst2>:
 8003ef0:	2000011c 	.word	0x2000011c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop

08003ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ef8:	4808      	ldr	r0, [pc, #32]	@ (8003f1c <prvPortStartFirstTask+0x24>)
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	6800      	ldr	r0, [r0, #0]
 8003efe:	f380 8808 	msr	MSP, r0
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	f380 8814 	msr	CONTROL, r0
 8003f0a:	b662      	cpsie	i
 8003f0c:	b661      	cpsie	f
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	df00      	svc	0
 8003f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f1a:	bf00      	nop
 8003f1c:	e000ed08 	.word	0xe000ed08

08003f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f26:	4b47      	ldr	r3, [pc, #284]	@ (8004044 <xPortStartScheduler+0x124>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a47      	ldr	r2, [pc, #284]	@ (8004048 <xPortStartScheduler+0x128>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10b      	bne.n	8003f48 <xPortStartScheduler+0x28>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	60fb      	str	r3, [r7, #12]
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f48:	4b3e      	ldr	r3, [pc, #248]	@ (8004044 <xPortStartScheduler+0x124>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800404c <xPortStartScheduler+0x12c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10b      	bne.n	8003f6a <xPortStartScheduler+0x4a>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	613b      	str	r3, [r7, #16]
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	e7fd      	b.n	8003f66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f6a:	4b39      	ldr	r3, [pc, #228]	@ (8004050 <xPortStartScheduler+0x130>)
 8003f6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	22ff      	movs	r2, #255	@ 0xff
 8003f7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <xPortStartScheduler+0x134>)
 8003f90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f92:	4b31      	ldr	r3, [pc, #196]	@ (8004058 <xPortStartScheduler+0x138>)
 8003f94:	2207      	movs	r2, #7
 8003f96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f98:	e009      	b.n	8003fae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004058 <xPortStartScheduler+0x138>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8004058 <xPortStartScheduler+0x138>)
 8003fa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb6:	2b80      	cmp	r3, #128	@ 0x80
 8003fb8:	d0ef      	beq.n	8003f9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fba:	4b27      	ldr	r3, [pc, #156]	@ (8004058 <xPortStartScheduler+0x138>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1c3 0307 	rsb	r3, r3, #7
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d00b      	beq.n	8003fde <xPortStartScheduler+0xbe>
	__asm volatile
 8003fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	60bb      	str	r3, [r7, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	bf00      	nop
 8003fdc:	e7fd      	b.n	8003fda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fde:	4b1e      	ldr	r3, [pc, #120]	@ (8004058 <xPortStartScheduler+0x138>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <xPortStartScheduler+0x138>)
 8003fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8004058 <xPortStartScheduler+0x138>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ff0:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <xPortStartScheduler+0x138>)
 8003ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ffc:	4b17      	ldr	r3, [pc, #92]	@ (800405c <xPortStartScheduler+0x13c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	@ (800405c <xPortStartScheduler+0x13c>)
 8004002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004008:	4b14      	ldr	r3, [pc, #80]	@ (800405c <xPortStartScheduler+0x13c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a13      	ldr	r2, [pc, #76]	@ (800405c <xPortStartScheduler+0x13c>)
 800400e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004014:	f000 f8da 	bl	80041cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <xPortStartScheduler+0x140>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800401e:	f000 f8f9 	bl	8004214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004022:	4b10      	ldr	r3, [pc, #64]	@ (8004064 <xPortStartScheduler+0x144>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a0f      	ldr	r2, [pc, #60]	@ (8004064 <xPortStartScheduler+0x144>)
 8004028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800402c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800402e:	f7ff ff63 	bl	8003ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004032:	f7ff f85f 	bl	80030f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004036:	f7ff ff17 	bl	8003e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	e000ed00 	.word	0xe000ed00
 8004048:	410fc271 	.word	0x410fc271
 800404c:	410fc270 	.word	0x410fc270
 8004050:	e000e400 	.word	0xe000e400
 8004054:	20000478 	.word	0x20000478
 8004058:	2000047c 	.word	0x2000047c
 800405c:	e000ed20 	.word	0xe000ed20
 8004060:	20000018 	.word	0x20000018
 8004064:	e000ef34 	.word	0xe000ef34

08004068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	607b      	str	r3, [r7, #4]
}
 8004080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <vPortEnterCritical+0x5c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	4a0e      	ldr	r2, [pc, #56]	@ (80040c4 <vPortEnterCritical+0x5c>)
 800408a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800408c:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <vPortEnterCritical+0x5c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d110      	bne.n	80040b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004094:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <vPortEnterCritical+0x60>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00b      	beq.n	80040b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	603b      	str	r3, [r7, #0]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <vPortEnterCritical+0x4a>
	}
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000018 	.word	0x20000018
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80040d2:	4b12      	ldr	r3, [pc, #72]	@ (800411c <vPortExitCritical+0x50>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <vPortExitCritical+0x26>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	607b      	str	r3, [r7, #4]
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	e7fd      	b.n	80040ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040f2:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <vPortExitCritical+0x50>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	4a08      	ldr	r2, [pc, #32]	@ (800411c <vPortExitCritical+0x50>)
 80040fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040fc:	4b07      	ldr	r3, [pc, #28]	@ (800411c <vPortExitCritical+0x50>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <vPortExitCritical+0x44>
 8004104:	2300      	movs	r3, #0
 8004106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f383 8811 	msr	BASEPRI, r3
}
 800410e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000018 	.word	0x20000018

08004120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004120:	f3ef 8009 	mrs	r0, PSP
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	4b15      	ldr	r3, [pc, #84]	@ (8004180 <pxCurrentTCBConst>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	f01e 0f10 	tst.w	lr, #16
 8004130:	bf08      	it	eq
 8004132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413a:	6010      	str	r0, [r2, #0]
 800413c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004144:	f380 8811 	msr	BASEPRI, r0
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f7fe ffd0 	bl	80030f4 <vTaskSwitchContext>
 8004154:	f04f 0000 	mov.w	r0, #0
 8004158:	f380 8811 	msr	BASEPRI, r0
 800415c:	bc09      	pop	{r0, r3}
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	6808      	ldr	r0, [r1, #0]
 8004162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004166:	f01e 0f10 	tst.w	lr, #16
 800416a:	bf08      	it	eq
 800416c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004170:	f380 8809 	msr	PSP, r0
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst>:
 8004180:	2000011c 	.word	0x2000011c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
}
 80041a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041a2:	f7fe feed 	bl	8002f80 <xTaskIncrementTick>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041ac:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <SysTick_Handler+0x40>)
 80041ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	2300      	movs	r3, #0
 80041b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f383 8811 	msr	BASEPRI, r3
}
 80041be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <vPortSetupTimerInterrupt+0x34>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <vPortSetupTimerInterrupt+0x38>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004208 <vPortSetupTimerInterrupt+0x3c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0a      	ldr	r2, [pc, #40]	@ (800420c <vPortSetupTimerInterrupt+0x40>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	099b      	lsrs	r3, r3, #6
 80041e8:	4a09      	ldr	r2, [pc, #36]	@ (8004210 <vPortSetupTimerInterrupt+0x44>)
 80041ea:	3b01      	subs	r3, #1
 80041ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041ee:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <vPortSetupTimerInterrupt+0x34>)
 80041f0:	2207      	movs	r2, #7
 80041f2:	601a      	str	r2, [r3, #0]
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000e010 	.word	0xe000e010
 8004204:	e000e018 	.word	0xe000e018
 8004208:	2000000c 	.word	0x2000000c
 800420c:	10624dd3 	.word	0x10624dd3
 8004210:	e000e014 	.word	0xe000e014

08004214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004224 <vPortEnableVFP+0x10>
 8004218:	6801      	ldr	r1, [r0, #0]
 800421a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800421e:	6001      	str	r1, [r0, #0]
 8004220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004222:	bf00      	nop
 8004224:	e000ed88 	.word	0xe000ed88

08004228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800422e:	f3ef 8305 	mrs	r3, IPSR
 8004232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	d915      	bls.n	8004266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800423a:	4a18      	ldr	r2, [pc, #96]	@ (800429c <vPortValidateInterruptPriority+0x74>)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004244:	4b16      	ldr	r3, [pc, #88]	@ (80042a0 <vPortValidateInterruptPriority+0x78>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	7afa      	ldrb	r2, [r7, #11]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20b      	bcs.n	8004266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	607b      	str	r3, [r7, #4]
}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	e7fd      	b.n	8004262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004266:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <vPortValidateInterruptPriority+0x7c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800426e:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <vPortValidateInterruptPriority+0x80>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d90b      	bls.n	800428e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	603b      	str	r3, [r7, #0]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <vPortValidateInterruptPriority+0x62>
	}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000e3f0 	.word	0xe000e3f0
 80042a0:	20000478 	.word	0x20000478
 80042a4:	e000ed0c 	.word	0xe000ed0c
 80042a8:	2000047c 	.word	0x2000047c

080042ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80042b8:	f7fe fda6 	bl	8002e08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80042bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004430 <pvPortMalloc+0x184>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80042c4:	f000 f924 	bl	8004510 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80042c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004434 <pvPortMalloc+0x188>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 8095 	bne.w	8004400 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01e      	beq.n	800431a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80042dc:	2208      	movs	r2, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d015      	beq.n	800431a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f023 0307 	bic.w	r3, r3, #7
 80042f4:	3308      	adds	r3, #8
 80042f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <pvPortMalloc+0x6e>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	617b      	str	r3, [r7, #20]
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	e7fd      	b.n	8004316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d06f      	beq.n	8004400 <pvPortMalloc+0x154>
 8004320:	4b45      	ldr	r3, [pc, #276]	@ (8004438 <pvPortMalloc+0x18c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	d86a      	bhi.n	8004400 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800432a:	4b44      	ldr	r3, [pc, #272]	@ (800443c <pvPortMalloc+0x190>)
 800432c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800432e:	4b43      	ldr	r3, [pc, #268]	@ (800443c <pvPortMalloc+0x190>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004334:	e004      	b.n	8004340 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d903      	bls.n	8004352 <pvPortMalloc+0xa6>
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f1      	bne.n	8004336 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004352:	4b37      	ldr	r3, [pc, #220]	@ (8004430 <pvPortMalloc+0x184>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004358:	429a      	cmp	r2, r3
 800435a:	d051      	beq.n	8004400 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2208      	movs	r2, #8
 8004362:	4413      	add	r3, r2
 8004364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	2308      	movs	r3, #8
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	d920      	bls.n	80043c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800437e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <pvPortMalloc+0xfc>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80043ba:	69b8      	ldr	r0, [r7, #24]
 80043bc:	f000 f90a 	bl	80045d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <pvPortMalloc+0x18c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004438 <pvPortMalloc+0x18c>)
 80043cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <pvPortMalloc+0x18c>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <pvPortMalloc+0x194>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d203      	bcs.n	80043e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043da:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <pvPortMalloc+0x18c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a18      	ldr	r2, [pc, #96]	@ (8004440 <pvPortMalloc+0x194>)
 80043e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80043e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4b13      	ldr	r3, [pc, #76]	@ (8004434 <pvPortMalloc+0x188>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80043f6:	4b13      	ldr	r3, [pc, #76]	@ (8004444 <pvPortMalloc+0x198>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3301      	adds	r3, #1
 80043fc:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <pvPortMalloc+0x198>)
 80043fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004400:	f7fe fd10 	bl	8002e24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <pvPortMalloc+0x17a>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60fb      	str	r3, [r7, #12]
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	e7fd      	b.n	8004422 <pvPortMalloc+0x176>
	return pvReturn;
 8004426:	69fb      	ldr	r3, [r7, #28]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	@ 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200052a8 	.word	0x200052a8
 8004434:	200052bc 	.word	0x200052bc
 8004438:	200052ac 	.word	0x200052ac
 800443c:	200052a0 	.word	0x200052a0
 8004440:	200052b0 	.word	0x200052b0
 8004444:	200052b4 	.word	0x200052b4

08004448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d04f      	beq.n	80044fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800445a:	2308      	movs	r3, #8
 800445c:	425b      	negs	r3, r3
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4413      	add	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4b25      	ldr	r3, [pc, #148]	@ (8004504 <vPortFree+0xbc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4013      	ands	r3, r2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <vPortFree+0x46>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00b      	beq.n	80044ae <vPortFree+0x66>
	__asm volatile
 8004496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60bb      	str	r3, [r7, #8]
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	e7fd      	b.n	80044aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4b14      	ldr	r3, [pc, #80]	@ (8004504 <vPortFree+0xbc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01e      	beq.n	80044fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11a      	bne.n	80044fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <vPortFree+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	401a      	ands	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80044d4:	f7fe fc98 	bl	8002e08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004508 <vPortFree+0xc0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4413      	add	r3, r2
 80044e2:	4a09      	ldr	r2, [pc, #36]	@ (8004508 <vPortFree+0xc0>)
 80044e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044e6:	6938      	ldr	r0, [r7, #16]
 80044e8:	f000 f874 	bl	80045d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80044ec:	4b07      	ldr	r3, [pc, #28]	@ (800450c <vPortFree+0xc4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3301      	adds	r3, #1
 80044f2:	4a06      	ldr	r2, [pc, #24]	@ (800450c <vPortFree+0xc4>)
 80044f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80044f6:	f7fe fc95 	bl	8002e24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200052bc 	.word	0x200052bc
 8004508:	200052ac 	.word	0x200052ac
 800450c:	200052b8 	.word	0x200052b8

08004510 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004516:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800451a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800451c:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <prvHeapInit+0xac>)
 800451e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00c      	beq.n	8004544 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3307      	adds	r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 0307 	bic.w	r3, r3, #7
 8004536:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	4a1f      	ldr	r2, [pc, #124]	@ (80045bc <prvHeapInit+0xac>)
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004548:	4a1d      	ldr	r2, [pc, #116]	@ (80045c0 <prvHeapInit+0xb0>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800454e:	4b1c      	ldr	r3, [pc, #112]	@ (80045c0 <prvHeapInit+0xb0>)
 8004550:	2200      	movs	r2, #0
 8004552:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	4413      	add	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800455c:	2208      	movs	r2, #8
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 0307 	bic.w	r3, r3, #7
 800456a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <prvHeapInit+0xb4>)
 8004570:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004572:	4b14      	ldr	r3, [pc, #80]	@ (80045c4 <prvHeapInit+0xb4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2200      	movs	r2, #0
 8004578:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800457a:	4b12      	ldr	r3, [pc, #72]	@ (80045c4 <prvHeapInit+0xb4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004590:	4b0c      	ldr	r3, [pc, #48]	@ (80045c4 <prvHeapInit+0xb4>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4a0a      	ldr	r2, [pc, #40]	@ (80045c8 <prvHeapInit+0xb8>)
 800459e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a09      	ldr	r2, [pc, #36]	@ (80045cc <prvHeapInit+0xbc>)
 80045a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <prvHeapInit+0xc0>)
 80045aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20000480 	.word	0x20000480
 80045c0:	200052a0 	.word	0x200052a0
 80045c4:	200052a8 	.word	0x200052a8
 80045c8:	200052b0 	.word	0x200052b0
 80045cc:	200052ac 	.word	0x200052ac
 80045d0:	200052bc 	.word	0x200052bc

080045d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80045dc:	4b28      	ldr	r3, [pc, #160]	@ (8004680 <prvInsertBlockIntoFreeList+0xac>)
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e002      	b.n	80045e8 <prvInsertBlockIntoFreeList+0x14>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d8f7      	bhi.n	80045e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d108      	bne.n	8004616 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	441a      	add	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	441a      	add	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d118      	bne.n	800465c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b15      	ldr	r3, [pc, #84]	@ (8004684 <prvInsertBlockIntoFreeList+0xb0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d00d      	beq.n	8004652 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e008      	b.n	8004664 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004652:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <prvInsertBlockIntoFreeList+0xb0>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e003      	b.n	8004664 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d002      	beq.n	8004672 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200052a0 	.word	0x200052a0
 8004684:	200052a8 	.word	0x200052a8

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <_reclaim_reent>:
 8004698:	4b2d      	ldr	r3, [pc, #180]	@ (8004750 <_reclaim_reent+0xb8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4283      	cmp	r3, r0
 800469e:	b570      	push	{r4, r5, r6, lr}
 80046a0:	4604      	mov	r4, r0
 80046a2:	d053      	beq.n	800474c <_reclaim_reent+0xb4>
 80046a4:	69c3      	ldr	r3, [r0, #28]
 80046a6:	b31b      	cbz	r3, 80046f0 <_reclaim_reent+0x58>
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	b163      	cbz	r3, 80046c6 <_reclaim_reent+0x2e>
 80046ac:	2500      	movs	r5, #0
 80046ae:	69e3      	ldr	r3, [r4, #28]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	5959      	ldr	r1, [r3, r5]
 80046b4:	b9b1      	cbnz	r1, 80046e4 <_reclaim_reent+0x4c>
 80046b6:	3504      	adds	r5, #4
 80046b8:	2d80      	cmp	r5, #128	@ 0x80
 80046ba:	d1f8      	bne.n	80046ae <_reclaim_reent+0x16>
 80046bc:	69e3      	ldr	r3, [r4, #28]
 80046be:	4620      	mov	r0, r4
 80046c0:	68d9      	ldr	r1, [r3, #12]
 80046c2:	f000 f87b 	bl	80047bc <_free_r>
 80046c6:	69e3      	ldr	r3, [r4, #28]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	b111      	cbz	r1, 80046d2 <_reclaim_reent+0x3a>
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 f875 	bl	80047bc <_free_r>
 80046d2:	69e3      	ldr	r3, [r4, #28]
 80046d4:	689d      	ldr	r5, [r3, #8]
 80046d6:	b15d      	cbz	r5, 80046f0 <_reclaim_reent+0x58>
 80046d8:	4629      	mov	r1, r5
 80046da:	4620      	mov	r0, r4
 80046dc:	682d      	ldr	r5, [r5, #0]
 80046de:	f000 f86d 	bl	80047bc <_free_r>
 80046e2:	e7f8      	b.n	80046d6 <_reclaim_reent+0x3e>
 80046e4:	680e      	ldr	r6, [r1, #0]
 80046e6:	4620      	mov	r0, r4
 80046e8:	f000 f868 	bl	80047bc <_free_r>
 80046ec:	4631      	mov	r1, r6
 80046ee:	e7e1      	b.n	80046b4 <_reclaim_reent+0x1c>
 80046f0:	6961      	ldr	r1, [r4, #20]
 80046f2:	b111      	cbz	r1, 80046fa <_reclaim_reent+0x62>
 80046f4:	4620      	mov	r0, r4
 80046f6:	f000 f861 	bl	80047bc <_free_r>
 80046fa:	69e1      	ldr	r1, [r4, #28]
 80046fc:	b111      	cbz	r1, 8004704 <_reclaim_reent+0x6c>
 80046fe:	4620      	mov	r0, r4
 8004700:	f000 f85c 	bl	80047bc <_free_r>
 8004704:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004706:	b111      	cbz	r1, 800470e <_reclaim_reent+0x76>
 8004708:	4620      	mov	r0, r4
 800470a:	f000 f857 	bl	80047bc <_free_r>
 800470e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004710:	b111      	cbz	r1, 8004718 <_reclaim_reent+0x80>
 8004712:	4620      	mov	r0, r4
 8004714:	f000 f852 	bl	80047bc <_free_r>
 8004718:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800471a:	b111      	cbz	r1, 8004722 <_reclaim_reent+0x8a>
 800471c:	4620      	mov	r0, r4
 800471e:	f000 f84d 	bl	80047bc <_free_r>
 8004722:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004724:	b111      	cbz	r1, 800472c <_reclaim_reent+0x94>
 8004726:	4620      	mov	r0, r4
 8004728:	f000 f848 	bl	80047bc <_free_r>
 800472c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800472e:	b111      	cbz	r1, 8004736 <_reclaim_reent+0x9e>
 8004730:	4620      	mov	r0, r4
 8004732:	f000 f843 	bl	80047bc <_free_r>
 8004736:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004738:	b111      	cbz	r1, 8004740 <_reclaim_reent+0xa8>
 800473a:	4620      	mov	r0, r4
 800473c:	f000 f83e 	bl	80047bc <_free_r>
 8004740:	6a23      	ldr	r3, [r4, #32]
 8004742:	b11b      	cbz	r3, 800474c <_reclaim_reent+0xb4>
 8004744:	4620      	mov	r0, r4
 8004746:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800474a:	4718      	bx	r3
 800474c:	bd70      	pop	{r4, r5, r6, pc}
 800474e:	bf00      	nop
 8004750:	2000001c 	.word	0x2000001c

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4d0d      	ldr	r5, [pc, #52]	@ (800478c <__libc_init_array+0x38>)
 8004758:	4c0d      	ldr	r4, [pc, #52]	@ (8004790 <__libc_init_array+0x3c>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	2600      	movs	r6, #0
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	4d0b      	ldr	r5, [pc, #44]	@ (8004794 <__libc_init_array+0x40>)
 8004766:	4c0c      	ldr	r4, [pc, #48]	@ (8004798 <__libc_init_array+0x44>)
 8004768:	f000 f87e 	bl	8004868 <_init>
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	2600      	movs	r6, #0
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	080048dc 	.word	0x080048dc
 8004790:	080048dc 	.word	0x080048dc
 8004794:	080048dc 	.word	0x080048dc
 8004798:	080048e0 	.word	0x080048e0

0800479c <__retarget_lock_acquire_recursive>:
 800479c:	4770      	bx	lr

0800479e <__retarget_lock_release_recursive>:
 800479e:	4770      	bx	lr

080047a0 <memcpy>:
 80047a0:	440a      	add	r2, r1
 80047a2:	4291      	cmp	r1, r2
 80047a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80047a8:	d100      	bne.n	80047ac <memcpy+0xc>
 80047aa:	4770      	bx	lr
 80047ac:	b510      	push	{r4, lr}
 80047ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047b6:	4291      	cmp	r1, r2
 80047b8:	d1f9      	bne.n	80047ae <memcpy+0xe>
 80047ba:	bd10      	pop	{r4, pc}

080047bc <_free_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4605      	mov	r5, r0
 80047c0:	2900      	cmp	r1, #0
 80047c2:	d041      	beq.n	8004848 <_free_r+0x8c>
 80047c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047c8:	1f0c      	subs	r4, r1, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bfb8      	it	lt
 80047ce:	18e4      	addlt	r4, r4, r3
 80047d0:	f000 f83e 	bl	8004850 <__malloc_lock>
 80047d4:	4a1d      	ldr	r2, [pc, #116]	@ (800484c <_free_r+0x90>)
 80047d6:	6813      	ldr	r3, [r2, #0]
 80047d8:	b933      	cbnz	r3, 80047e8 <_free_r+0x2c>
 80047da:	6063      	str	r3, [r4, #4]
 80047dc:	6014      	str	r4, [r2, #0]
 80047de:	4628      	mov	r0, r5
 80047e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047e4:	f000 b83a 	b.w	800485c <__malloc_unlock>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d908      	bls.n	80047fe <_free_r+0x42>
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	1821      	adds	r1, r4, r0
 80047f0:	428b      	cmp	r3, r1
 80047f2:	bf01      	itttt	eq
 80047f4:	6819      	ldreq	r1, [r3, #0]
 80047f6:	685b      	ldreq	r3, [r3, #4]
 80047f8:	1809      	addeq	r1, r1, r0
 80047fa:	6021      	streq	r1, [r4, #0]
 80047fc:	e7ed      	b.n	80047da <_free_r+0x1e>
 80047fe:	461a      	mov	r2, r3
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	b10b      	cbz	r3, 8004808 <_free_r+0x4c>
 8004804:	42a3      	cmp	r3, r4
 8004806:	d9fa      	bls.n	80047fe <_free_r+0x42>
 8004808:	6811      	ldr	r1, [r2, #0]
 800480a:	1850      	adds	r0, r2, r1
 800480c:	42a0      	cmp	r0, r4
 800480e:	d10b      	bne.n	8004828 <_free_r+0x6c>
 8004810:	6820      	ldr	r0, [r4, #0]
 8004812:	4401      	add	r1, r0
 8004814:	1850      	adds	r0, r2, r1
 8004816:	4283      	cmp	r3, r0
 8004818:	6011      	str	r1, [r2, #0]
 800481a:	d1e0      	bne.n	80047de <_free_r+0x22>
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	6053      	str	r3, [r2, #4]
 8004822:	4408      	add	r0, r1
 8004824:	6010      	str	r0, [r2, #0]
 8004826:	e7da      	b.n	80047de <_free_r+0x22>
 8004828:	d902      	bls.n	8004830 <_free_r+0x74>
 800482a:	230c      	movs	r3, #12
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	e7d6      	b.n	80047de <_free_r+0x22>
 8004830:	6820      	ldr	r0, [r4, #0]
 8004832:	1821      	adds	r1, r4, r0
 8004834:	428b      	cmp	r3, r1
 8004836:	bf04      	itt	eq
 8004838:	6819      	ldreq	r1, [r3, #0]
 800483a:	685b      	ldreq	r3, [r3, #4]
 800483c:	6063      	str	r3, [r4, #4]
 800483e:	bf04      	itt	eq
 8004840:	1809      	addeq	r1, r1, r0
 8004842:	6021      	streq	r1, [r4, #0]
 8004844:	6054      	str	r4, [r2, #4]
 8004846:	e7ca      	b.n	80047de <_free_r+0x22>
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	bf00      	nop
 800484c:	200053fc 	.word	0x200053fc

08004850 <__malloc_lock>:
 8004850:	4801      	ldr	r0, [pc, #4]	@ (8004858 <__malloc_lock+0x8>)
 8004852:	f7ff bfa3 	b.w	800479c <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	200053f8 	.word	0x200053f8

0800485c <__malloc_unlock>:
 800485c:	4801      	ldr	r0, [pc, #4]	@ (8004864 <__malloc_unlock+0x8>)
 800485e:	f7ff bf9e 	b.w	800479e <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	200053f8 	.word	0x200053f8

08004868 <_init>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr

08004874 <_fini>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr


aula12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006630  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b0  080068b0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080068b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005428  2000006c  08006924  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005494  08006924  00008494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019998  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392b  00000000  00000000  00021a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00025360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c0  00000000  00000000  00026a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003464  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184bf  00000000  00000000  0002b054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce931  00000000  00000000  00043513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111e44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006308  00000000  00000000  00111e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00118190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080067f8 	.word	0x080067f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080067f8 	.word	0x080067f8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <pisca_led>:
	GPIO_TypeDef *led_port;
} led_t;


void pisca_led(void *param)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t*)param;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	60fb      	str	r3, [r7, #12]

	TickType_t timer;

	while(1)
	{
		timer = xTaskGetTickCount();
 8000568:	f004 fcc4 	bl	8004ef4 <xTaskGetTickCount>
 800056c:	4603      	mov	r3, r0
 800056e:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_TogglePin(led->led_port, led->led_pin);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	689a      	ldr	r2, [r3, #8]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	889b      	ldrh	r3, [r3, #4]
 8000578:	4619      	mov	r1, r3
 800057a:	4610      	mov	r0, r2
 800057c:	f000 fe28 	bl	80011d0 <HAL_GPIO_TogglePin>
//		vTaskDelay(1000);
		vTaskDelayUntil(&timer, led->led_time);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f004 faf8 	bl	8004b80 <vTaskDelayUntil>
		timer = xTaskGetTickCount();
 8000590:	bf00      	nop
 8000592:	e7e9      	b.n	8000568 <pisca_led+0xc>

08000594 <enviaSerial_1>:
	}
}

void enviaSerial_1(void *param)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	char *text = "Oi\n\r";
 800059c:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <enviaSerial_1+0x28>)
 800059e:	60fb      	str	r3, [r7, #12]
	uint32_t len = strlen(text);
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f7ff fe3d 	bl	8000220 <strlen>
 80005a6:	60b8      	str	r0, [r7, #8]
	while(1)
	{
		HAL_UART_Transmit(&hlpuart1, (uint8_t*)text, len, 1000);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b0:	68f9      	ldr	r1, [r7, #12]
 80005b2:	4803      	ldr	r0, [pc, #12]	@ (80005c0 <enviaSerial_1+0x2c>)
 80005b4:	f002 f9a0 	bl	80028f8 <HAL_UART_Transmit>
 80005b8:	e7f6      	b.n	80005a8 <enviaSerial_1+0x14>
 80005ba:	bf00      	nop
 80005bc:	08006810 	.word	0x08006810
 80005c0:	20000088 	.word	0x20000088

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fa90 	bl	8000aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f83b 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8cd 	bl	8000770 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d6:	f000 f881 	bl	80006dc <MX_LPUART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <main+0x68>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	682b      	ldr	r3, [r5, #0]
 80005e6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fbdc 	bl	8003daa <osThreadCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <main+0x6c>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // se não for stack vai ser desalocado ao sair da main (tira a variavel da pilha e vai para data)
  static led_t led_1000 = {1000, LED_Pin, LED_GPIO_Port};
  static led_t led_75 = {75, LED_Pin, LED_GPIO_Port};
  xTaskCreate(pisca_led, "Tarefa led", 256, &led_75, 4, NULL);
 80005f8:	2300      	movs	r3, #0
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2304      	movs	r3, #4
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <main+0x70>)
 8000602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000606:	490c      	ldr	r1, [pc, #48]	@ (8000638 <main+0x74>)
 8000608:	480c      	ldr	r0, [pc, #48]	@ (800063c <main+0x78>)
 800060a:	f004 f96d 	bl	80048e8 <xTaskCreate>

  xTaskCreate(enviaSerial_1, "serial 1", 256, NULL, 5, NULL);
 800060e:	2300      	movs	r3, #0
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	2305      	movs	r3, #5
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800061c:	4908      	ldr	r1, [pc, #32]	@ (8000640 <main+0x7c>)
 800061e:	4809      	ldr	r0, [pc, #36]	@ (8000644 <main+0x80>)
 8000620:	f004 f962 	bl	80048e8 <xTaskCreate>
//  xTaskCreate(enviaSerial_2, "serial 1", 256, NULLL, 5, NULL);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f003 fbba 	bl	8003d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x64>
 800062c:	0800683c 	.word	0x0800683c
 8000630:	2000011c 	.word	0x2000011c
 8000634:	20000000 	.word	0x20000000
 8000638:	08006818 	.word	0x08006818
 800063c:	0800055d 	.word	0x0800055d
 8000640:	08006824 	.word	0x08006824
 8000644:	08000595 	.word	0x08000595

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2238      	movs	r2, #56	@ 0x38
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f005 ffde 	bl	8006618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 fdca 	bl	8001204 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000678:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	2303      	movs	r3, #3
 8000680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000682:	2306      	movs	r3, #6
 8000684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000686:	2355      	movs	r3, #85	@ 0x55
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fe66 	bl	800136c <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006a6:	f000 f8bb 	bl	8000820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2104      	movs	r1, #4
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f964 	bl	8001990 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006ce:	f000 f8a7 	bl	8000820 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	@ 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006e2:	4a22      	ldr	r2, [pc, #136]	@ (800076c <MX_LPUART1_UART_Init+0x90>)
 80006e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800071e:	4812      	ldr	r0, [pc, #72]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000720:	f002 f89a 	bl	8002858 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f879 	bl	8000820 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000732:	f003 fa50 	bl	8003bd6 <HAL_UARTEx_SetTxFifoThreshold>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800073c:	f000 f870 	bl	8000820 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000744:	f003 fa85 	bl	8003c52 <HAL_UARTEx_SetRxFifoThreshold>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800074e:	f000 f867 	bl	8000820 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_LPUART1_UART_Init+0x8c>)
 8000754:	f003 fa06 	bl	8003b64 <HAL_UARTEx_DisableFifoMode>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800075e:	f000 f85f 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000088 	.word	0x20000088
 800076c:	40008000 	.word	0x40008000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000786:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0x78>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <MX_GPIO_Init+0x78>)
 800078c:	f043 0320 	orr.w	r3, r3, #32
 8000790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_GPIO_Init+0x78>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	f003 0320 	and.w	r3, r3, #32
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_GPIO_Init+0x78>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	4a11      	ldr	r2, [pc, #68]	@ (80007e8 <MX_GPIO_Init+0x78>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_GPIO_Init+0x78>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007be:	f000 fcef 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007c2:	2320      	movs	r3, #32
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007dc:	f000 fb5e 	bl	8000e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000

080007ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f003 faff 	bl	8003df8 <osDelay>
 80007fa:	e7fb      	b.n	80007f4 <StartDefaultTask+0x8>

080007fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d101      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800080e:	f000 f987 	bl	8000b20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40014800 	.word	0x40014800

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <Error_Handler+0x8>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_MspInit+0x50>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000836:	4a11      	ldr	r2, [pc, #68]	@ (800087c <HAL_MspInit+0x50>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6613      	str	r3, [r2, #96]	@ 0x60
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_MspInit+0x50>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_MspInit+0x50>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084e:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <HAL_MspInit+0x50>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000854:	6593      	str	r3, [r2, #88]	@ 0x58
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_MspInit+0x50>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	f06f 0001 	mvn.w	r0, #1
 800086a:	f000 fa2f 	bl	8000ccc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800086e:	f000 fd6d 	bl	800134c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09a      	sub	sp, #104	@ 0x68
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2244      	movs	r2, #68	@ 0x44
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f005 feb9 	bl	8006618 <memset>
  if(huart->Instance==LPUART1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a23      	ldr	r2, [pc, #140]	@ (8000938 <HAL_UART_MspInit+0xb8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d13e      	bne.n	800092e <HAL_UART_MspInit+0xae>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008b0:	2320      	movs	r3, #32
 80008b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fab5 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008c8:	f7ff ffaa 	bl	8000820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <HAL_UART_MspInit+0xbc>)
 80008ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008d0:	4a1a      	ldr	r2, [pc, #104]	@ (800093c <HAL_UART_MspInit+0xbc>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <HAL_UART_MspInit+0xbc>)
 80008da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b15      	ldr	r3, [pc, #84]	@ (800093c <HAL_UART_MspInit+0xbc>)
 80008e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e8:	4a14      	ldr	r2, [pc, #80]	@ (800093c <HAL_UART_MspInit+0xbc>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_UART_MspInit+0xbc>)
 80008f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fc:	230c      	movs	r3, #12
 80008fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800090c:	230c      	movs	r3, #12
 800090e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000914:	4619      	mov	r1, r3
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f000 fabf 	bl	8000e9c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	205b      	movs	r0, #91	@ 0x5b
 8000924:	f000 f9d2 	bl	8000ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000928:	205b      	movs	r0, #91	@ 0x5b
 800092a:	f000 f9e9 	bl	8000d00 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800092e:	bf00      	nop
 8000930:	3768      	adds	r7, #104	@ 0x68
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40008000 	.word	0x40008000
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000950:	4b2c      	ldr	r3, [pc, #176]	@ (8000a04 <HAL_InitTick+0xc4>)
 8000952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000954:	4a2b      	ldr	r2, [pc, #172]	@ (8000a04 <HAL_InitTick+0xc4>)
 8000956:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800095a:	6613      	str	r3, [r2, #96]	@ 0x60
 800095c:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <HAL_InitTick+0xc4>)
 800095e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f001 f9e2 	bl	8001d3c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000978:	f001 f9ca 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 800097c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800097e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000980:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <HAL_InitTick+0xc8>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9b      	lsrs	r3, r3, #18
 8000988:	3b01      	subs	r3, #1
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <HAL_InitTick+0xcc>)
 800098e:	4a20      	ldr	r2, [pc, #128]	@ (8000a10 <HAL_InitTick+0xd0>)
 8000990:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000992:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <HAL_InitTick+0xcc>)
 8000994:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000998:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800099a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a0c <HAL_InitTick+0xcc>)
 800099c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <HAL_InitTick+0xcc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <HAL_InitTick+0xcc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80009ac:	4817      	ldr	r0, [pc, #92]	@ (8000a0c <HAL_InitTick+0xcc>)
 80009ae:	f001 fc2d 	bl	800220c <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80009b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d11b      	bne.n	80009f8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80009c0:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <HAL_InitTick+0xcc>)
 80009c2:	f001 fc85 	bl	80022d0 <HAL_TIM_Base_Start_IT>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80009cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d111      	bne.n	80009f8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80009d4:	201a      	movs	r0, #26
 80009d6:	f000 f993 	bl	8000d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d808      	bhi.n	80009f2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	201a      	movs	r0, #26
 80009e6:	f000 f971 	bl	8000ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_InitTick+0xd4>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e002      	b.n	80009f8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3730      	adds	r7, #48	@ 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	20000120 	.word	0x20000120
 8000a10:	40014800 	.word	0x40014800
 8000a14:	20000010 	.word	0x20000010

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000a54:	4802      	ldr	r0, [pc, #8]	@ (8000a60 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000a56:	f001 fca5 	bl	80023a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000120 	.word	0x20000120

08000a64 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <LPUART1_IRQHandler+0x10>)
 8000a6a:	f001 ffd3 	bl	8002a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000088 	.word	0x20000088

08000a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	@ (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f005 fe0b 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fd79 	bl	80005c4 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   r0, =_estack
 8000ad4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ae0:	080068b8 	.word	0x080068b8
  ldr r2, =_sbss
 8000ae4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ae8:	20005494 	.word	0x20005494

08000aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>

08000aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f8dc 	bl	8000cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afe:	200f      	movs	r0, #15
 8000b00:	f7ff ff1e 	bl	8000940 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e001      	b.n	8000b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b10:	f7ff fe8c 	bl	800082c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <HAL_IncTick+0x20>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a03      	ldr	r2, [pc, #12]	@ (8000b3c <HAL_IncTick+0x1c>)
 8000b30:	6013      	str	r3, [r2, #0]
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	2000016c 	.word	0x2000016c
 8000b40:	20000014 	.word	0x20000014

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000016c 	.word	0x2000016c

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	@ (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff4c 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cda:	f7ff ff63 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000cde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68b9      	ldr	r1, [r7, #8]
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff ffb3 	bl	8000c50 <NVIC_EncodePriority>
 8000cea:	4602      	mov	r2, r0
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff82 	bl	8000bfc <__NVIC_SetPriority>
}
 8000cf8:	bf00      	nop
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff56 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d005      	beq.n	8000d40 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2204      	movs	r2, #4
 8000d38:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e037      	b.n	8000db0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 020e 	bic.w	r2, r2, #14
 8000d4e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d5a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000d5e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0201 	bic.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000d8c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00c      	beq.n	8000db0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000da4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000dae:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d00d      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2204      	movs	r2, #4
 8000dea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e047      	b.n	8000e92 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 020e 	bic.w	r2, r2, #14
 8000e10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 0201 	bic.w	r2, r2, #1
 8000e20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f003 021f 	and.w	r2, r3, #31
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fa01 f202 	lsl.w	r2, r1, r2
 8000e44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00c      	beq.n	8000e72 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	4798      	blx	r3
    }
  }
  return status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eaa:	e15a      	b.n	8001162 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 814c 	beq.w	800115c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d130      	bne.n	8000f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f12:	2201      	movs	r2, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	f003 0201 	and.w	r2, r3, #1
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d017      	beq.n	8000f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	6939      	ldr	r1, [r7, #16]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80a6 	beq.w	800115c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	4b5b      	ldr	r3, [pc, #364]	@ (8001180 <HAL_GPIO_Init+0x2e4>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001014:	4a5a      	ldr	r2, [pc, #360]	@ (8001180 <HAL_GPIO_Init+0x2e4>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6613      	str	r3, [r2, #96]	@ 0x60
 800101c:	4b58      	ldr	r3, [pc, #352]	@ (8001180 <HAL_GPIO_Init+0x2e4>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001028:	4a56      	ldr	r2, [pc, #344]	@ (8001184 <HAL_GPIO_Init+0x2e8>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001052:	d01f      	beq.n	8001094 <HAL_GPIO_Init+0x1f8>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4c      	ldr	r2, [pc, #304]	@ (8001188 <HAL_GPIO_Init+0x2ec>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d019      	beq.n	8001090 <HAL_GPIO_Init+0x1f4>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4b      	ldr	r2, [pc, #300]	@ (800118c <HAL_GPIO_Init+0x2f0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x1f0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4a      	ldr	r2, [pc, #296]	@ (8001190 <HAL_GPIO_Init+0x2f4>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1ec>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a49      	ldr	r2, [pc, #292]	@ (8001194 <HAL_GPIO_Init+0x2f8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1e8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a48      	ldr	r2, [pc, #288]	@ (8001198 <HAL_GPIO_Init+0x2fc>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1e4>
 800107c:	2305      	movs	r3, #5
 800107e:	e00a      	b.n	8001096 <HAL_GPIO_Init+0x1fa>
 8001080:	2306      	movs	r3, #6
 8001082:	e008      	b.n	8001096 <HAL_GPIO_Init+0x1fa>
 8001084:	2304      	movs	r3, #4
 8001086:	e006      	b.n	8001096 <HAL_GPIO_Init+0x1fa>
 8001088:	2303      	movs	r3, #3
 800108a:	e004      	b.n	8001096 <HAL_GPIO_Init+0x1fa>
 800108c:	2302      	movs	r3, #2
 800108e:	e002      	b.n	8001096 <HAL_GPIO_Init+0x1fa>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_GPIO_Init+0x1fa>
 8001094:	2300      	movs	r3, #0
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	f002 0203 	and.w	r2, r2, #3
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	4093      	lsls	r3, r2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a6:	4937      	ldr	r1, [pc, #220]	@ (8001184 <HAL_GPIO_Init+0x2e8>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b4:	4b39      	ldr	r3, [pc, #228]	@ (800119c <HAL_GPIO_Init+0x300>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d8:	4a30      	ldr	r2, [pc, #192]	@ (800119c <HAL_GPIO_Init+0x300>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010de:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <HAL_GPIO_Init+0x300>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001102:	4a26      	ldr	r2, [pc, #152]	@ (800119c <HAL_GPIO_Init+0x300>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001108:	4b24      	ldr	r3, [pc, #144]	@ (800119c <HAL_GPIO_Init+0x300>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112c:	4a1b      	ldr	r2, [pc, #108]	@ (800119c <HAL_GPIO_Init+0x300>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001132:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_GPIO_Init+0x300>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001156:	4a11      	ldr	r2, [pc, #68]	@ (800119c <HAL_GPIO_Init+0x300>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	f47f ae9d 	bne.w	8000eac <HAL_GPIO_Init+0x10>
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e2:	887a      	ldrh	r2, [r7, #2]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43d9      	mvns	r1, r3
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	400b      	ands	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d141      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001212:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800121a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121e:	d131      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001220:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001226:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800122c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	4b43      	ldr	r3, [pc, #268]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001238:	4a41      	ldr	r2, [pc, #260]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2232      	movs	r2, #50	@ 0x32
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	4a3f      	ldr	r2, [pc, #252]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001256:	e002      	b.n	800125e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3b01      	subs	r3, #1
 800125c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125e:	4b38      	ldr	r3, [pc, #224]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001266:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126a:	d102      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f2      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001272:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800127e:	d158      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e057      	b.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001284:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800128a:	4a2d      	ldr	r2, [pc, #180]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001294:	e04d      	b.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800129c:	d141      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800129e:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012aa:	d131      	bne.n	8001310 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2232      	movs	r2, #50	@ 0x32
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e2:	e002      	b.n	80012ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012f6:	d102      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f2      	bne.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800130a:	d112      	bne.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e011      	b.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800131c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001320:	e007      	b.n	8001332 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001330:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40007000 	.word	0x40007000
 8001344:	2000000c 	.word	0x2000000c
 8001348:	431bde83 	.word	0x431bde83

0800134c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001356:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135a:	6093      	str	r3, [r2, #8]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000

0800136c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e2fe      	b.n	800197c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d075      	beq.n	8001476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b97      	ldr	r3, [pc, #604]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001394:	4b94      	ldr	r3, [pc, #592]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d102      	bne.n	80013aa <HAL_RCC_OscConfig+0x3e>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d002      	beq.n	80013b0 <HAL_RCC_OscConfig+0x44>
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d10b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b8d      	ldr	r3, [pc, #564]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d05b      	beq.n	8001474 <HAL_RCC_OscConfig+0x108>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d157      	bne.n	8001474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e2d9      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x74>
 80013d2:	4b85      	ldr	r3, [pc, #532]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a84      	ldr	r2, [pc, #528]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x98>
 80013ea:	4b7f      	ldr	r3, [pc, #508]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a7e      	ldr	r2, [pc, #504]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b7c      	ldr	r3, [pc, #496]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7b      	ldr	r2, [pc, #492]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xb0>
 8001404:	4b78      	ldr	r3, [pc, #480]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a77      	ldr	r2, [pc, #476]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b75      	ldr	r3, [pc, #468]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a74      	ldr	r2, [pc, #464]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fb8e 	bl	8000b44 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fb8a 	bl	8000b44 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e29e      	b.n	800197c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xc0>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144c:	f7ff fb7a 	bl	8000b44 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fb76 	bl	8000b44 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	@ 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e28a      	b.n	800197c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001466:	4b60      	ldr	r3, [pc, #384]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0xe8>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d075      	beq.n	800156e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001482:	4b59      	ldr	r3, [pc, #356]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800148c:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0x136>
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d002      	beq.n	80014a8 <HAL_RCC_OscConfig+0x13c>
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d11f      	bne.n	80014e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a8:	4b4f      	ldr	r3, [pc, #316]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x154>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e25d      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b49      	ldr	r3, [pc, #292]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	4946      	ldr	r1, [pc, #280]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014d4:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <HAL_RCC_OscConfig+0x280>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fa31 	bl	8000940 <HAL_InitTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d043      	beq.n	800156c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e249      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d023      	beq.n	8001538 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a3c      	ldr	r2, [pc, #240]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb22 	bl	8000b44 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fb1e 	bl	8000b44 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e232      	b.n	800197c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001516:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	492d      	ldr	r1, [pc, #180]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
 8001536:	e01a      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a2a      	ldr	r2, [pc, #168]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 800153e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fafe 	bl	8000b44 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fafa 	bl	8000b44 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e20e      	b.n	800197c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155e:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1e0>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d041      	beq.n	80015fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01c      	beq.n	80015bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fad7 	bl	8000b44 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fad3 	bl	8000b44 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1e7      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0ef      	beq.n	800159a <HAL_RCC_OscConfig+0x22e>
 80015ba:	e020      	b.n	80015fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80015be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c2:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015cc:	f7ff faba 	bl	8000b44 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d2:	e00d      	b.n	80015f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fab6 	bl	8000b44 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d906      	bls.n	80015f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1ca      	b.n	800197c <HAL_RCC_OscConfig+0x610>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
 80015ec:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1ea      	bne.n	80015d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80a6 	beq.w	8001758 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001610:	4b84      	ldr	r3, [pc, #528]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x2b4>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x2b6>
 8001620:	2300      	movs	r3, #0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	4a7e      	ldr	r2, [pc, #504]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001630:	6593      	str	r3, [r2, #88]	@ 0x58
 8001632:	4b7c      	ldr	r3, [pc, #496]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800163e:	2301      	movs	r3, #1
 8001640:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001642:	4b79      	ldr	r3, [pc, #484]	@ (8001828 <HAL_RCC_OscConfig+0x4bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164a:	2b00      	cmp	r3, #0
 800164c:	d118      	bne.n	8001680 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164e:	4b76      	ldr	r3, [pc, #472]	@ (8001828 <HAL_RCC_OscConfig+0x4bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a75      	ldr	r2, [pc, #468]	@ (8001828 <HAL_RCC_OscConfig+0x4bc>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165a:	f7ff fa73 	bl	8000b44 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001662:	f7ff fa6f 	bl	8000b44 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e183      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001674:	4b6c      	ldr	r3, [pc, #432]	@ (8001828 <HAL_RCC_OscConfig+0x4bc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d108      	bne.n	800169a <HAL_RCC_OscConfig+0x32e>
 8001688:	4b66      	ldr	r3, [pc, #408]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a65      	ldr	r2, [pc, #404]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	e024      	b.n	80016e4 <HAL_RCC_OscConfig+0x378>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	2b05      	cmp	r3, #5
 80016a0:	d110      	bne.n	80016c4 <HAL_RCC_OscConfig+0x358>
 80016a2:	4b60      	ldr	r3, [pc, #384]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a8:	4a5e      	ldr	r2, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c2:	e00f      	b.n	80016e4 <HAL_RCC_OscConfig+0x378>
 80016c4:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ca:	4a56      	ldr	r2, [pc, #344]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	4a52      	ldr	r2, [pc, #328]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d016      	beq.n	800171a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa2a 	bl	8000b44 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff fa26 	bl	8000b44 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e138      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170a:	4b46      	ldr	r3, [pc, #280]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0ed      	beq.n	80016f4 <HAL_RCC_OscConfig+0x388>
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171a:	f7ff fa13 	bl	8000b44 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001722:	f7ff fa0f 	bl	8000b44 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e121      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001738:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ed      	bne.n	8001722 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001746:	7ffb      	ldrb	r3, [r7, #31]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b35      	ldr	r3, [pc, #212]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001750:	4a34      	ldr	r2, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d03c      	beq.n	80017de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800176c:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001772:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff f9e2 	bl	8000b44 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001784:	f7ff f9de 	bl	8000b44 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0f2      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001796:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001798:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ef      	beq.n	8001784 <HAL_RCC_OscConfig+0x418>
 80017a4:	e01b      	b.n	80017de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80017a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9c5 	bl	8000b44 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017be:	f7ff f9c1 	bl	8000b44 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0d5      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80017d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1ef      	bne.n	80017be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80c9 	beq.w	800197a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	f000 8083 	beq.w	80018fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d15e      	bne.n	80018bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_RCC_OscConfig+0x4b8>)
 8001804:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff f99b 	bl	8000b44 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001810:	e00c      	b.n	800182c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001812:	f7ff f997 	bl	8000b44 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d905      	bls.n	800182c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0ab      	b.n	800197c <HAL_RCC_OscConfig+0x610>
 8001824:	40021000 	.word	0x40021000
 8001828:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182c:	4b55      	ldr	r3, [pc, #340]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ec      	bne.n	8001812 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001838:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b52      	ldr	r3, [pc, #328]	@ (8001988 <HAL_RCC_OscConfig+0x61c>)
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6a11      	ldr	r1, [r2, #32]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001848:	3a01      	subs	r2, #1
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	4311      	orrs	r1, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800185a:	0852      	lsrs	r2, r2, #1
 800185c:	3a01      	subs	r2, #1
 800185e:	0552      	lsls	r2, r2, #21
 8001860:	4311      	orrs	r1, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001866:	0852      	lsrs	r2, r2, #1
 8001868:	3a01      	subs	r2, #1
 800186a:	0652      	lsls	r2, r2, #25
 800186c:	4311      	orrs	r1, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001872:	06d2      	lsls	r2, r2, #27
 8001874:	430a      	orrs	r2, r1
 8001876:	4943      	ldr	r1, [pc, #268]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 8001878:	4313      	orrs	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800187c:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a40      	ldr	r2, [pc, #256]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001888:	4b3e      	ldr	r3, [pc, #248]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a3d      	ldr	r2, [pc, #244]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001892:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff f956 	bl	8000b44 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f952 	bl	8000b44 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e066      	b.n	800197c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x530>
 80018ba:	e05e      	b.n	800197a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018bc:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a30      	ldr	r2, [pc, #192]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 80018c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f93c 	bl	8000b44 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f938 	bl	8000b44 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04c      	b.n	800197c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	4924      	ldr	r1, [pc, #144]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 80018f4:	4b25      	ldr	r3, [pc, #148]	@ (800198c <HAL_RCC_OscConfig+0x620>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	60cb      	str	r3, [r1, #12]
 80018fa:	e03e      	b.n	800197a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e039      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001908:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <HAL_RCC_OscConfig+0x618>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d12c      	bne.n	8001976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	3b01      	subs	r3, #1
 8001928:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d123      	bne.n	8001976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d11b      	bne.n	8001976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001948:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d113      	bne.n	8001976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	3b01      	subs	r3, #1
 800195c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d109      	bne.n	8001976 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800196c:	085b      	lsrs	r3, r3, #1
 800196e:	3b01      	subs	r3, #1
 8001970:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	019f800c 	.word	0x019f800c
 800198c:	feeefffc 	.word	0xfeeefffc

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e11e      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b91      	ldr	r3, [pc, #580]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 020f 	bic.w	r2, r3, #15
 80019be:	498c      	ldr	r1, [pc, #560]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e106      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d073      	beq.n	8001acc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d129      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ec:	4b81      	ldr	r3, [pc, #516]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0f4      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019fc:	f000 f9d0 	bl	8001da0 <RCC_GetSysClockFreqFromPLLSource>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf8 <HAL_RCC_ClockConfig+0x268>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d93f      	bls.n	8001a8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d033      	beq.n	8001a8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d12f      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a2a:	4b72      	ldr	r3, [pc, #456]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a32:	4a70      	ldr	r2, [pc, #448]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e024      	b.n	8001a8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d107      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a48:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0c6      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e0be      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a68:	f000 f8ce 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4a61      	ldr	r2, [pc, #388]	@ (8001bf8 <HAL_RCC_ClockConfig+0x268>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d909      	bls.n	8001a8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a76:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a7e:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4957      	ldr	r1, [pc, #348]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f852 	bl	8000b44 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff f84e 	bl	8000b44 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e095      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b4e      	ldr	r3, [pc, #312]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a42      	ldr	r2, [pc, #264]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001aea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001afc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b04:	4a3b      	ldr	r2, [pc, #236]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b39      	ldr	r3, [pc, #228]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4936      	ldr	r1, [pc, #216]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b80      	cmp	r3, #128	@ 0x80
 8001b24:	d105      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4a32      	ldr	r2, [pc, #200]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b32:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d21d      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b40:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 020f 	bic.w	r2, r3, #15
 8001b48:	4929      	ldr	r1, [pc, #164]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b50:	f7fe fff8 	bl	8000b44 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7fe fff4 	bl	8000b44 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e03b      	b.n	8001be6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_RCC_ClockConfig+0x260>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1ed      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4917      	ldr	r1, [pc, #92]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba6:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	490f      	ldr	r1, [pc, #60]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bba:	f000 f825 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <HAL_RCC_ClockConfig+0x264>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	490c      	ldr	r1, [pc, #48]	@ (8001bfc <HAL_RCC_ClockConfig+0x26c>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_RCC_ClockConfig+0x270>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <HAL_RCC_ClockConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe feae 	bl	8000940 <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	04c4b400 	.word	0x04c4b400
 8001bfc:	08006868 	.word	0x08006868
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	20000010 	.word	0x20000010

08001c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d102      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e047      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	e03e      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c32:	4b23      	ldr	r3, [pc, #140]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b0c      	cmp	r3, #12
 8001c3c:	d136      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3301      	adds	r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d10c      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c66:	68d2      	ldr	r2, [r2, #12]
 8001c68:	0a12      	lsrs	r2, r2, #8
 8001c6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
      break;
 8001c74:	e00c      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c76:	4a13      	ldr	r2, [pc, #76]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c80:	68d2      	ldr	r2, [r2, #12]
 8001c82:	0a12      	lsrs	r2, r2, #8
 8001c84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
      break;
 8001c8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0e5b      	lsrs	r3, r3, #25
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	e001      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cb0:	693b      	ldr	r3, [r7, #16]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00f42400 	.word	0x00f42400
 8001cc8:	016e3600 	.word	0x016e3600

08001ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	2000000c 	.word	0x2000000c

08001ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4904      	ldr	r1, [pc, #16]	@ (8001d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cfa:	5ccb      	ldrb	r3, [r1, r3]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08006878 	.word	0x08006878

08001d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d14:	f7ff ffda 	bl	8001ccc <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0adb      	lsrs	r3, r3, #11
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4904      	ldr	r1, [pc, #16]	@ (8001d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	08006878 	.word	0x08006878

08001d3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220f      	movs	r2, #15
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_RCC_GetClockConfig+0x60>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40022000 	.word	0x40022000

08001da0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d10c      	bne.n	8001dde <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc4:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dcc:	4a14      	ldr	r2, [pc, #80]	@ (8001e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dce:	68d2      	ldr	r2, [r2, #12]
 8001dd0:	0a12      	lsrs	r2, r2, #8
 8001dd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	617b      	str	r3, [r7, #20]
    break;
 8001ddc:	e00c      	b.n	8001df8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dde:	4a12      	ldr	r2, [pc, #72]	@ (8001e28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de8:	68d2      	ldr	r2, [r2, #12]
 8001dea:	0a12      	lsrs	r2, r2, #8
 8001dec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	617b      	str	r3, [r7, #20]
    break;
 8001df6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0e5b      	lsrs	r3, r3, #25
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40021000 	.word	0x40021000
 8001e24:	016e3600 	.word	0x016e3600
 8001e28:	00f42400 	.word	0x00f42400

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e34:	2300      	movs	r3, #0
 8001e36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8098 	beq.w	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b43      	ldr	r3, [pc, #268]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b40      	ldr	r3, [pc, #256]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e66:	4b3d      	ldr	r3, [pc, #244]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e76:	4b3a      	ldr	r3, [pc, #232]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a39      	ldr	r2, [pc, #228]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e82:	f7fe fe5f 	bl	8000b44 <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e88:	e009      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7fe fe5b 	bl	8000b44 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d902      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	74fb      	strb	r3, [r7, #19]
        break;
 8001e9c:	e005      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e9e:	4b30      	ldr	r3, [pc, #192]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ef      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001eaa:	7cfb      	ldrb	r3, [r7, #19]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d159      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01e      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d019      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ecc:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ed8:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ef8:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d016      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fe1b 	bl	8000b44 <HAL_GetTick>
 8001f0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f10:	e00b      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe fe17 	bl	8000b44 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d902      	bls.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	74fb      	strb	r3, [r7, #19]
            break;
 8001f28:	e006      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ec      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	4903      	ldr	r1, [pc, #12]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f54:	e008      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	74bb      	strb	r3, [r7, #18]
 8001f5a:	e005      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f68:	7c7b      	ldrb	r3, [r7, #17]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4ba6      	ldr	r3, [pc, #664]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	4aa5      	ldr	r2, [pc, #660]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f86:	4ba0      	ldr	r3, [pc, #640]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8c:	f023 0203 	bic.w	r2, r3, #3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	499c      	ldr	r1, [pc, #624]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa8:	4b97      	ldr	r3, [pc, #604]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fae:	f023 020c 	bic.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	4994      	ldr	r1, [pc, #592]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fca:	4b8f      	ldr	r3, [pc, #572]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	498b      	ldr	r1, [pc, #556]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fec:	4b86      	ldr	r3, [pc, #536]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	4983      	ldr	r1, [pc, #524]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800200e:	4b7e      	ldr	r3, [pc, #504]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002014:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	497a      	ldr	r1, [pc, #488]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002030:	4b75      	ldr	r3, [pc, #468]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4972      	ldr	r1, [pc, #456]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002052:	4b6d      	ldr	r3, [pc, #436]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002058:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4969      	ldr	r1, [pc, #420]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002074:	4b64      	ldr	r3, [pc, #400]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4961      	ldr	r1, [pc, #388]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002096:	4b5c      	ldr	r3, [pc, #368]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	4958      	ldr	r1, [pc, #352]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d015      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c6:	4950      	ldr	r1, [pc, #320]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020d6:	d105      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020f0:	4b45      	ldr	r3, [pc, #276]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	4942      	ldr	r1, [pc, #264]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800210e:	d105      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002110:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a3c      	ldr	r2, [pc, #240]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002128:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4934      	ldr	r1, [pc, #208]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002146:	d105      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002148:	4b2f      	ldr	r3, [pc, #188]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a2e      	ldr	r2, [pc, #184]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002152:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002160:	4b29      	ldr	r3, [pc, #164]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800216e:	4926      	ldr	r1, [pc, #152]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800217e:	d105      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002180:	4b21      	ldr	r3, [pc, #132]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a20      	ldr	r2, [pc, #128]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	4918      	ldr	r1, [pc, #96]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b13      	ldr	r3, [pc, #76]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a12      	ldr	r2, [pc, #72]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d015      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ee:	d105      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e049      	b.n	80022b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f841 	bl	80022ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 fa22 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d001      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e04a      	b.n	800237e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a21      	ldr	r2, [pc, #132]	@ (800238c <HAL_TIM_Base_Start_IT+0xbc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d018      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x6c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002312:	d013      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x6c>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <HAL_TIM_Base_Start_IT+0xc0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00e      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x6c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a1c      	ldr	r2, [pc, #112]	@ (8002394 <HAL_TIM_Base_Start_IT+0xc4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x6c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_TIM_Base_Start_IT+0xc8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d004      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x6c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a19      	ldr	r2, [pc, #100]	@ (800239c <HAL_TIM_Base_Start_IT+0xcc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d115      	bne.n	8002368 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b06      	cmp	r3, #6
 800234c:	d015      	beq.n	800237a <HAL_TIM_Base_Start_IT+0xaa>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d011      	beq.n	800237a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002366:	e008      	b.n	800237a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e000      	b.n	800237c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40013400 	.word	0x40013400
 800239c:	40014000 	.word	0x40014000
 80023a0:	00010007 	.word	0x00010007

080023a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d020      	beq.n	8002408 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01b      	beq.n	8002408 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0202 	mvn.w	r2, #2
 80023d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f931 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 80023f4:	e005      	b.n	8002402 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f923 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f934 	bl	800266a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d020      	beq.n	8002454 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01b      	beq.n	8002454 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0204 	mvn.w	r2, #4
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f90b 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8fd 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f90e 	bl	800266a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d020      	beq.n	80024a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0208 	mvn.w	r2, #8
 8002470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2204      	movs	r2, #4
 8002476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8e5 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f8d7 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f8e8 	bl	800266a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d020      	beq.n	80024ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01b      	beq.n	80024ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0210 	mvn.w	r2, #16
 80024bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2208      	movs	r2, #8
 80024c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f8bf 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8b1 	bl	8002642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8c2 	bl	800266a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0201 	mvn.w	r2, #1
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe f976 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002516:	2b00      	cmp	r3, #0
 8002518:	d104      	bne.n	8002524 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f951 	bl	80027e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00c      	beq.n	8002562 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f949 	bl	80027f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800257e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f87c 	bl	800267e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00c      	beq.n	80025aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0320 	and.w	r3, r3, #32
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0220 	mvn.w	r2, #32
 80025a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f911 	bl	80027cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00c      	beq.n	80025ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80025c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f91d 	bl	8002808 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00c      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80025ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f915 	bl	800281c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800260e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f90d 	bl	8002830 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00c      	beq.n	800263a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f905 	bl	8002844 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a42      	ldr	r2, [pc, #264]	@ (80027b0 <TIM_Base_SetConfig+0x11c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00f      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b2:	d00b      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3f      	ldr	r2, [pc, #252]	@ (80027b4 <TIM_Base_SetConfig+0x120>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3e      	ldr	r2, [pc, #248]	@ (80027b8 <TIM_Base_SetConfig+0x124>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d003      	beq.n	80026cc <TIM_Base_SetConfig+0x38>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <TIM_Base_SetConfig+0x128>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d108      	bne.n	80026de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a33      	ldr	r2, [pc, #204]	@ (80027b0 <TIM_Base_SetConfig+0x11c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01b      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ec:	d017      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a30      	ldr	r2, [pc, #192]	@ (80027b4 <TIM_Base_SetConfig+0x120>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a2f      	ldr	r2, [pc, #188]	@ (80027b8 <TIM_Base_SetConfig+0x124>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00f      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a2e      	ldr	r2, [pc, #184]	@ (80027bc <TIM_Base_SetConfig+0x128>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00b      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <TIM_Base_SetConfig+0x12c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a2c      	ldr	r2, [pc, #176]	@ (80027c4 <TIM_Base_SetConfig+0x130>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d003      	beq.n	800271e <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2b      	ldr	r2, [pc, #172]	@ (80027c8 <TIM_Base_SetConfig+0x134>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d108      	bne.n	8002730 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a16      	ldr	r2, [pc, #88]	@ (80027b0 <TIM_Base_SetConfig+0x11c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00f      	beq.n	800277c <TIM_Base_SetConfig+0xe8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a17      	ldr	r2, [pc, #92]	@ (80027bc <TIM_Base_SetConfig+0x128>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <TIM_Base_SetConfig+0xe8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a16      	ldr	r2, [pc, #88]	@ (80027c0 <TIM_Base_SetConfig+0x12c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0xe8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <TIM_Base_SetConfig+0x130>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0xe8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a14      	ldr	r2, [pc, #80]	@ (80027c8 <TIM_Base_SetConfig+0x134>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d103      	bne.n	8002784 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
  }
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40013400 	.word	0x40013400
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800

080027cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e042      	b.n	80028f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7fd ffff 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2224      	movs	r2, #36	@ 0x24
 8002886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fee4 	bl	8003670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fc15 	bl	80030d8 <UART_SetConfig>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e01b      	b.n	80028f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 ff63 	bl	80037b4 <UART_CheckIdleState>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	2b20      	cmp	r3, #32
 8002910:	d17b      	bne.n	8002a0a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_UART_Transmit+0x26>
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e074      	b.n	8002a0c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	@ 0x21
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002932:	f7fe f907 	bl	8000b44 <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	88fa      	ldrh	r2, [r7, #6]
 8002944:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002950:	d108      	bne.n	8002964 <HAL_UART_Transmit+0x6c>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e003      	b.n	800296c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800296c:	e030      	b.n	80029d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 ffc5 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e03d      	b.n	8002a0c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3302      	adds	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e007      	b.n	80029be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1c8      	bne.n	800296e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2140      	movs	r1, #64	@ 0x40
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 ff8e 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e006      	b.n	8002a0c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0ba      	sub	sp, #232	@ 0xe8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a3e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a42:	4013      	ands	r3, r2
 8002a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d11b      	bne.n	8002a88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8300 	beq.w	800307e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
      }
      return;
 8002a86:	e2fa      	b.n	800307e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8123 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a96:	4b8d      	ldr	r3, [pc, #564]	@ (8002ccc <HAL_UART_IRQHandler+0x2b8>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd0 <HAL_UART_IRQHandler+0x2bc>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8116 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d011      	beq.n	8002adc <HAL_UART_IRQHandler+0xc8>
 8002ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00b      	beq.n	8002adc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d011      	beq.n	8002b0c <HAL_UART_IRQHandler+0xf8>
 8002ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2202      	movs	r2, #2
 8002afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d011      	beq.n	8002b3c <HAL_UART_IRQHandler+0x128>
 8002b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00b      	beq.n	8002b3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b32:	f043 0202 	orr.w	r2, r3, #2
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002b58:	4b5c      	ldr	r3, [pc, #368]	@ (8002ccc <HAL_UART_IRQHandler+0x2b8>)
 8002b5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6e:	f043 0208 	orr.w	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d012      	beq.n	8002baa <HAL_UART_IRQHandler+0x196>
 8002b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00c      	beq.n	8002baa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8266 	beq.w	8003082 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d013      	beq.n	8002bea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d105      	bne.n	8002bda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfe:	2b40      	cmp	r3, #64	@ 0x40
 8002c00:	d005      	beq.n	8002c0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d054      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fee7 	bl	80039e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1e:	2b40      	cmp	r3, #64	@ 0x40
 8002c20:	d146      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1d9      	bne.n	8002c22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c7e:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <HAL_UART_IRQHandler+0x2c0>)
 8002c80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f8a0 	bl	8000dce <HAL_DMA_Abort_IT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d019      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca6:	e00f      	b.n	8002cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9ff 	bl	80030ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cae:	e00b      	b.n	8002cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9fb 	bl	80030ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	e007      	b.n	8002cc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f9f7 	bl	80030ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002cc6:	e1dc      	b.n	8003082 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	bf00      	nop
    return;
 8002cca:	e1da      	b.n	8003082 <HAL_UART_IRQHandler+0x66e>
 8002ccc:	10000001 	.word	0x10000001
 8002cd0:	04000120 	.word	0x04000120
 8002cd4:	08003aaf 	.word	0x08003aaf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	f040 8170 	bne.w	8002fc2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 8169 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8162 	beq.w	8002fc2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2210      	movs	r2, #16
 8002d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b40      	cmp	r3, #64	@ 0x40
 8002d12:	f040 80d8 	bne.w	8002ec6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80af 	beq.w	8002e8c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f080 80a7 	bcs.w	8002e8c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8087 	bne.w	8002e6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d96:	e841 2300 	strex	r3, r2, [r1]
 8002d9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1da      	bne.n	8002d5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002db6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e1      	bne.n	8002da6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3308      	adds	r3, #8
 8002de8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002df2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3308      	adds	r3, #8
 8002e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e3      	bne.n	8002de2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e38:	f023 0310 	bic.w	r3, r3, #16
 8002e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002e4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e4      	bne.n	8002e28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd ff59 	bl	8000d1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f91b 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002e8a:	e0fc      	b.n	8003086 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e96:	429a      	cmp	r2, r3
 8002e98:	f040 80f5 	bne.w	8003086 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f040 80eb 	bne.w	8003086 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8fe 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
      return;
 8002ec4:	e0df      	b.n	8003086 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80d1 	beq.w	800308a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80cc 	beq.w	800308a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e4      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	623b      	str	r3, [r7, #32]
   return(result);
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f50:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f58:	e841 2300 	strex	r3, r2, [r1]
 8002f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e1      	bne.n	8002f28 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f023 0310 	bic.w	r3, r3, #16
 8002f8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e4      	bne.n	8002f78 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f880 	bl	80030c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fc0:	e063      	b.n	800308a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00e      	beq.n	8002fec <HAL_UART_IRQHandler+0x5d8>
 8002fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fd9f 	bl	8003b28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fea:	e051      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d014      	beq.n	8003022 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003008:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003014:	2b00      	cmp	r3, #0
 8003016:	d03a      	beq.n	800308e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
    }
    return;
 8003020:	e035      	b.n	800308e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_UART_IRQHandler+0x62e>
 800302e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fd49 	bl	8003ad2 <UART_EndTransmit_IT>
    return;
 8003040:	e026      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_UART_IRQHandler+0x64e>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003052:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fd78 	bl	8003b50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003060:	e016      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_UART_IRQHandler+0x67c>
 800306e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003072:	2b00      	cmp	r3, #0
 8003074:	da0c      	bge.n	8003090 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fd60 	bl	8003b3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800307c:	e008      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
      return;
 800307e:	bf00      	nop
 8003080:	e006      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
    return;
 8003082:	bf00      	nop
 8003084:	e004      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
      return;
 8003086:	bf00      	nop
 8003088:	e002      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
      return;
 800308a:	bf00      	nop
 800308c:	e000      	b.n	8003090 <HAL_UART_IRQHandler+0x67c>
    return;
 800308e:	bf00      	nop
  }
}
 8003090:	37e8      	adds	r7, #232	@ 0xe8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030dc:	b08c      	sub	sp, #48	@ 0x30
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	431a      	orrs	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4bab      	ldr	r3, [pc, #684]	@ (80033b4 <UART_SetConfig+0x2dc>)
 8003108:	4013      	ands	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003110:	430b      	orrs	r3, r1
 8003112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4aa0      	ldr	r2, [pc, #640]	@ (80033b8 <UART_SetConfig+0x2e0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003140:	4313      	orrs	r3, r2
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800314e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003158:	430b      	orrs	r3, r1
 800315a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	f023 010f 	bic.w	r1, r3, #15
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a91      	ldr	r2, [pc, #580]	@ (80033bc <UART_SetConfig+0x2e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0xf0>
 800317c:	4b90      	ldr	r3, [pc, #576]	@ (80033c0 <UART_SetConfig+0x2e8>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d81a      	bhi.n	80031c0 <UART_SetConfig+0xe8>
 800318a:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <UART_SetConfig+0xb8>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a1 	.word	0x080031a1
 8003194:	080031b1 	.word	0x080031b1
 8003198:	080031a9 	.word	0x080031a9
 800319c:	080031b9 	.word	0x080031b9
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e0d6      	b.n	8003356 <UART_SetConfig+0x27e>
 80031a8:	2302      	movs	r3, #2
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e0d2      	b.n	8003356 <UART_SetConfig+0x27e>
 80031b0:	2304      	movs	r3, #4
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e0ce      	b.n	8003356 <UART_SetConfig+0x27e>
 80031b8:	2308      	movs	r3, #8
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031be:	e0ca      	b.n	8003356 <UART_SetConfig+0x27e>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c6:	e0c6      	b.n	8003356 <UART_SetConfig+0x27e>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a7d      	ldr	r2, [pc, #500]	@ (80033c4 <UART_SetConfig+0x2ec>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d138      	bne.n	8003244 <UART_SetConfig+0x16c>
 80031d2:	4b7b      	ldr	r3, [pc, #492]	@ (80033c0 <UART_SetConfig+0x2e8>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b0c      	cmp	r3, #12
 80031de:	d82d      	bhi.n	800323c <UART_SetConfig+0x164>
 80031e0:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <UART_SetConfig+0x110>)
 80031e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e6:	bf00      	nop
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	0800323d 	.word	0x0800323d
 80031f0:	0800323d 	.word	0x0800323d
 80031f4:	0800323d 	.word	0x0800323d
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	0800323d 	.word	0x0800323d
 8003200:	0800323d 	.word	0x0800323d
 8003204:	0800323d 	.word	0x0800323d
 8003208:	08003225 	.word	0x08003225
 800320c:	0800323d 	.word	0x0800323d
 8003210:	0800323d 	.word	0x0800323d
 8003214:	0800323d 	.word	0x0800323d
 8003218:	08003235 	.word	0x08003235
 800321c:	2300      	movs	r3, #0
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003222:	e098      	b.n	8003356 <UART_SetConfig+0x27e>
 8003224:	2302      	movs	r3, #2
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800322a:	e094      	b.n	8003356 <UART_SetConfig+0x27e>
 800322c:	2304      	movs	r3, #4
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003232:	e090      	b.n	8003356 <UART_SetConfig+0x27e>
 8003234:	2308      	movs	r3, #8
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323a:	e08c      	b.n	8003356 <UART_SetConfig+0x27e>
 800323c:	2310      	movs	r3, #16
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003242:	e088      	b.n	8003356 <UART_SetConfig+0x27e>
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5f      	ldr	r2, [pc, #380]	@ (80033c8 <UART_SetConfig+0x2f0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d125      	bne.n	800329a <UART_SetConfig+0x1c2>
 800324e:	4b5c      	ldr	r3, [pc, #368]	@ (80033c0 <UART_SetConfig+0x2e8>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003254:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003258:	2b30      	cmp	r3, #48	@ 0x30
 800325a:	d016      	beq.n	800328a <UART_SetConfig+0x1b2>
 800325c:	2b30      	cmp	r3, #48	@ 0x30
 800325e:	d818      	bhi.n	8003292 <UART_SetConfig+0x1ba>
 8003260:	2b20      	cmp	r3, #32
 8003262:	d00a      	beq.n	800327a <UART_SetConfig+0x1a2>
 8003264:	2b20      	cmp	r3, #32
 8003266:	d814      	bhi.n	8003292 <UART_SetConfig+0x1ba>
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <UART_SetConfig+0x19a>
 800326c:	2b10      	cmp	r3, #16
 800326e:	d008      	beq.n	8003282 <UART_SetConfig+0x1aa>
 8003270:	e00f      	b.n	8003292 <UART_SetConfig+0x1ba>
 8003272:	2300      	movs	r3, #0
 8003274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003278:	e06d      	b.n	8003356 <UART_SetConfig+0x27e>
 800327a:	2302      	movs	r3, #2
 800327c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003280:	e069      	b.n	8003356 <UART_SetConfig+0x27e>
 8003282:	2304      	movs	r3, #4
 8003284:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003288:	e065      	b.n	8003356 <UART_SetConfig+0x27e>
 800328a:	2308      	movs	r3, #8
 800328c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003290:	e061      	b.n	8003356 <UART_SetConfig+0x27e>
 8003292:	2310      	movs	r3, #16
 8003294:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003298:	e05d      	b.n	8003356 <UART_SetConfig+0x27e>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a4b      	ldr	r2, [pc, #300]	@ (80033cc <UART_SetConfig+0x2f4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d125      	bne.n	80032f0 <UART_SetConfig+0x218>
 80032a4:	4b46      	ldr	r3, [pc, #280]	@ (80033c0 <UART_SetConfig+0x2e8>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80032ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b0:	d016      	beq.n	80032e0 <UART_SetConfig+0x208>
 80032b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032b4:	d818      	bhi.n	80032e8 <UART_SetConfig+0x210>
 80032b6:	2b80      	cmp	r3, #128	@ 0x80
 80032b8:	d00a      	beq.n	80032d0 <UART_SetConfig+0x1f8>
 80032ba:	2b80      	cmp	r3, #128	@ 0x80
 80032bc:	d814      	bhi.n	80032e8 <UART_SetConfig+0x210>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x1f0>
 80032c2:	2b40      	cmp	r3, #64	@ 0x40
 80032c4:	d008      	beq.n	80032d8 <UART_SetConfig+0x200>
 80032c6:	e00f      	b.n	80032e8 <UART_SetConfig+0x210>
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ce:	e042      	b.n	8003356 <UART_SetConfig+0x27e>
 80032d0:	2302      	movs	r3, #2
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d6:	e03e      	b.n	8003356 <UART_SetConfig+0x27e>
 80032d8:	2304      	movs	r3, #4
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032de:	e03a      	b.n	8003356 <UART_SetConfig+0x27e>
 80032e0:	2308      	movs	r3, #8
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e6:	e036      	b.n	8003356 <UART_SetConfig+0x27e>
 80032e8:	2310      	movs	r3, #16
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ee:	e032      	b.n	8003356 <UART_SetConfig+0x27e>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a30      	ldr	r2, [pc, #192]	@ (80033b8 <UART_SetConfig+0x2e0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d12a      	bne.n	8003350 <UART_SetConfig+0x278>
 80032fa:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <UART_SetConfig+0x2e8>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003308:	d01a      	beq.n	8003340 <UART_SetConfig+0x268>
 800330a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800330e:	d81b      	bhi.n	8003348 <UART_SetConfig+0x270>
 8003310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003314:	d00c      	beq.n	8003330 <UART_SetConfig+0x258>
 8003316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331a:	d815      	bhi.n	8003348 <UART_SetConfig+0x270>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <UART_SetConfig+0x250>
 8003320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003324:	d008      	beq.n	8003338 <UART_SetConfig+0x260>
 8003326:	e00f      	b.n	8003348 <UART_SetConfig+0x270>
 8003328:	2300      	movs	r3, #0
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e012      	b.n	8003356 <UART_SetConfig+0x27e>
 8003330:	2302      	movs	r3, #2
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e00e      	b.n	8003356 <UART_SetConfig+0x27e>
 8003338:	2304      	movs	r3, #4
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e00a      	b.n	8003356 <UART_SetConfig+0x27e>
 8003340:	2308      	movs	r3, #8
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e006      	b.n	8003356 <UART_SetConfig+0x27e>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800334e:	e002      	b.n	8003356 <UART_SetConfig+0x27e>
 8003350:	2310      	movs	r3, #16
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <UART_SetConfig+0x2e0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	f040 80a8 	bne.w	80034b2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003362:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003366:	2b08      	cmp	r3, #8
 8003368:	d834      	bhi.n	80033d4 <UART_SetConfig+0x2fc>
 800336a:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0x298>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003395 	.word	0x08003395
 8003374:	080033d5 	.word	0x080033d5
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033a3 	.word	0x080033a3
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033d5 	.word	0x080033d5
 800338c:	080033d5 	.word	0x080033d5
 8003390:	080033ab 	.word	0x080033ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7fe fca6 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 8003398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800339a:	e021      	b.n	80033e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b0c      	ldr	r3, [pc, #48]	@ (80033d0 <UART_SetConfig+0x2f8>)
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033a0:	e01e      	b.n	80033e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7fe fc31 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80033a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033a8:	e01a      	b.n	80033e0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033b0:	e016      	b.n	80033e0 <UART_SetConfig+0x308>
 80033b2:	bf00      	nop
 80033b4:	cfff69f3 	.word	0xcfff69f3
 80033b8:	40008000 	.word	0x40008000
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40004400 	.word	0x40004400
 80033c8:	40004800 	.word	0x40004800
 80033cc:	40004c00 	.word	0x40004c00
 80033d0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 812a 	beq.w	800363c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ec:	4a9e      	ldr	r2, [pc, #632]	@ (8003668 <UART_SetConfig+0x590>)
 80033ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f2:	461a      	mov	r2, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	429a      	cmp	r2, r3
 800340a:	d305      	bcc.n	8003418 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	429a      	cmp	r2, r3
 8003416:	d903      	bls.n	8003420 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800341e:	e10d      	b.n	800363c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	2200      	movs	r2, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	60fa      	str	r2, [r7, #12]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	4a8e      	ldr	r2, [pc, #568]	@ (8003668 <UART_SetConfig+0x590>)
 800342e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003432:	b29b      	uxth	r3, r3
 8003434:	2200      	movs	r2, #0
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003442:	f7fc fef5 	bl	8000230 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	020b      	lsls	r3, r1, #8
 8003458:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800345c:	0202      	lsls	r2, r0, #8
 800345e:	6979      	ldr	r1, [r7, #20]
 8003460:	6849      	ldr	r1, [r1, #4]
 8003462:	0849      	lsrs	r1, r1, #1
 8003464:	2000      	movs	r0, #0
 8003466:	460c      	mov	r4, r1
 8003468:	4605      	mov	r5, r0
 800346a:	eb12 0804 	adds.w	r8, r2, r4
 800346e:	eb43 0905 	adc.w	r9, r3, r5
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	469a      	mov	sl, r3
 800347a:	4693      	mov	fp, r2
 800347c:	4652      	mov	r2, sl
 800347e:	465b      	mov	r3, fp
 8003480:	4640      	mov	r0, r8
 8003482:	4649      	mov	r1, r9
 8003484:	f7fc fed4 	bl	8000230 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003496:	d308      	bcc.n	80034aa <UART_SetConfig+0x3d2>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800349e:	d204      	bcs.n	80034aa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a3a      	ldr	r2, [r7, #32]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e0c8      	b.n	800363c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034b0:	e0c4      	b.n	800363c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034ba:	d167      	bne.n	800358c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80034bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d828      	bhi.n	8003516 <UART_SetConfig+0x43e>
 80034c4:	a201      	add	r2, pc, #4	@ (adr r2, 80034cc <UART_SetConfig+0x3f4>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
 80034d8:	08003517 	.word	0x08003517
 80034dc:	08003507 	.word	0x08003507
 80034e0:	08003517 	.word	0x08003517
 80034e4:	08003517 	.word	0x08003517
 80034e8:	08003517 	.word	0x08003517
 80034ec:	0800350f 	.word	0x0800350f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f0:	f7fe fbf8 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 80034f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034f6:	e014      	b.n	8003522 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f8:	f7fe fc0a 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 80034fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034fe:	e010      	b.n	8003522 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003500:	4b5a      	ldr	r3, [pc, #360]	@ (800366c <UART_SetConfig+0x594>)
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003504:	e00d      	b.n	8003522 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003506:	f7fe fb7f 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 800350a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800350c:	e009      	b.n	8003522 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003514:	e005      	b.n	8003522 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8089 	beq.w	800363c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	4a4e      	ldr	r2, [pc, #312]	@ (8003668 <UART_SetConfig+0x590>)
 8003530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003534:	461a      	mov	r2, r3
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	fbb3 f3f2 	udiv	r3, r3, r2
 800353c:	005a      	lsls	r2, r3, #1
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	441a      	add	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	d916      	bls.n	8003584 <UART_SetConfig+0x4ac>
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d212      	bcs.n	8003584 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	b29b      	uxth	r3, r3
 8003562:	f023 030f 	bic.w	r3, r3, #15
 8003566:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	b29a      	uxth	r2, r3
 8003574:	8bfb      	ldrh	r3, [r7, #30]
 8003576:	4313      	orrs	r3, r2
 8003578:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	8bfa      	ldrh	r2, [r7, #30]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	e05b      	b.n	800363c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800358a:	e057      	b.n	800363c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003590:	2b08      	cmp	r3, #8
 8003592:	d828      	bhi.n	80035e6 <UART_SetConfig+0x50e>
 8003594:	a201      	add	r2, pc, #4	@ (adr r2, 800359c <UART_SetConfig+0x4c4>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035c9 	.word	0x080035c9
 80035a4:	080035d1 	.word	0x080035d1
 80035a8:	080035e7 	.word	0x080035e7
 80035ac:	080035d7 	.word	0x080035d7
 80035b0:	080035e7 	.word	0x080035e7
 80035b4:	080035e7 	.word	0x080035e7
 80035b8:	080035e7 	.word	0x080035e7
 80035bc:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c0:	f7fe fb90 	bl	8001ce4 <HAL_RCC_GetPCLK1Freq>
 80035c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035c6:	e014      	b.n	80035f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c8:	f7fe fba2 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 80035cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035ce:	e010      	b.n	80035f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035d0:	4b26      	ldr	r3, [pc, #152]	@ (800366c <UART_SetConfig+0x594>)
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035d4:	e00d      	b.n	80035f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d6:	f7fe fb17 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 80035da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035dc:	e009      	b.n	80035f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035e4:	e005      	b.n	80035f2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035f0:	bf00      	nop
    }

    if (pclk != 0U)
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d021      	beq.n	800363c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003668 <UART_SetConfig+0x590>)
 80035fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003602:	461a      	mov	r2, r3
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	fbb3 f2f2 	udiv	r2, r3, r2
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	441a      	add	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	d909      	bls.n	8003636 <UART_SetConfig+0x55e>
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003628:	d205      	bcs.n	8003636 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	b29a      	uxth	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	e002      	b.n	800363c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2201      	movs	r2, #1
 8003640:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2201      	movs	r2, #1
 8003648:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003658:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800365c:	4618      	mov	r0, r3
 800365e:	3730      	adds	r7, #48	@ 0x30
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	08006880 	.word	0x08006880
 800366c:	00f42400 	.word	0x00f42400

08003670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01a      	beq.n	8003786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800376e:	d10a      	bne.n	8003786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
  }
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b098      	sub	sp, #96	@ 0x60
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c4:	f7fd f9be 	bl	8000b44 <HAL_GetTick>
 80037c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d12f      	bne.n	8003838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e0:	2200      	movs	r2, #0
 80037e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f88e 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d022      	beq.n	8003838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003806:	653b      	str	r3, [r7, #80]	@ 0x50
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003810:	647b      	str	r3, [r7, #68]	@ 0x44
 8003812:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800381e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e6      	bne.n	80037f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e063      	b.n	8003900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d149      	bne.n	80038da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003846:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	2200      	movs	r2, #0
 8003850:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f857 	bl	8003908 <UART_WaitOnFlagUntilTimeout>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03c      	beq.n	80038da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	623b      	str	r3, [r7, #32]
   return(result);
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003880:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e6      	bne.n	8003860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3308      	adds	r3, #8
 8003898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f023 0301 	bic.w	r3, r3, #1
 80038a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b2:	61fa      	str	r2, [r7, #28]
 80038b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	617b      	str	r3, [r7, #20]
   return(result);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e5      	bne.n	8003892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e012      	b.n	8003900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3758      	adds	r7, #88	@ 0x58
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4613      	mov	r3, r2
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003918:	e04f      	b.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003920:	d04b      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fd f90f 	bl	8000b44 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <UART_WaitOnFlagUntilTimeout+0x30>
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e04e      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d037      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b80      	cmp	r3, #128	@ 0x80
 800394e:	d034      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	d031      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d110      	bne.n	8003986 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2208      	movs	r2, #8
 800396a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f838 	bl	80039e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2208      	movs	r2, #8
 8003976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e029      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003994:	d111      	bne.n	80039ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800399e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f81e 	bl	80039e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e00f      	b.n	80039da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	79fb      	ldrb	r3, [r7, #7]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d0a0      	beq.n	800391a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b095      	sub	sp, #84	@ 0x54
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e3      	bne.n	8003a1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d118      	bne.n	8003a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f023 0310 	bic.w	r3, r3, #16
 8003a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a7a:	61bb      	str	r3, [r7, #24]
 8003a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7e:	6979      	ldr	r1, [r7, #20]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	613b      	str	r3, [r7, #16]
   return(result);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1e6      	bne.n	8003a5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003aa2:	bf00      	nop
 8003aa4:	3754      	adds	r7, #84	@ 0x54
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff faf1 	bl	80030ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b088      	sub	sp, #32
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	613b      	str	r3, [r7, #16]
   return(result);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e6      	bne.n	8003ada <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fabc 	bl	8003098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b20:	bf00      	nop
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_UARTEx_DisableFifoMode+0x16>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e027      	b.n	8003bca <HAL_UARTEx_DisableFifoMode+0x66>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2224      	movs	r2, #36	@ 0x24
 8003b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003ba8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e02d      	b.n	8003c4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2224      	movs	r2, #36	@ 0x24
 8003bfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f850 	bl	8003cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e02d      	b.n	8003cc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2224      	movs	r2, #36	@ 0x24
 8003c76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0201 	bic.w	r2, r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f812 	bl	8003cd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
	...

08003cd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d108      	bne.n	8003cf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003cf0:	e031      	b.n	8003d56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	0e5b      	lsrs	r3, r3, #25
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	0f5b      	lsrs	r3, r3, #29
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d1a:	7bbb      	ldrb	r3, [r7, #14]
 8003d1c:	7b3a      	ldrb	r2, [r7, #12]
 8003d1e:	4911      	ldr	r1, [pc, #68]	@ (8003d64 <UARTEx_SetNbDataToProcess+0x94>)
 8003d20:	5c8a      	ldrb	r2, [r1, r2]
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d26:	7b3a      	ldrb	r2, [r7, #12]
 8003d28:	490f      	ldr	r1, [pc, #60]	@ (8003d68 <UARTEx_SetNbDataToProcess+0x98>)
 8003d2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	7b7a      	ldrb	r2, [r7, #13]
 8003d3c:	4909      	ldr	r1, [pc, #36]	@ (8003d64 <UARTEx_SetNbDataToProcess+0x94>)
 8003d3e:	5c8a      	ldrb	r2, [r1, r2]
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d44:	7b7a      	ldrb	r2, [r7, #13]
 8003d46:	4908      	ldr	r1, [pc, #32]	@ (8003d68 <UARTEx_SetNbDataToProcess+0x98>)
 8003d48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	08006898 	.word	0x08006898
 8003d68:	080068a0 	.word	0x080068a0

08003d6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7e:	2b84      	cmp	r3, #132	@ 0x84
 8003d80:	d005      	beq.n	8003d8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3303      	adds	r3, #3
 8003d8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003da0:	f000 ffa4 	bl	8004cec <vTaskStartScheduler>
  
  return osOK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	bd80      	pop	{r7, pc}

08003daa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dac:	b087      	sub	sp, #28
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685c      	ldr	r4, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dc0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ffcf 	bl	8003d6c <makeFreeRtosPriority>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	9200      	str	r2, [sp, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4620      	mov	r0, r4
 8003de0:	f000 fd82 	bl	80048e8 <xTaskCreate>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003df8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <osDelay+0x16>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	e000      	b.n	8003e10 <osDelay+0x18>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 ff35 	bl	8004c80 <vTaskDelay>
  
  return osOK;
 8003e16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f103 0208 	add.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f103 0208 	add.w	r2, r3, #8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f103 0208 	add.w	r2, r3, #8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ed8:	d103      	bne.n	8003ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e00c      	b.n	8003efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e002      	b.n	8003ef0 <vListInsert+0x2e>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d2f6      	bcs.n	8003eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6892      	ldr	r2, [r2, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6852      	ldr	r2, [r2, #4]
 8003f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d103      	bne.n	8003f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
 8003fb2:	e7fd      	b.n	8003fb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fb4:	f002 f820 	bl	8005ff8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	441a      	add	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	68f9      	ldr	r1, [r7, #12]
 8003fe8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	441a      	add	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	22ff      	movs	r2, #255	@ 0xff
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	22ff      	movs	r2, #255	@ 0xff
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d114      	bne.n	8004034 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01a      	beq.n	8004048 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3310      	adds	r3, #16
 8004016:	4618      	mov	r0, r3
 8004018:	f001 f8ec 	bl	80051f4 <xTaskRemoveFromEventList>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <xQueueGenericReset+0xd0>)
 8004024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	e009      	b.n	8004048 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3310      	adds	r3, #16
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff fef1 	bl	8003e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3324      	adds	r3, #36	@ 0x24
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff feec 	bl	8003e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004048:	f002 f808 	bl	800605c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800404c:	2301      	movs	r3, #1
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	613b      	str	r3, [r7, #16]
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3348      	adds	r3, #72	@ 0x48
 8004096:	4618      	mov	r0, r3
 8004098:	f002 f8d0 	bl	800623c <pvPortMalloc>
 800409c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00d      	beq.n	80040c0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	3348      	adds	r3, #72	@ 0x48
 80040ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	79fa      	ldrb	r2, [r7, #7]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f805 	bl	80040ca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040c0:	69bb      	ldr	r3, [r7, #24]
	}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e002      	b.n	80040ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040f8:	2101      	movs	r1, #1
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	f7ff ff44 	bl	8003f88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08e      	sub	sp, #56	@ 0x38
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004116:	2300      	movs	r3, #0
 8004118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <xQueueGenericSend+0x34>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <xQueueGenericSend+0x42>
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <xQueueGenericSend+0x46>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <xQueueGenericSend+0x48>
 800414e:	2300      	movs	r3, #0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <xQueueGenericSend+0x64>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d103      	bne.n	800417a <xQueueGenericSend+0x72>
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <xQueueGenericSend+0x76>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericSend+0x78>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10b      	bne.n	800419c <xQueueGenericSend+0x94>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800419c:	f001 f9d0 	bl	8005540 <xTaskGetSchedulerState>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <xQueueGenericSend+0xa4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <xQueueGenericSend+0xa8>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <xQueueGenericSend+0xaa>
 80041b0:	2300      	movs	r3, #0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10b      	bne.n	80041ce <xQueueGenericSend+0xc6>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	61fb      	str	r3, [r7, #28]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041ce:	f001 ff13 	bl	8005ff8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <xQueueGenericSend+0xdc>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d129      	bne.n	8004238 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041ea:	f000 fa0f 	bl	800460c <prvCopyDataToQueue>
 80041ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	3324      	adds	r3, #36	@ 0x24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fff9 	bl	80051f4 <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004208:	4b3f      	ldr	r3, [pc, #252]	@ (8004308 <xQueueGenericSend+0x200>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	e00a      	b.n	8004230 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800421a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004220:	4b39      	ldr	r3, [pc, #228]	@ (8004308 <xQueueGenericSend+0x200>)
 8004222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004230:	f001 ff14 	bl	800605c <vPortExitCritical>
				return pdPASS;
 8004234:	2301      	movs	r3, #1
 8004236:	e063      	b.n	8004300 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800423e:	f001 ff0d 	bl	800605c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004242:	2300      	movs	r3, #0
 8004244:	e05c      	b.n	8004300 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800424c:	f107 0314 	add.w	r3, r7, #20
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f833 	bl	80052bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004256:	2301      	movs	r3, #1
 8004258:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800425a:	f001 feff 	bl	800605c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800425e:	f000 fd9d 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004262:	f001 fec9 	bl	8005ff8 <vPortEnterCritical>
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800426c:	b25b      	sxtb	r3, r3
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004272:	d103      	bne.n	800427c <xQueueGenericSend+0x174>
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004282:	b25b      	sxtb	r3, r3
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004288:	d103      	bne.n	8004292 <xQueueGenericSend+0x18a>
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004292:	f001 fee3 	bl	800605c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004296:	1d3a      	adds	r2, r7, #4
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f822 	bl	80052e8 <xTaskCheckForTimeOut>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d124      	bne.n	80042f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ac:	f000 faa6 	bl	80047fc <prvIsQueueFull>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d018      	beq.n	80042e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	3310      	adds	r3, #16
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 ff46 	bl	8005150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042c6:	f000 fa31 	bl	800472c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042ca:	f000 fd75 	bl	8004db8 <xTaskResumeAll>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f47f af7c 	bne.w	80041ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <xQueueGenericSend+0x200>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	e772      	b.n	80041ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ea:	f000 fa1f 	bl	800472c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042ee:	f000 fd63 	bl	8004db8 <xTaskResumeAll>
 80042f2:	e76c      	b.n	80041ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042f6:	f000 fa19 	bl	800472c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042fa:	f000 fd5d 	bl	8004db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004300:	4618      	mov	r0, r3
 8004302:	3738      	adds	r7, #56	@ 0x38
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b090      	sub	sp, #64	@ 0x40
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800431e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <xQueueGenericSendFromISR+0x3e>
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <xQueueGenericSendFromISR+0x42>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueGenericSendFromISR+0x44>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d103      	bne.n	800437a <xQueueGenericSendFromISR+0x6e>
 8004372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <xQueueGenericSendFromISR+0x72>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <xQueueGenericSendFromISR+0x74>
 800437e:	2300      	movs	r3, #0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800439c:	f001 ff0c 	bl	80061b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80043a0:	f3ef 8211 	mrs	r2, BASEPRI
 80043a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a8:	f383 8811 	msr	BASEPRI, r3
 80043ac:	f3bf 8f6f 	isb	sy
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	61fa      	str	r2, [r7, #28]
 80043b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80043b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d302      	bcc.n	80043ce <xQueueGenericSendFromISR+0xc2>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d12f      	bne.n	800442e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80043e4:	f000 f912 	bl	800460c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043f0:	d112      	bne.n	8004418 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fc:	3324      	adds	r3, #36	@ 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fef8 	bl	80051f4 <xTaskRemoveFromEventList>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00e      	beq.n	8004428 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00b      	beq.n	8004428 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e007      	b.n	8004428 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004418:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800441c:	3301      	adds	r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	b25a      	sxtb	r2, r3
 8004422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004428:	2301      	movs	r3, #1
 800442a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800442c:	e001      	b.n	8004432 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800442e:	2300      	movs	r3, #0
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800443c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800443e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004440:	4618      	mov	r0, r3
 8004442:	3740      	adds	r7, #64	@ 0x40
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	@ 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <xQueueReceive+0x32>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	623b      	str	r3, [r7, #32]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <xQueueReceive+0x40>
 8004480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <xQueueReceive+0x44>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <xQueueReceive+0x46>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <xQueueReceive+0x62>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	61fb      	str	r3, [r7, #28]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044aa:	f001 f849 	bl	8005540 <xTaskGetSchedulerState>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <xQueueReceive+0x72>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <xQueueReceive+0x76>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <xQueueReceive+0x78>
 80044be:	2300      	movs	r3, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <xQueueReceive+0x94>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	61bb      	str	r3, [r7, #24]
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044dc:	f001 fd8c 	bl	8005ff8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01f      	beq.n	800452c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044f0:	f000 f8f6 	bl	80046e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f6:	1e5a      	subs	r2, r3, #1
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00f      	beq.n	8004524 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	3310      	adds	r3, #16
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fe73 	bl	80051f4 <xTaskRemoveFromEventList>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004514:	4b3c      	ldr	r3, [pc, #240]	@ (8004608 <xQueueReceive+0x1c0>)
 8004516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004524:	f001 fd9a 	bl	800605c <vPortExitCritical>
				return pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	e069      	b.n	8004600 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004532:	f001 fd93 	bl	800605c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004536:	2300      	movs	r3, #0
 8004538:	e062      	b.n	8004600 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004540:	f107 0310 	add.w	r3, r7, #16
 8004544:	4618      	mov	r0, r3
 8004546:	f000 feb9 	bl	80052bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800454a:	2301      	movs	r3, #1
 800454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800454e:	f001 fd85 	bl	800605c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004552:	f000 fc23 	bl	8004d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004556:	f001 fd4f 	bl	8005ff8 <vPortEnterCritical>
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004560:	b25b      	sxtb	r3, r3
 8004562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004566:	d103      	bne.n	8004570 <xQueueReceive+0x128>
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004576:	b25b      	sxtb	r3, r3
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0x13e>
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004586:	f001 fd69 	bl	800605c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800458a:	1d3a      	adds	r2, r7, #4
 800458c:	f107 0310 	add.w	r3, r7, #16
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fea8 	bl	80052e8 <xTaskCheckForTimeOut>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d123      	bne.n	80045e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800459e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045a0:	f000 f916 	bl	80047d0 <prvIsQueueEmpty>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d017      	beq.n	80045da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	3324      	adds	r3, #36	@ 0x24
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fdcc 	bl	8005150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045ba:	f000 f8b7 	bl	800472c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045be:	f000 fbfb 	bl	8004db8 <xTaskResumeAll>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d189      	bne.n	80044dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80045c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <xQueueReceive+0x1c0>)
 80045ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	e780      	b.n	80044dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045dc:	f000 f8a6 	bl	800472c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045e0:	f000 fbea 	bl	8004db8 <xTaskResumeAll>
 80045e4:	e77a      	b.n	80044dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045e8:	f000 f8a0 	bl	800472c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045ec:	f000 fbe4 	bl	8004db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80045f2:	f000 f8ed 	bl	80047d0 <prvIsQueueEmpty>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f43f af6f 	beq.w	80044dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004600:	4618      	mov	r0, r3
 8004602:	3730      	adds	r7, #48	@ 0x30
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10d      	bne.n	8004646 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d14d      	bne.n	80046ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 ffa0 	bl	800557c <xTaskPriorityDisinherit>
 800463c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	e043      	b.n	80046ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d119      	bne.n	8004680 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6858      	ldr	r0, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	461a      	mov	r2, r3
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	f002 f86a 	bl	8006730 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	429a      	cmp	r2, r3
 8004674:	d32b      	bcc.n	80046ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	e026      	b.n	80046ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	68d8      	ldr	r0, [r3, #12]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	461a      	mov	r2, r3
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	f002 f850 	bl	8006730 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	425b      	negs	r3, r3
 800469a:	441a      	add	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d207      	bcs.n	80046bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b4:	425b      	negs	r3, r3
 80046b6:	441a      	add	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d105      	bne.n	80046ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80046d6:	697b      	ldr	r3, [r7, #20]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d018      	beq.n	8004724 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	441a      	add	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	d303      	bcc.n	8004714 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68d9      	ldr	r1, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471c:	461a      	mov	r2, r3
 800471e:	6838      	ldr	r0, [r7, #0]
 8004720:	f002 f806 	bl	8006730 <memcpy>
	}
}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004734:	f001 fc60 	bl	8005ff8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800473e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004740:	e011      	b.n	8004766 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3324      	adds	r3, #36	@ 0x24
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fd50 	bl	80051f4 <xTaskRemoveFromEventList>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800475a:	f000 fe29 	bl	80053b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	3b01      	subs	r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800476a:	2b00      	cmp	r3, #0
 800476c:	dce9      	bgt.n	8004742 <prvUnlockQueue+0x16>
 800476e:	e000      	b.n	8004772 <prvUnlockQueue+0x46>
					break;
 8004770:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	22ff      	movs	r2, #255	@ 0xff
 8004776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800477a:	f001 fc6f 	bl	800605c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800477e:	f001 fc3b 	bl	8005ff8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004788:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800478a:	e011      	b.n	80047b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d012      	beq.n	80047ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3310      	adds	r3, #16
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fd2b 	bl	80051f4 <xTaskRemoveFromEventList>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80047a4:	f000 fe04 	bl	80053b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80047a8:	7bbb      	ldrb	r3, [r7, #14]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80047b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dce9      	bgt.n	800478c <prvUnlockQueue+0x60>
 80047b8:	e000      	b.n	80047bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80047ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	22ff      	movs	r2, #255	@ 0xff
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80047c4:	f001 fc4a 	bl	800605c <vPortExitCritical>
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047d8:	f001 fc0e 	bl	8005ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e001      	b.n	80047ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047ee:	f001 fc35 	bl	800605c <vPortExitCritical>

	return xReturn;
 80047f2:	68fb      	ldr	r3, [r7, #12]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004804:	f001 fbf8 	bl	8005ff8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004810:	429a      	cmp	r2, r3
 8004812:	d102      	bne.n	800481a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800481e:	f001 fc1d 	bl	800605c <vPortExitCritical>

	return xReturn;
 8004822:	68fb      	ldr	r3, [r7, #12]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e014      	b.n	8004866 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800483c:	4a0f      	ldr	r2, [pc, #60]	@ (800487c <vQueueAddToRegistry+0x50>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004848:	490c      	ldr	r1, [pc, #48]	@ (800487c <vQueueAddToRegistry+0x50>)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004852:	4a0a      	ldr	r2, [pc, #40]	@ (800487c <vQueueAddToRegistry+0x50>)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800485e:	e006      	b.n	800486e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b07      	cmp	r3, #7
 800486a:	d9e7      	bls.n	800483c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	20000170 	.word	0x20000170

08004880 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004890:	f001 fbb2 	bl	8005ff8 <vPortEnterCritical>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048a0:	d103      	bne.n	80048aa <vQueueWaitForMessageRestricted+0x2a>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048b0:	b25b      	sxtb	r3, r3
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048b6:	d103      	bne.n	80048c0 <vQueueWaitForMessageRestricted+0x40>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048c0:	f001 fbcc 	bl	800605c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3324      	adds	r3, #36	@ 0x24
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fc61 	bl	800519c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048da:	6978      	ldr	r0, [r7, #20]
 80048dc:	f7ff ff26 	bl	800472c <prvUnlockQueue>
	}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	@ 0x30
 80048ec:	af04      	add	r7, sp, #16
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 fc9d 	bl	800623c <pvPortMalloc>
 8004902:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00e      	beq.n	8004928 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800490a:	20a0      	movs	r0, #160	@ 0xa0
 800490c:	f001 fc96 	bl	800623c <pvPortMalloc>
 8004910:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	631a      	str	r2, [r3, #48]	@ 0x30
 800491e:	e005      	b.n	800492c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004920:	6978      	ldr	r0, [r7, #20]
 8004922:	f001 fd59 	bl	80063d8 <vPortFree>
 8004926:	e001      	b.n	800492c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d013      	beq.n	800495a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	2300      	movs	r3, #0
 8004936:	9303      	str	r3, [sp, #12]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f80f 	bl	800496c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800494e:	69f8      	ldr	r0, [r7, #28]
 8004950:	f000 f8ac 	bl	8004aac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e002      	b.n	8004960 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800495e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004960:	69bb      	ldr	r3, [r7, #24]
	}
 8004962:	4618      	mov	r0, r3
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004984:	3b01      	subs	r3, #1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	617b      	str	r3, [r7, #20]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01f      	beq.n	80049fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e012      	b.n	80049e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	7819      	ldrb	r1, [r3, #0]
 80049ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	3334      	adds	r3, #52	@ 0x34
 80049d2:	460a      	mov	r2, r1
 80049d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3301      	adds	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d9e9      	bls.n	80049c2 <prvInitialiseNewTask+0x56>
 80049ee:	e000      	b.n	80049f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80049f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049fa:	e003      	b.n	8004a04 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	2b1f      	cmp	r3, #31
 8004a08:	d901      	bls.n	8004a0e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a0a:	231f      	movs	r3, #31
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a18:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	3304      	adds	r3, #4
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fa1b 	bl	8003e60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2c:	3318      	adds	r3, #24
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fa16 	bl	8003e60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3c:	f1c3 0220 	rsb	r2, r3, #32
 8004a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5c:	334c      	adds	r3, #76	@ 0x4c
 8004a5e:	224c      	movs	r2, #76	@ 0x4c
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fdd8 	bl	8006618 <memset>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa0 <prvInitialiseNewTask+0x134>)
 8004a6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa4 <prvInitialiseNewTask+0x138>)
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	4a0c      	ldr	r2, [pc, #48]	@ (8004aa8 <prvInitialiseNewTask+0x13c>)
 8004a78:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	69b8      	ldr	r0, [r7, #24]
 8004a80:	f001 f988 	bl	8005d94 <pxPortInitialiseStack>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a96:	bf00      	nop
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20005354 	.word	0x20005354
 8004aa4:	200053bc 	.word	0x200053bc
 8004aa8:	20005424 	.word	0x20005424

08004aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ab4:	f001 faa0 	bl	8005ff8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b64 <prvAddNewTaskToReadyList+0xb8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	4a29      	ldr	r2, [pc, #164]	@ (8004b64 <prvAddNewTaskToReadyList+0xb8>)
 8004ac0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ac2:	4b29      	ldr	r3, [pc, #164]	@ (8004b68 <prvAddNewTaskToReadyList+0xbc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004aca:	4a27      	ldr	r2, [pc, #156]	@ (8004b68 <prvAddNewTaskToReadyList+0xbc>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ad0:	4b24      	ldr	r3, [pc, #144]	@ (8004b64 <prvAddNewTaskToReadyList+0xb8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d110      	bne.n	8004afa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ad8:	f000 fc8e 	bl	80053f8 <prvInitialiseTaskLists>
 8004adc:	e00d      	b.n	8004afa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ade:	4b23      	ldr	r3, [pc, #140]	@ (8004b6c <prvAddNewTaskToReadyList+0xc0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ae6:	4b20      	ldr	r3, [pc, #128]	@ (8004b68 <prvAddNewTaskToReadyList+0xbc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d802      	bhi.n	8004afa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004af4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b68 <prvAddNewTaskToReadyList+0xbc>)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004afa:	4b1d      	ldr	r3, [pc, #116]	@ (8004b70 <prvAddNewTaskToReadyList+0xc4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	4a1b      	ldr	r2, [pc, #108]	@ (8004b70 <prvAddNewTaskToReadyList+0xc4>)
 8004b02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	4b19      	ldr	r3, [pc, #100]	@ (8004b74 <prvAddNewTaskToReadyList+0xc8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <prvAddNewTaskToReadyList+0xc8>)
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <prvAddNewTaskToReadyList+0xcc>)
 8004b24:	441a      	add	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7ff f9a4 	bl	8003e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b32:	f001 fa93 	bl	800605c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b36:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <prvAddNewTaskToReadyList+0xc0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00e      	beq.n	8004b5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <prvAddNewTaskToReadyList+0xbc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d207      	bcs.n	8004b5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <prvAddNewTaskToReadyList+0xd0>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200004a4 	.word	0x200004a4
 8004b68:	200001b0 	.word	0x200001b0
 8004b6c:	200004b0 	.word	0x200004b0
 8004b70:	200004c0 	.word	0x200004c0
 8004b74:	200004ac 	.word	0x200004ac
 8004b78:	200001b4 	.word	0x200001b4
 8004b7c:	e000ed04 	.word	0xe000ed04

08004b80 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	@ 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <vTaskDelayUntil+0x2c>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	617b      	str	r3, [r7, #20]
}
 8004ba6:	bf00      	nop
 8004ba8:	bf00      	nop
 8004baa:	e7fd      	b.n	8004ba8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <vTaskDelayUntil+0x4a>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	613b      	str	r3, [r7, #16]
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	e7fd      	b.n	8004bc6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004bca:	4b2a      	ldr	r3, [pc, #168]	@ (8004c74 <vTaskDelayUntil+0xf4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <vTaskDelayUntil+0x6a>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	60fb      	str	r3, [r7, #12]
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
 8004be8:	e7fd      	b.n	8004be6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004bea:	f000 f8d7 	bl	8004d9c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004bee:	4b22      	ldr	r3, [pc, #136]	@ (8004c78 <vTaskDelayUntil+0xf8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6a3a      	ldr	r2, [r7, #32]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d20b      	bcs.n	8004c20 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69fa      	ldr	r2, [r7, #28]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d211      	bcs.n	8004c36 <vTaskDelayUntil+0xb6>
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d90d      	bls.n	8004c36 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c1e:	e00a      	b.n	8004c36 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d303      	bcc.n	8004c32 <vTaskDelayUntil+0xb2>
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d901      	bls.n	8004c36 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d006      	beq.n	8004c50 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fd1e 	bl	800568c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004c50:	f000 f8b2 	bl	8004db8 <xTaskResumeAll>
 8004c54:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d107      	bne.n	8004c6c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004c5c:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <vTaskDelayUntil+0xfc>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c6c:	bf00      	nop
 8004c6e:	3728      	adds	r7, #40	@ 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	200004cc 	.word	0x200004cc
 8004c78:	200004a8 	.word	0x200004a8
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c92:	4b14      	ldr	r3, [pc, #80]	@ (8004ce4 <vTaskDelay+0x64>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <vTaskDelay+0x32>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60bb      	str	r3, [r7, #8]
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cb2:	f000 f873 	bl	8004d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fce7 	bl	800568c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004cbe:	f000 f87b 	bl	8004db8 <xTaskResumeAll>
 8004cc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004cca:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <vTaskDelay+0x68>)
 8004ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200004cc 	.word	0x200004cc
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004cf2:	4b22      	ldr	r3, [pc, #136]	@ (8004d7c <vTaskStartScheduler+0x90>)
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2280      	movs	r2, #128	@ 0x80
 8004cfe:	4920      	ldr	r1, [pc, #128]	@ (8004d80 <vTaskStartScheduler+0x94>)
 8004d00:	4820      	ldr	r0, [pc, #128]	@ (8004d84 <vTaskStartScheduler+0x98>)
 8004d02:	f7ff fdf1 	bl	80048e8 <xTaskCreate>
 8004d06:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d102      	bne.n	8004d14 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004d0e:	f000 fd23 	bl	8005758 <xTimerCreateTimerTask>
 8004d12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d11b      	bne.n	8004d52 <vTaskStartScheduler+0x66>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d2e:	4b16      	ldr	r3, [pc, #88]	@ (8004d88 <vTaskStartScheduler+0x9c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	334c      	adds	r3, #76	@ 0x4c
 8004d34:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <vTaskStartScheduler+0xa0>)
 8004d36:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d38:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <vTaskStartScheduler+0xa4>)
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d40:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <vTaskStartScheduler+0xa8>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d46:	4b14      	ldr	r3, [pc, #80]	@ (8004d98 <vTaskStartScheduler+0xac>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d4c:	f001 f8b0 	bl	8005eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d50:	e00f      	b.n	8004d72 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d58:	d10b      	bne.n	8004d72 <vTaskStartScheduler+0x86>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <vTaskStartScheduler+0x82>
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200004c8 	.word	0x200004c8
 8004d80:	08006850 	.word	0x08006850
 8004d84:	080053c9 	.word	0x080053c9
 8004d88:	200001b0 	.word	0x200001b0
 8004d8c:	2000001c 	.word	0x2000001c
 8004d90:	200004c4 	.word	0x200004c4
 8004d94:	200004b0 	.word	0x200004b0
 8004d98:	200004a8 	.word	0x200004a8

08004d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <vTaskSuspendAll+0x18>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a03      	ldr	r2, [pc, #12]	@ (8004db4 <vTaskSuspendAll+0x18>)
 8004da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004daa:	bf00      	nop
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	200004cc 	.word	0x200004cc

08004db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dc6:	4b42      	ldr	r3, [pc, #264]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10b      	bne.n	8004de6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	603b      	str	r3, [r7, #0]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de6:	f001 f907 	bl	8005ff8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dea:	4b39      	ldr	r3, [pc, #228]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a37      	ldr	r2, [pc, #220]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df4:	4b36      	ldr	r3, [pc, #216]	@ (8004ed0 <xTaskResumeAll+0x118>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d161      	bne.n	8004ec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dfc:	4b35      	ldr	r3, [pc, #212]	@ (8004ed4 <xTaskResumeAll+0x11c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05d      	beq.n	8004ec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e04:	e02e      	b.n	8004e64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e06:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <xTaskResumeAll+0x120>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3318      	adds	r3, #24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff f88e 	bl	8003f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f889 	bl	8003f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <xTaskResumeAll+0x124>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <xTaskResumeAll+0x124>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4a27      	ldr	r2, [pc, #156]	@ (8004ee0 <xTaskResumeAll+0x128>)
 8004e42:	441a      	add	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7ff f815 	bl	8003e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e54:	4b23      	ldr	r3, [pc, #140]	@ (8004ee4 <xTaskResumeAll+0x12c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d302      	bcc.n	8004e64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ee8 <xTaskResumeAll+0x130>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <xTaskResumeAll+0x120>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1cc      	bne.n	8004e06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e72:	f000 fb45 	bl	8005500 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e76:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <xTaskResumeAll+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d010      	beq.n	8004ea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e82:	f000 f847 	bl	8004f14 <xTaskIncrementTick>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e8c:	4b16      	ldr	r3, [pc, #88]	@ (8004ee8 <xTaskResumeAll+0x130>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1f1      	bne.n	8004e82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	@ (8004eec <xTaskResumeAll+0x134>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea4:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <xTaskResumeAll+0x130>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef0 <xTaskResumeAll+0x138>)
 8004eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec0:	f001 f8cc 	bl	800605c <vPortExitCritical>

	return xAlreadyYielded;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	200004cc 	.word	0x200004cc
 8004ed4:	200004a4 	.word	0x200004a4
 8004ed8:	20000464 	.word	0x20000464
 8004edc:	200004ac 	.word	0x200004ac
 8004ee0:	200001b4 	.word	0x200001b4
 8004ee4:	200001b0 	.word	0x200001b0
 8004ee8:	200004b8 	.word	0x200004b8
 8004eec:	200004b4 	.word	0x200004b4
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004efa:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <xTaskGetTickCount+0x1c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	200004a8 	.word	0x200004a8

08004f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b4f      	ldr	r3, [pc, #316]	@ (800505c <xTaskIncrementTick+0x148>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 808f 	bne.w	8005046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f28:	4b4d      	ldr	r3, [pc, #308]	@ (8005060 <xTaskIncrementTick+0x14c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f30:	4a4b      	ldr	r2, [pc, #300]	@ (8005060 <xTaskIncrementTick+0x14c>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d121      	bne.n	8004f80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f3c:	4b49      	ldr	r3, [pc, #292]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <xTaskIncrementTick+0x46>
 8004f5e:	4b41      	ldr	r3, [pc, #260]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <xTaskIncrementTick+0x154>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3e      	ldr	r2, [pc, #248]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8005068 <xTaskIncrementTick+0x154>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	4b3e      	ldr	r3, [pc, #248]	@ (800506c <xTaskIncrementTick+0x158>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a3c      	ldr	r2, [pc, #240]	@ (800506c <xTaskIncrementTick+0x158>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	f000 fac0 	bl	8005500 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f80:	4b3b      	ldr	r3, [pc, #236]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d348      	bcc.n	800501c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f94:	4b36      	ldr	r3, [pc, #216]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f9a:	601a      	str	r2, [r3, #0]
					break;
 8004f9c:	e03e      	b.n	800501c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b31      	ldr	r3, [pc, #196]	@ (8005064 <xTaskIncrementTick+0x150>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d203      	bcs.n	8004fbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	@ (8005070 <xTaskIncrementTick+0x15c>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fbc:	e02e      	b.n	800501c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe ffb6 	bl	8003f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3318      	adds	r3, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe ffad 	bl	8003f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	2201      	movs	r2, #1
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <xTaskIncrementTick+0x160>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	4a22      	ldr	r2, [pc, #136]	@ (8005074 <xTaskIncrementTick+0x160>)
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <xTaskIncrementTick+0x164>)
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7fe ff39 	bl	8003e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500c:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <xTaskIncrementTick+0x168>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	429a      	cmp	r2, r3
 8005014:	d3b9      	bcc.n	8004f8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005016:	2301      	movs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800501a:	e7b6      	b.n	8004f8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800501c:	4b17      	ldr	r3, [pc, #92]	@ (800507c <xTaskIncrementTick+0x168>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005022:	4915      	ldr	r1, [pc, #84]	@ (8005078 <xTaskIncrementTick+0x164>)
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d901      	bls.n	8005038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005038:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <xTaskIncrementTick+0x16c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	e004      	b.n	8005050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005046:	4b0f      	ldr	r3, [pc, #60]	@ (8005084 <xTaskIncrementTick+0x170>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	4a0d      	ldr	r2, [pc, #52]	@ (8005084 <xTaskIncrementTick+0x170>)
 800504e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	200004cc 	.word	0x200004cc
 8005060:	200004a8 	.word	0x200004a8
 8005064:	2000045c 	.word	0x2000045c
 8005068:	20000460 	.word	0x20000460
 800506c:	200004bc 	.word	0x200004bc
 8005070:	200004c4 	.word	0x200004c4
 8005074:	200004ac 	.word	0x200004ac
 8005078:	200001b4 	.word	0x200001b4
 800507c:	200001b0 	.word	0x200001b0
 8005080:	200004b8 	.word	0x200004b8
 8005084:	200004b4 	.word	0x200004b4

08005088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800508e:	4b2a      	ldr	r3, [pc, #168]	@ (8005138 <vTaskSwitchContext+0xb0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005096:	4b29      	ldr	r3, [pc, #164]	@ (800513c <vTaskSwitchContext+0xb4>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800509c:	e045      	b.n	800512a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800509e:	4b27      	ldr	r3, [pc, #156]	@ (800513c <vTaskSwitchContext+0xb4>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a4:	4b26      	ldr	r3, [pc, #152]	@ (8005140 <vTaskSwitchContext+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	fab3 f383 	clz	r3, r3
 80050b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	f1c3 031f 	rsb	r3, r3, #31
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	4922      	ldr	r1, [pc, #136]	@ (8005144 <vTaskSwitchContext+0xbc>)
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <vTaskSwitchContext+0x5a>
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4a14      	ldr	r2, [pc, #80]	@ (8005144 <vTaskSwitchContext+0xbc>)
 80050f2:	4413      	add	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3308      	adds	r3, #8
 8005108:	429a      	cmp	r2, r3
 800510a:	d104      	bne.n	8005116 <vTaskSwitchContext+0x8e>
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <vTaskSwitchContext+0xc0>)
 800511e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005120:	4b09      	ldr	r3, [pc, #36]	@ (8005148 <vTaskSwitchContext+0xc0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	334c      	adds	r3, #76	@ 0x4c
 8005126:	4a09      	ldr	r2, [pc, #36]	@ (800514c <vTaskSwitchContext+0xc4>)
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	200004cc 	.word	0x200004cc
 800513c:	200004b8 	.word	0x200004b8
 8005140:	200004ac 	.word	0x200004ac
 8005144:	200001b4 	.word	0x200001b4
 8005148:	200001b0 	.word	0x200001b0
 800514c:	2000001c 	.word	0x2000001c

08005150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10b      	bne.n	8005178 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60fb      	str	r3, [r7, #12]
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	e7fd      	b.n	8005174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005178:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <vTaskPlaceOnEventList+0x48>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3318      	adds	r3, #24
 800517e:	4619      	mov	r1, r3
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fe fe9e 	bl	8003ec2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005186:	2101      	movs	r1, #1
 8005188:	6838      	ldr	r0, [r7, #0]
 800518a:	f000 fa7f 	bl	800568c <prvAddCurrentTaskToDelayedList>
}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	200001b0 	.word	0x200001b0

0800519c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10b      	bne.n	80051c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	617b      	str	r3, [r7, #20]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3318      	adds	r3, #24
 80051cc:	4619      	mov	r1, r3
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7fe fe53 	bl	8003e7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80051da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f000 fa52 	bl	800568c <prvAddCurrentTaskToDelayedList>
	}
 80051e8:	bf00      	nop
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200001b0 	.word	0x200001b0

080051f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	60fb      	str	r3, [r7, #12]
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	3318      	adds	r3, #24
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fe84 	bl	8003f34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800522c:	4b1d      	ldr	r3, [pc, #116]	@ (80052a4 <xTaskRemoveFromEventList+0xb0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11c      	bne.n	800526e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f7fe fe7b 	bl	8003f34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	2201      	movs	r2, #1
 8005244:	409a      	lsls	r2, r3
 8005246:	4b18      	ldr	r3, [pc, #96]	@ (80052a8 <xTaskRemoveFromEventList+0xb4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	4a16      	ldr	r2, [pc, #88]	@ (80052a8 <xTaskRemoveFromEventList+0xb4>)
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4a13      	ldr	r2, [pc, #76]	@ (80052ac <xTaskRemoveFromEventList+0xb8>)
 800525e:	441a      	add	r2, r3
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	3304      	adds	r3, #4
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f7fe fe07 	bl	8003e7a <vListInsertEnd>
 800526c:	e005      	b.n	800527a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3318      	adds	r3, #24
 8005272:	4619      	mov	r1, r3
 8005274:	480e      	ldr	r0, [pc, #56]	@ (80052b0 <xTaskRemoveFromEventList+0xbc>)
 8005276:	f7fe fe00 	bl	8003e7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <xTaskRemoveFromEventList+0xc0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	429a      	cmp	r2, r3
 8005286:	d905      	bls.n	8005294 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800528c:	4b0a      	ldr	r3, [pc, #40]	@ (80052b8 <xTaskRemoveFromEventList+0xc4>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e001      	b.n	8005298 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005298:	697b      	ldr	r3, [r7, #20]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200004cc 	.word	0x200004cc
 80052a8:	200004ac 	.word	0x200004ac
 80052ac:	200001b4 	.word	0x200001b4
 80052b0:	20000464 	.word	0x20000464
 80052b4:	200001b0 	.word	0x200001b0
 80052b8:	200004b8 	.word	0x200004b8

080052bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052c4:	4b06      	ldr	r3, [pc, #24]	@ (80052e0 <vTaskInternalSetTimeOutState+0x24>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052cc:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <vTaskInternalSetTimeOutState+0x28>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr
 80052e0:	200004bc 	.word	0x200004bc
 80052e4:	200004a8 	.word	0x200004a8

080052e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	613b      	str	r3, [r7, #16]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10b      	bne.n	800532e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	60fb      	str	r3, [r7, #12]
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	e7fd      	b.n	800532a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800532e:	f000 fe63 	bl	8005ff8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005332:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <xTaskCheckForTimeOut+0xc0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800534a:	d102      	bne.n	8005352 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e023      	b.n	800539a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b15      	ldr	r3, [pc, #84]	@ (80053ac <xTaskCheckForTimeOut+0xc4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d007      	beq.n	800536e <xTaskCheckForTimeOut+0x86>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	429a      	cmp	r2, r3
 8005366:	d302      	bcc.n	800536e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e015      	b.n	800539a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	429a      	cmp	r2, r3
 8005376:	d20b      	bcs.n	8005390 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ff99 	bl	80052bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	e004      	b.n	800539a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005396:	2301      	movs	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800539a:	f000 fe5f 	bl	800605c <vPortExitCritical>

	return xReturn;
 800539e:	69fb      	ldr	r3, [r7, #28]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200004a8 	.word	0x200004a8
 80053ac:	200004bc 	.word	0x200004bc

080053b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053b4:	4b03      	ldr	r3, [pc, #12]	@ (80053c4 <vTaskMissedYield+0x14>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	200004b8 	.word	0x200004b8

080053c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053d0:	f000 f852 	bl	8005478 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053d4:	4b06      	ldr	r3, [pc, #24]	@ (80053f0 <prvIdleTask+0x28>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d9f9      	bls.n	80053d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <prvIdleTask+0x2c>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053ec:	e7f0      	b.n	80053d0 <prvIdleTask+0x8>
 80053ee:	bf00      	nop
 80053f0:	200001b4 	.word	0x200001b4
 80053f4:	e000ed04 	.word	0xe000ed04

080053f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053fe:	2300      	movs	r3, #0
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	e00c      	b.n	800541e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <prvInitialiseTaskLists+0x60>)
 8005410:	4413      	add	r3, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fd04 	bl	8003e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3301      	adds	r3, #1
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b1f      	cmp	r3, #31
 8005422:	d9ef      	bls.n	8005404 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005424:	480d      	ldr	r0, [pc, #52]	@ (800545c <prvInitialiseTaskLists+0x64>)
 8005426:	f7fe fcfb 	bl	8003e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800542a:	480d      	ldr	r0, [pc, #52]	@ (8005460 <prvInitialiseTaskLists+0x68>)
 800542c:	f7fe fcf8 	bl	8003e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005430:	480c      	ldr	r0, [pc, #48]	@ (8005464 <prvInitialiseTaskLists+0x6c>)
 8005432:	f7fe fcf5 	bl	8003e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005436:	480c      	ldr	r0, [pc, #48]	@ (8005468 <prvInitialiseTaskLists+0x70>)
 8005438:	f7fe fcf2 	bl	8003e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800543c:	480b      	ldr	r0, [pc, #44]	@ (800546c <prvInitialiseTaskLists+0x74>)
 800543e:	f7fe fcef 	bl	8003e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005442:	4b0b      	ldr	r3, [pc, #44]	@ (8005470 <prvInitialiseTaskLists+0x78>)
 8005444:	4a05      	ldr	r2, [pc, #20]	@ (800545c <prvInitialiseTaskLists+0x64>)
 8005446:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005448:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <prvInitialiseTaskLists+0x7c>)
 800544a:	4a05      	ldr	r2, [pc, #20]	@ (8005460 <prvInitialiseTaskLists+0x68>)
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200001b4 	.word	0x200001b4
 800545c:	20000434 	.word	0x20000434
 8005460:	20000448 	.word	0x20000448
 8005464:	20000464 	.word	0x20000464
 8005468:	20000478 	.word	0x20000478
 800546c:	20000490 	.word	0x20000490
 8005470:	2000045c 	.word	0x2000045c
 8005474:	20000460 	.word	0x20000460

08005478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800547e:	e019      	b.n	80054b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005480:	f000 fdba 	bl	8005ff8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005484:	4b10      	ldr	r3, [pc, #64]	@ (80054c8 <prvCheckTasksWaitingTermination+0x50>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4618      	mov	r0, r3
 8005492:	f7fe fd4f 	bl	8003f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <prvCheckTasksWaitingTermination+0x54>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	4a0b      	ldr	r2, [pc, #44]	@ (80054cc <prvCheckTasksWaitingTermination+0x54>)
 800549e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <prvCheckTasksWaitingTermination+0x58>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	4a0a      	ldr	r2, [pc, #40]	@ (80054d0 <prvCheckTasksWaitingTermination+0x58>)
 80054a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054aa:	f000 fdd7 	bl	800605c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f810 	bl	80054d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b4:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <prvCheckTasksWaitingTermination+0x58>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e1      	bne.n	8005480 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000478 	.word	0x20000478
 80054cc:	200004a4 	.word	0x200004a4
 80054d0:	2000048c 	.word	0x2000048c

080054d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	334c      	adds	r3, #76	@ 0x4c
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 f8a1 	bl	8006628 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 ff74 	bl	80063d8 <vPortFree>
			vPortFree( pxTCB );
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 ff71 	bl	80063d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005506:	4b0c      	ldr	r3, [pc, #48]	@ (8005538 <prvResetNextTaskUnblockTime+0x38>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005510:	4b0a      	ldr	r3, [pc, #40]	@ (800553c <prvResetNextTaskUnblockTime+0x3c>)
 8005512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005516:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005518:	e008      	b.n	800552c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551a:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <prvResetNextTaskUnblockTime+0x38>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a04      	ldr	r2, [pc, #16]	@ (800553c <prvResetNextTaskUnblockTime+0x3c>)
 800552a:	6013      	str	r3, [r2, #0]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	2000045c 	.word	0x2000045c
 800553c:	200004c4 	.word	0x200004c4

08005540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <xTaskGetSchedulerState+0x34>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800554e:	2301      	movs	r3, #1
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	e008      	b.n	8005566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005554:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <xTaskGetSchedulerState+0x38>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800555c:	2302      	movs	r3, #2
 800555e:	607b      	str	r3, [r7, #4]
 8005560:	e001      	b.n	8005566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005562:	2300      	movs	r3, #0
 8005564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005566:	687b      	ldr	r3, [r7, #4]
	}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	200004b0 	.word	0x200004b0
 8005578:	200004cc 	.word	0x200004cc

0800557c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d070      	beq.n	8005674 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005592:	4b3b      	ldr	r3, [pc, #236]	@ (8005680 <xTaskPriorityDisinherit+0x104>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d00b      	beq.n	80055b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60fb      	str	r3, [r7, #12]
}
 80055ae:	bf00      	nop
 80055b0:	bf00      	nop
 80055b2:	e7fd      	b.n	80055b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60bb      	str	r3, [r7, #8]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d044      	beq.n	8005674 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d140      	bne.n	8005674 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fc9c 	bl	8003f34 <uxListRemove>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d115      	bne.n	800562e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005606:	491f      	ldr	r1, [pc, #124]	@ (8005684 <xTaskPriorityDisinherit+0x108>)
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <xTaskPriorityDisinherit+0xb2>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	2201      	movs	r2, #1
 800561e:	fa02 f303 	lsl.w	r3, r2, r3
 8005622:	43da      	mvns	r2, r3
 8005624:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <xTaskPriorityDisinherit+0x10c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4013      	ands	r3, r2
 800562a:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <xTaskPriorityDisinherit+0x10c>)
 800562c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563a:	f1c3 0220 	rsb	r2, r3, #32
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005646:	2201      	movs	r2, #1
 8005648:	409a      	lsls	r2, r3
 800564a:	4b0f      	ldr	r3, [pc, #60]	@ (8005688 <xTaskPriorityDisinherit+0x10c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	4a0d      	ldr	r2, [pc, #52]	@ (8005688 <xTaskPriorityDisinherit+0x10c>)
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4a08      	ldr	r2, [pc, #32]	@ (8005684 <xTaskPriorityDisinherit+0x108>)
 8005662:	441a      	add	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	4610      	mov	r0, r2
 800566c:	f7fe fc05 	bl	8003e7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005670:	2301      	movs	r3, #1
 8005672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005674:	697b      	ldr	r3, [r7, #20]
	}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	200001b0 	.word	0x200001b0
 8005684:	200001b4 	.word	0x200001b4
 8005688:	200004ac 	.word	0x200004ac

0800568c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005696:	4b29      	ldr	r3, [pc, #164]	@ (800573c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800569c:	4b28      	ldr	r3, [pc, #160]	@ (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fc46 	bl	8003f34 <uxListRemove>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056ae:	4b24      	ldr	r3, [pc, #144]	@ (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	2201      	movs	r2, #1
 80056b6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ba:	43da      	mvns	r2, r3
 80056bc:	4b21      	ldr	r3, [pc, #132]	@ (8005744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4013      	ands	r3, r2
 80056c2:	4a20      	ldr	r2, [pc, #128]	@ (8005744 <prvAddCurrentTaskToDelayedList+0xb8>)
 80056c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056cc:	d10a      	bne.n	80056e4 <prvAddCurrentTaskToDelayedList+0x58>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	481a      	ldr	r0, [pc, #104]	@ (8005748 <prvAddCurrentTaskToDelayedList+0xbc>)
 80056de:	f7fe fbcc 	bl	8003e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80056e2:	e026      	b.n	8005732 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056ec:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d209      	bcs.n	8005710 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056fc:	4b13      	ldr	r3, [pc, #76]	@ (800574c <prvAddCurrentTaskToDelayedList+0xc0>)
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3304      	adds	r3, #4
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f7fe fbda 	bl	8003ec2 <vListInsert>
}
 800570e:	e010      	b.n	8005732 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005710:	4b0f      	ldr	r3, [pc, #60]	@ (8005750 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	4b0a      	ldr	r3, [pc, #40]	@ (8005740 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3304      	adds	r3, #4
 800571a:	4619      	mov	r1, r3
 800571c:	4610      	mov	r0, r2
 800571e:	f7fe fbd0 	bl	8003ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005722:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d202      	bcs.n	8005732 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800572c:	4a09      	ldr	r2, [pc, #36]	@ (8005754 <prvAddCurrentTaskToDelayedList+0xc8>)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6013      	str	r3, [r2, #0]
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	200004a8 	.word	0x200004a8
 8005740:	200001b0 	.word	0x200001b0
 8005744:	200004ac 	.word	0x200004ac
 8005748:	20000490 	.word	0x20000490
 800574c:	20000460 	.word	0x20000460
 8005750:	2000045c 	.word	0x2000045c
 8005754:	200004c4 	.word	0x200004c4

08005758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800575e:	2300      	movs	r3, #0
 8005760:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005762:	f000 fae1 	bl	8005d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005766:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <xTimerCreateTimerTask+0x58>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800576e:	4b11      	ldr	r3, [pc, #68]	@ (80057b4 <xTimerCreateTimerTask+0x5c>)
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	2302      	movs	r3, #2
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800577c:	490e      	ldr	r1, [pc, #56]	@ (80057b8 <xTimerCreateTimerTask+0x60>)
 800577e:	480f      	ldr	r0, [pc, #60]	@ (80057bc <xTimerCreateTimerTask+0x64>)
 8005780:	f7ff f8b2 	bl	80048e8 <xTaskCreate>
 8005784:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	603b      	str	r3, [r7, #0]
}
 800579e:	bf00      	nop
 80057a0:	bf00      	nop
 80057a2:	e7fd      	b.n	80057a0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80057a4:	687b      	ldr	r3, [r7, #4]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000500 	.word	0x20000500
 80057b4:	20000504 	.word	0x20000504
 80057b8:	08006858 	.word	0x08006858
 80057bc:	080058f9 	.word	0x080058f9

080057c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	@ 0x28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <xTimerGenericCommand+0x30>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623b      	str	r3, [r7, #32]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80057f0:	4b19      	ldr	r3, [pc, #100]	@ (8005858 <xTimerGenericCommand+0x98>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02a      	beq.n	800584e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b05      	cmp	r3, #5
 8005808:	dc18      	bgt.n	800583c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800580a:	f7ff fe99 	bl	8005540 <xTaskGetSchedulerState>
 800580e:	4603      	mov	r3, r0
 8005810:	2b02      	cmp	r3, #2
 8005812:	d109      	bne.n	8005828 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <xTimerGenericCommand+0x98>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	f107 0114 	add.w	r1, r7, #20
 800581c:	2300      	movs	r3, #0
 800581e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005820:	f7fe fc72 	bl	8004108 <xQueueGenericSend>
 8005824:	6278      	str	r0, [r7, #36]	@ 0x24
 8005826:	e012      	b.n	800584e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005828:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <xTimerGenericCommand+0x98>)
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	f107 0114 	add.w	r1, r7, #20
 8005830:	2300      	movs	r3, #0
 8005832:	2200      	movs	r2, #0
 8005834:	f7fe fc68 	bl	8004108 <xQueueGenericSend>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24
 800583a:	e008      	b.n	800584e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800583c:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <xTimerGenericCommand+0x98>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	f107 0114 	add.w	r1, r7, #20
 8005844:	2300      	movs	r3, #0
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	f7fe fd60 	bl	800430c <xQueueGenericSendFromISR>
 800584c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005850:	4618      	mov	r0, r3
 8005852:	3728      	adds	r7, #40	@ 0x28
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000500 	.word	0x20000500

0800585c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005866:	4b23      	ldr	r3, [pc, #140]	@ (80058f4 <prvProcessExpiredTimer+0x98>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	3304      	adds	r3, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f7fe fb5d 	bl	8003f34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d023      	beq.n	80058d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	18d1      	adds	r1, r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	6978      	ldr	r0, [r7, #20]
 8005896:	f000 f8d5 	bl	8005a44 <prvInsertTimerInActiveList>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d020      	beq.n	80058e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058a0:	2300      	movs	r3, #0
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	2100      	movs	r1, #0
 80058aa:	6978      	ldr	r0, [r7, #20]
 80058ac:	f7ff ff88 	bl	80057c0 <xTimerGenericCommand>
 80058b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d114      	bne.n	80058e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	60fb      	str	r3, [r7, #12]
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	4798      	blx	r3
}
 80058ea:	bf00      	nop
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	200004f8 	.word	0x200004f8

080058f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005900:	f107 0308 	add.w	r3, r7, #8
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f859 	bl	80059bc <prvGetNextExpireTime>
 800590a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4619      	mov	r1, r3
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f805 	bl	8005920 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005916:	f000 f8d7 	bl	8005ac8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800591a:	bf00      	nop
 800591c:	e7f0      	b.n	8005900 <prvTimerTask+0x8>
	...

08005920 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800592a:	f7ff fa37 	bl	8004d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800592e:	f107 0308 	add.w	r3, r7, #8
 8005932:	4618      	mov	r0, r3
 8005934:	f000 f866 	bl	8005a04 <prvSampleTimeNow>
 8005938:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d130      	bne.n	80059a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <prvProcessTimerOrBlockTask+0x3c>
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	429a      	cmp	r2, r3
 800594c:	d806      	bhi.n	800595c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800594e:	f7ff fa33 	bl	8004db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff ff81 	bl	800585c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800595a:	e024      	b.n	80059a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005962:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <prvProcessTimerOrBlockTask+0x90>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <prvProcessTimerOrBlockTask+0x50>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <prvProcessTimerOrBlockTask+0x52>
 8005970:	2300      	movs	r3, #0
 8005972:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005974:	4b0f      	ldr	r3, [pc, #60]	@ (80059b4 <prvProcessTimerOrBlockTask+0x94>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	f7fe ff7d 	bl	8004880 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005986:	f7ff fa17 	bl	8004db8 <xTaskResumeAll>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005990:	4b09      	ldr	r3, [pc, #36]	@ (80059b8 <prvProcessTimerOrBlockTask+0x98>)
 8005992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	f3bf 8f6f 	isb	sy
}
 80059a0:	e001      	b.n	80059a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059a2:	f7ff fa09 	bl	8004db8 <xTaskResumeAll>
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	200004fc 	.word	0x200004fc
 80059b4:	20000500 	.word	0x20000500
 80059b8:	e000ed04 	.word	0xe000ed04

080059bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <prvGetNextExpireTime+0x44>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <prvGetNextExpireTime+0x16>
 80059ce:	2201      	movs	r2, #1
 80059d0:	e000      	b.n	80059d4 <prvGetNextExpireTime+0x18>
 80059d2:	2200      	movs	r2, #0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059e0:	4b07      	ldr	r3, [pc, #28]	@ (8005a00 <prvGetNextExpireTime+0x44>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	e001      	b.n	80059f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80059f0:	68fb      	ldr	r3, [r7, #12]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	200004f8 	.word	0x200004f8

08005a04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a0c:	f7ff fa72 	bl	8004ef4 <xTaskGetTickCount>
 8005a10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a12:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <prvSampleTimeNow+0x3c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d205      	bcs.n	8005a28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a1c:	f000 f91e 	bl	8005c5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e002      	b.n	8005a2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a2e:	4a04      	ldr	r2, [pc, #16]	@ (8005a40 <prvSampleTimeNow+0x3c>)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a34:	68fb      	ldr	r3, [r7, #12]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000508 	.word	0x20000508

08005a44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a52:	2300      	movs	r3, #0
 8005a54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d812      	bhi.n	8005a90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d302      	bcc.n	8005a7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e01b      	b.n	8005ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <prvInsertTimerInActiveList+0x7c>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7fe fa1a 	bl	8003ec2 <vListInsert>
 8005a8e:	e012      	b.n	8005ab6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d206      	bcs.n	8005aa6 <prvInsertTimerInActiveList+0x62>
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d302      	bcc.n	8005aa6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e007      	b.n	8005ab6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aa6:	4b07      	ldr	r3, [pc, #28]	@ (8005ac4 <prvInsertTimerInActiveList+0x80>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f7fe fa06 	bl	8003ec2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005ab6:	697b      	ldr	r3, [r7, #20]
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	200004fc 	.word	0x200004fc
 8005ac4:	200004f8 	.word	0x200004f8

08005ac8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08c      	sub	sp, #48	@ 0x30
 8005acc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ace:	e0b2      	b.n	8005c36 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f2c0 80af 	blt.w	8005c36 <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe fa23 	bl	8003f34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ff87 	bl	8005a04 <prvSampleTimeNow>
 8005af6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	f200 8098 	bhi.w	8005c30 <prvProcessReceivedCommands+0x168>
 8005b00:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <prvProcessReceivedCommands+0x40>)
 8005b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b06:	bf00      	nop
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b31 	.word	0x08005b31
 8005b14:	08005ba7 	.word	0x08005ba7
 8005b18:	08005bbb 	.word	0x08005bbb
 8005b1c:	08005c07 	.word	0x08005c07
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b31 	.word	0x08005b31
 8005b28:	08005ba7 	.word	0x08005ba7
 8005b2c:	08005bbb 	.word	0x08005bbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b36:	f043 0301 	orr.w	r3, r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	18d1      	adds	r1, r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a3a      	ldr	r2, [r7, #32]
 8005b4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b50:	f7ff ff78 	bl	8005a44 <prvInsertTimerInActiveList>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d06c      	beq.n	8005c34 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d061      	beq.n	8005c34 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	441a      	add	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b82:	f7ff fe1d 	bl	80057c0 <xTimerGenericCommand>
 8005b86:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d152      	bne.n	8005c34 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	61bb      	str	r3, [r7, #24]
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	e7fd      	b.n	8005ba2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005bb8:	e03d      	b.n	8005c36 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005bc0:	f043 0301 	orr.w	r3, r3, #1
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	617b      	str	r3, [r7, #20]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	18d1      	adds	r1, r2, r3
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	6a3a      	ldr	r2, [r7, #32]
 8005bfe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c00:	f7ff ff20 	bl	8005a44 <prvInsertTimerInActiveList>
					break;
 8005c04:	e017      	b.n	8005c36 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d103      	bne.n	8005c1c <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8005c14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c16:	f000 fbdf 	bl	80063d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c1a:	e00c      	b.n	8005c36 <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8005c2e:	e002      	b.n	8005c36 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8005c30:	bf00      	nop
 8005c32:	e000      	b.n	8005c36 <prvProcessReceivedCommands+0x16e>
					break;
 8005c34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c36:	4b08      	ldr	r3, [pc, #32]	@ (8005c58 <prvProcessReceivedCommands+0x190>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f107 0108 	add.w	r1, r7, #8
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fc01 	bl	8004448 <xQueueReceive>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f47f af41 	bne.w	8005ad0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005c4e:	bf00      	nop
 8005c50:	bf00      	nop
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20000500 	.word	0x20000500

08005c5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c62:	e049      	b.n	8005cf8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c64:	4b2e      	ldr	r3, [pc, #184]	@ (8005d20 <prvSwitchTimerLists+0xc4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d20 <prvSwitchTimerLists+0xc4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe f959 	bl	8003f34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02f      	beq.n	8005cf8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d90e      	bls.n	8005cc8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d20 <prvSwitchTimerLists+0xc4>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7fe f8fe 	bl	8003ec2 <vListInsert>
 8005cc6:	e017      	b.n	8005cf8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cc8:	2300      	movs	r3, #0
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fd74 	bl	80057c0 <xTimerGenericCommand>
 8005cd8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10b      	bne.n	8005cf8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	603b      	str	r3, [r7, #0]
}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cf8:	4b09      	ldr	r3, [pc, #36]	@ (8005d20 <prvSwitchTimerLists+0xc4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1b0      	bne.n	8005c64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d02:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <prvSwitchTimerLists+0xc4>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d08:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <prvSwitchTimerLists+0xc8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a04      	ldr	r2, [pc, #16]	@ (8005d20 <prvSwitchTimerLists+0xc4>)
 8005d0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d10:	4a04      	ldr	r2, [pc, #16]	@ (8005d24 <prvSwitchTimerLists+0xc8>)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	6013      	str	r3, [r2, #0]
}
 8005d16:	bf00      	nop
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200004f8 	.word	0x200004f8
 8005d24:	200004fc 	.word	0x200004fc

08005d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d2c:	f000 f964 	bl	8005ff8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d30:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <prvCheckForValidListAndQueue+0x54>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11d      	bne.n	8005d74 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d38:	4811      	ldr	r0, [pc, #68]	@ (8005d80 <prvCheckForValidListAndQueue+0x58>)
 8005d3a:	f7fe f871 	bl	8003e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d3e:	4811      	ldr	r0, [pc, #68]	@ (8005d84 <prvCheckForValidListAndQueue+0x5c>)
 8005d40:	f7fe f86e 	bl	8003e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d44:	4b10      	ldr	r3, [pc, #64]	@ (8005d88 <prvCheckForValidListAndQueue+0x60>)
 8005d46:	4a0e      	ldr	r2, [pc, #56]	@ (8005d80 <prvCheckForValidListAndQueue+0x58>)
 8005d48:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d4a:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <prvCheckForValidListAndQueue+0x64>)
 8005d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005d84 <prvCheckForValidListAndQueue+0x5c>)
 8005d4e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005d50:	2200      	movs	r2, #0
 8005d52:	210c      	movs	r1, #12
 8005d54:	200a      	movs	r0, #10
 8005d56:	f7fe f981 	bl	800405c <xQueueGenericCreate>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4a07      	ldr	r2, [pc, #28]	@ (8005d7c <prvCheckForValidListAndQueue+0x54>)
 8005d5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d60:	4b06      	ldr	r3, [pc, #24]	@ (8005d7c <prvCheckForValidListAndQueue+0x54>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d68:	4b04      	ldr	r3, [pc, #16]	@ (8005d7c <prvCheckForValidListAndQueue+0x54>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4908      	ldr	r1, [pc, #32]	@ (8005d90 <prvCheckForValidListAndQueue+0x68>)
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fd5c 	bl	800482c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d74:	f000 f972 	bl	800605c <vPortExitCritical>
}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20000500 	.word	0x20000500
 8005d80:	200004d0 	.word	0x200004d0
 8005d84:	200004e4 	.word	0x200004e4
 8005d88:	200004f8 	.word	0x200004f8
 8005d8c:	200004fc 	.word	0x200004fc
 8005d90:	08006860 	.word	0x08006860

08005d94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3b04      	subs	r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0201 	bic.w	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005df8 <pxPortInitialiseStack+0x64>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3b14      	subs	r3, #20
 8005dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f06f 0202 	mvn.w	r2, #2
 8005de2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3b20      	subs	r3, #32
 8005de8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dea:	68fb      	ldr	r3, [r7, #12]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	08005dfd 	.word	0x08005dfd

08005dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e06:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <prvTaskExitError+0x58>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e0e:	d00b      	beq.n	8005e28 <prvTaskExitError+0x2c>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <prvTaskExitError+0x28>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60bb      	str	r3, [r7, #8]
}
 8005e3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e3c:	bf00      	nop
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0fc      	beq.n	8005e3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000018 	.word	0x20000018
	...

08005e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <pxCurrentTCBConst2>)
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6a:	f380 8809 	msr	PSP, r0
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8811 	msr	BASEPRI, r0
 8005e7a:	4770      	bx	lr
 8005e7c:	f3af 8000 	nop.w

08005e80 <pxCurrentTCBConst2>:
 8005e80:	200001b0 	.word	0x200001b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e88:	4808      	ldr	r0, [pc, #32]	@ (8005eac <prvPortStartFirstTask+0x24>)
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	6800      	ldr	r0, [r0, #0]
 8005e8e:	f380 8808 	msr	MSP, r0
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8814 	msr	CONTROL, r0
 8005e9a:	b662      	cpsie	i
 8005e9c:	b661      	cpsie	f
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	df00      	svc	0
 8005ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eaa:	bf00      	nop
 8005eac:	e000ed08 	.word	0xe000ed08

08005eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005eb6:	4b47      	ldr	r3, [pc, #284]	@ (8005fd4 <xPortStartScheduler+0x124>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a47      	ldr	r2, [pc, #284]	@ (8005fd8 <xPortStartScheduler+0x128>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10b      	bne.n	8005ed8 <xPortStartScheduler+0x28>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	60fb      	str	r3, [r7, #12]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd4 <xPortStartScheduler+0x124>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a3f      	ldr	r2, [pc, #252]	@ (8005fdc <xPortStartScheduler+0x12c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10b      	bne.n	8005efa <xPortStartScheduler+0x4a>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	613b      	str	r3, [r7, #16]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005efa:	4b39      	ldr	r3, [pc, #228]	@ (8005fe0 <xPortStartScheduler+0x130>)
 8005efc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	22ff      	movs	r2, #255	@ 0xff
 8005f0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4b31      	ldr	r3, [pc, #196]	@ (8005fe4 <xPortStartScheduler+0x134>)
 8005f20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f22:	4b31      	ldr	r3, [pc, #196]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f24:	2207      	movs	r2, #7
 8005f26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f28:	e009      	b.n	8005f3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f46:	2b80      	cmp	r3, #128	@ 0x80
 8005f48:	d0ef      	beq.n	8005f2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f4a:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f1c3 0307 	rsb	r3, r3, #7
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00b      	beq.n	8005f6e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60bb      	str	r3, [r7, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	4a1c      	ldr	r2, [pc, #112]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f78:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f80:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <xPortStartScheduler+0x138>)
 8005f82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f8c:	4b17      	ldr	r3, [pc, #92]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a16      	ldr	r2, [pc, #88]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f98:	4b14      	ldr	r3, [pc, #80]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <xPortStartScheduler+0x13c>)
 8005f9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fa4:	f000 f8da 	bl	800615c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fa8:	4b11      	ldr	r3, [pc, #68]	@ (8005ff0 <xPortStartScheduler+0x140>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fae:	f000 f8f9 	bl	80061a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ff4 <xPortStartScheduler+0x144>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff4 <xPortStartScheduler+0x144>)
 8005fb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005fbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fbe:	f7ff ff63 	bl	8005e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fc2:	f7ff f861 	bl	8005088 <vTaskSwitchContext>
	prvTaskExitError();
 8005fc6:	f7ff ff19 	bl	8005dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	e000ed00 	.word	0xe000ed00
 8005fd8:	410fc271 	.word	0x410fc271
 8005fdc:	410fc270 	.word	0x410fc270
 8005fe0:	e000e400 	.word	0xe000e400
 8005fe4:	2000050c 	.word	0x2000050c
 8005fe8:	20000510 	.word	0x20000510
 8005fec:	e000ed20 	.word	0xe000ed20
 8005ff0:	20000018 	.word	0x20000018
 8005ff4:	e000ef34 	.word	0xe000ef34

08005ff8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	607b      	str	r3, [r7, #4]
}
 8006010:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006012:	4b10      	ldr	r3, [pc, #64]	@ (8006054 <vPortEnterCritical+0x5c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	4a0e      	ldr	r2, [pc, #56]	@ (8006054 <vPortEnterCritical+0x5c>)
 800601a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800601c:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <vPortEnterCritical+0x5c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d110      	bne.n	8006046 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006024:	4b0c      	ldr	r3, [pc, #48]	@ (8006058 <vPortEnterCritical+0x60>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <vPortEnterCritical+0x4e>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	603b      	str	r3, [r7, #0]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <vPortEnterCritical+0x4a>
	}
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000018 	.word	0x20000018
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <vPortExitCritical+0x50>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10b      	bne.n	8006082 <vPortExitCritical+0x26>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	607b      	str	r3, [r7, #4]
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	e7fd      	b.n	800607e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006082:	4b0a      	ldr	r3, [pc, #40]	@ (80060ac <vPortExitCritical+0x50>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3b01      	subs	r3, #1
 8006088:	4a08      	ldr	r2, [pc, #32]	@ (80060ac <vPortExitCritical+0x50>)
 800608a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800608c:	4b07      	ldr	r3, [pc, #28]	@ (80060ac <vPortExitCritical+0x50>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <vPortExitCritical+0x44>
 8006094:	2300      	movs	r3, #0
 8006096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f383 8811 	msr	BASEPRI, r3
}
 800609e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20000018 	.word	0x20000018

080060b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060b0:	f3ef 8009 	mrs	r0, PSP
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <pxCurrentTCBConst>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f01e 0f10 	tst.w	lr, #16
 80060c0:	bf08      	it	eq
 80060c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ca:	6010      	str	r0, [r2, #0]
 80060cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060d4:	f380 8811 	msr	BASEPRI, r0
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f7fe ffd2 	bl	8005088 <vTaskSwitchContext>
 80060e4:	f04f 0000 	mov.w	r0, #0
 80060e8:	f380 8811 	msr	BASEPRI, r0
 80060ec:	bc09      	pop	{r0, r3}
 80060ee:	6819      	ldr	r1, [r3, #0]
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f6:	f01e 0f10 	tst.w	lr, #16
 80060fa:	bf08      	it	eq
 80060fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006100:	f380 8809 	msr	PSP, r0
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	f3af 8000 	nop.w

08006110 <pxCurrentTCBConst>:
 8006110:	200001b0 	.word	0x200001b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop

08006118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
}
 8006130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006132:	f7fe feef 	bl	8004f14 <xTaskIncrementTick>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800613c:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <SysTick_Handler+0x40>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f383 8811 	msr	BASEPRI, r3
}
 800614e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006150:	bf00      	nop
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	e000ed04 	.word	0xe000ed04

0800615c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <vPortSetupTimerInterrupt+0x34>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006166:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <vPortSetupTimerInterrupt+0x38>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800616c:	4b0a      	ldr	r3, [pc, #40]	@ (8006198 <vPortSetupTimerInterrupt+0x3c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0a      	ldr	r2, [pc, #40]	@ (800619c <vPortSetupTimerInterrupt+0x40>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	099b      	lsrs	r3, r3, #6
 8006178:	4a09      	ldr	r2, [pc, #36]	@ (80061a0 <vPortSetupTimerInterrupt+0x44>)
 800617a:	3b01      	subs	r3, #1
 800617c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800617e:	4b04      	ldr	r3, [pc, #16]	@ (8006190 <vPortSetupTimerInterrupt+0x34>)
 8006180:	2207      	movs	r2, #7
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	bf00      	nop
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	e000e010 	.word	0xe000e010
 8006194:	e000e018 	.word	0xe000e018
 8006198:	2000000c 	.word	0x2000000c
 800619c:	10624dd3 	.word	0x10624dd3
 80061a0:	e000e014 	.word	0xe000e014

080061a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80061b4 <vPortEnableVFP+0x10>
 80061a8:	6801      	ldr	r1, [r0, #0]
 80061aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061ae:	6001      	str	r1, [r0, #0]
 80061b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061b2:	bf00      	nop
 80061b4:	e000ed88 	.word	0xe000ed88

080061b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061be:	f3ef 8305 	mrs	r3, IPSR
 80061c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b0f      	cmp	r3, #15
 80061c8:	d915      	bls.n	80061f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061ca:	4a18      	ldr	r2, [pc, #96]	@ (800622c <vPortValidateInterruptPriority+0x74>)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061d4:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <vPortValidateInterruptPriority+0x78>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	7afa      	ldrb	r2, [r7, #11]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d20b      	bcs.n	80061f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	607b      	str	r3, [r7, #4]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <vPortValidateInterruptPriority+0x7c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006238 <vPortValidateInterruptPriority+0x80>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90b      	bls.n	800621e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	603b      	str	r3, [r7, #0]
}
 8006218:	bf00      	nop
 800621a:	bf00      	nop
 800621c:	e7fd      	b.n	800621a <vPortValidateInterruptPriority+0x62>
	}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	e000e3f0 	.word	0xe000e3f0
 8006230:	2000050c 	.word	0x2000050c
 8006234:	e000ed0c 	.word	0xe000ed0c
 8006238:	20000510 	.word	0x20000510

0800623c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08a      	sub	sp, #40	@ 0x28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006248:	f7fe fda8 	bl	8004d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800624c:	4b5c      	ldr	r3, [pc, #368]	@ (80063c0 <pvPortMalloc+0x184>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006254:	f000 f924 	bl	80064a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006258:	4b5a      	ldr	r3, [pc, #360]	@ (80063c4 <pvPortMalloc+0x188>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8095 	bne.w	8006390 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800626c:	2208      	movs	r2, #8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4413      	add	r3, r2
 8006272:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	2b00      	cmp	r3, #0
 800627c:	d015      	beq.n	80062aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f023 0307 	bic.w	r3, r3, #7
 8006284:	3308      	adds	r3, #8
 8006286:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <pvPortMalloc+0x6e>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	617b      	str	r3, [r7, #20]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d06f      	beq.n	8006390 <pvPortMalloc+0x154>
 80062b0:	4b45      	ldr	r3, [pc, #276]	@ (80063c8 <pvPortMalloc+0x18c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d86a      	bhi.n	8006390 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062ba:	4b44      	ldr	r3, [pc, #272]	@ (80063cc <pvPortMalloc+0x190>)
 80062bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062be:	4b43      	ldr	r3, [pc, #268]	@ (80063cc <pvPortMalloc+0x190>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062c4:	e004      	b.n	80062d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d903      	bls.n	80062e2 <pvPortMalloc+0xa6>
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d1f1      	bne.n	80062c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062e2:	4b37      	ldr	r3, [pc, #220]	@ (80063c0 <pvPortMalloc+0x184>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d051      	beq.n	8006390 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2208      	movs	r2, #8
 80062f2:	4413      	add	r3, r2
 80062f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	2308      	movs	r3, #8
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	429a      	cmp	r2, r3
 800630c:	d920      	bls.n	8006350 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <pvPortMalloc+0xfc>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800634a:	69b8      	ldr	r0, [r7, #24]
 800634c:	f000 f90a 	bl	8006564 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006350:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <pvPortMalloc+0x18c>)
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <pvPortMalloc+0x18c>)
 800635c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800635e:	4b1a      	ldr	r3, [pc, #104]	@ (80063c8 <pvPortMalloc+0x18c>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	4b1b      	ldr	r3, [pc, #108]	@ (80063d0 <pvPortMalloc+0x194>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d203      	bcs.n	8006372 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800636a:	4b17      	ldr	r3, [pc, #92]	@ (80063c8 <pvPortMalloc+0x18c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <pvPortMalloc+0x194>)
 8006370:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4b13      	ldr	r3, [pc, #76]	@ (80063c4 <pvPortMalloc+0x188>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	431a      	orrs	r2, r3
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006386:	4b13      	ldr	r3, [pc, #76]	@ (80063d4 <pvPortMalloc+0x198>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3301      	adds	r3, #1
 800638c:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <pvPortMalloc+0x198>)
 800638e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006390:	f7fe fd12 	bl	8004db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <pvPortMalloc+0x17a>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <pvPortMalloc+0x176>
	return pvReturn;
 80063b6:	69fb      	ldr	r3, [r7, #28]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	@ 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	2000533c 	.word	0x2000533c
 80063c4:	20005350 	.word	0x20005350
 80063c8:	20005340 	.word	0x20005340
 80063cc:	20005334 	.word	0x20005334
 80063d0:	20005344 	.word	0x20005344
 80063d4:	20005348 	.word	0x20005348

080063d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d04f      	beq.n	800648a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063ea:	2308      	movs	r3, #8
 80063ec:	425b      	negs	r3, r3
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4413      	add	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4b25      	ldr	r3, [pc, #148]	@ (8006494 <vPortFree+0xbc>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4013      	ands	r3, r2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <vPortFree+0x46>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60fb      	str	r3, [r7, #12]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <vPortFree+0x66>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	60bb      	str	r3, [r7, #8]
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	e7fd      	b.n	800643a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	4b14      	ldr	r3, [pc, #80]	@ (8006494 <vPortFree+0xbc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4013      	ands	r3, r2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01e      	beq.n	800648a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d11a      	bne.n	800648a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	4b0e      	ldr	r3, [pc, #56]	@ (8006494 <vPortFree+0xbc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006464:	f7fe fc9a 	bl	8004d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <vPortFree+0xc0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4413      	add	r3, r2
 8006472:	4a09      	ldr	r2, [pc, #36]	@ (8006498 <vPortFree+0xc0>)
 8006474:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006476:	6938      	ldr	r0, [r7, #16]
 8006478:	f000 f874 	bl	8006564 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vPortFree+0xc4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	4a06      	ldr	r2, [pc, #24]	@ (800649c <vPortFree+0xc4>)
 8006484:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006486:	f7fe fc97 	bl	8004db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20005350 	.word	0x20005350
 8006498:	20005340 	.word	0x20005340
 800649c:	2000534c 	.word	0x2000534c

080064a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064a6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80064aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064ac:	4b27      	ldr	r3, [pc, #156]	@ (800654c <prvHeapInit+0xac>)
 80064ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00c      	beq.n	80064d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3307      	adds	r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0307 	bic.w	r3, r3, #7
 80064c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	4a1f      	ldr	r2, [pc, #124]	@ (800654c <prvHeapInit+0xac>)
 80064d0:	4413      	add	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <prvHeapInit+0xb0>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064de:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <prvHeapInit+0xb0>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064ec:	2208      	movs	r2, #8
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a15      	ldr	r2, [pc, #84]	@ (8006554 <prvHeapInit+0xb4>)
 8006500:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006502:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <prvHeapInit+0xb4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800650a:	4b12      	ldr	r3, [pc, #72]	@ (8006554 <prvHeapInit+0xb4>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006520:	4b0c      	ldr	r3, [pc, #48]	@ (8006554 <prvHeapInit+0xb4>)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <prvHeapInit+0xb8>)
 800652e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a09      	ldr	r2, [pc, #36]	@ (800655c <prvHeapInit+0xbc>)
 8006536:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <prvHeapInit+0xc0>)
 800653a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800653e:	601a      	str	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	20000514 	.word	0x20000514
 8006550:	20005334 	.word	0x20005334
 8006554:	2000533c 	.word	0x2000533c
 8006558:	20005344 	.word	0x20005344
 800655c:	20005340 	.word	0x20005340
 8006560:	20005350 	.word	0x20005350

08006564 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800656c:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <prvInsertBlockIntoFreeList+0xac>)
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e002      	b.n	8006578 <prvInsertBlockIntoFreeList+0x14>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d8f7      	bhi.n	8006572 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4413      	add	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d108      	bne.n	80065a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	441a      	add	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d118      	bne.n	80065ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	4b15      	ldr	r3, [pc, #84]	@ (8006614 <prvInsertBlockIntoFreeList+0xb0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d00d      	beq.n	80065e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	e008      	b.n	80065f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <prvInsertBlockIntoFreeList+0xb0>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e003      	b.n	80065f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d002      	beq.n	8006602 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20005334 	.word	0x20005334
 8006614:	2000533c 	.word	0x2000533c

08006618 <memset>:
 8006618:	4402      	add	r2, r0
 800661a:	4603      	mov	r3, r0
 800661c:	4293      	cmp	r3, r2
 800661e:	d100      	bne.n	8006622 <memset+0xa>
 8006620:	4770      	bx	lr
 8006622:	f803 1b01 	strb.w	r1, [r3], #1
 8006626:	e7f9      	b.n	800661c <memset+0x4>

08006628 <_reclaim_reent>:
 8006628:	4b2d      	ldr	r3, [pc, #180]	@ (80066e0 <_reclaim_reent+0xb8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4283      	cmp	r3, r0
 800662e:	b570      	push	{r4, r5, r6, lr}
 8006630:	4604      	mov	r4, r0
 8006632:	d053      	beq.n	80066dc <_reclaim_reent+0xb4>
 8006634:	69c3      	ldr	r3, [r0, #28]
 8006636:	b31b      	cbz	r3, 8006680 <_reclaim_reent+0x58>
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	b163      	cbz	r3, 8006656 <_reclaim_reent+0x2e>
 800663c:	2500      	movs	r5, #0
 800663e:	69e3      	ldr	r3, [r4, #28]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	5959      	ldr	r1, [r3, r5]
 8006644:	b9b1      	cbnz	r1, 8006674 <_reclaim_reent+0x4c>
 8006646:	3504      	adds	r5, #4
 8006648:	2d80      	cmp	r5, #128	@ 0x80
 800664a:	d1f8      	bne.n	800663e <_reclaim_reent+0x16>
 800664c:	69e3      	ldr	r3, [r4, #28]
 800664e:	4620      	mov	r0, r4
 8006650:	68d9      	ldr	r1, [r3, #12]
 8006652:	f000 f87b 	bl	800674c <_free_r>
 8006656:	69e3      	ldr	r3, [r4, #28]
 8006658:	6819      	ldr	r1, [r3, #0]
 800665a:	b111      	cbz	r1, 8006662 <_reclaim_reent+0x3a>
 800665c:	4620      	mov	r0, r4
 800665e:	f000 f875 	bl	800674c <_free_r>
 8006662:	69e3      	ldr	r3, [r4, #28]
 8006664:	689d      	ldr	r5, [r3, #8]
 8006666:	b15d      	cbz	r5, 8006680 <_reclaim_reent+0x58>
 8006668:	4629      	mov	r1, r5
 800666a:	4620      	mov	r0, r4
 800666c:	682d      	ldr	r5, [r5, #0]
 800666e:	f000 f86d 	bl	800674c <_free_r>
 8006672:	e7f8      	b.n	8006666 <_reclaim_reent+0x3e>
 8006674:	680e      	ldr	r6, [r1, #0]
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f868 	bl	800674c <_free_r>
 800667c:	4631      	mov	r1, r6
 800667e:	e7e1      	b.n	8006644 <_reclaim_reent+0x1c>
 8006680:	6961      	ldr	r1, [r4, #20]
 8006682:	b111      	cbz	r1, 800668a <_reclaim_reent+0x62>
 8006684:	4620      	mov	r0, r4
 8006686:	f000 f861 	bl	800674c <_free_r>
 800668a:	69e1      	ldr	r1, [r4, #28]
 800668c:	b111      	cbz	r1, 8006694 <_reclaim_reent+0x6c>
 800668e:	4620      	mov	r0, r4
 8006690:	f000 f85c 	bl	800674c <_free_r>
 8006694:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006696:	b111      	cbz	r1, 800669e <_reclaim_reent+0x76>
 8006698:	4620      	mov	r0, r4
 800669a:	f000 f857 	bl	800674c <_free_r>
 800669e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066a0:	b111      	cbz	r1, 80066a8 <_reclaim_reent+0x80>
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f852 	bl	800674c <_free_r>
 80066a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80066aa:	b111      	cbz	r1, 80066b2 <_reclaim_reent+0x8a>
 80066ac:	4620      	mov	r0, r4
 80066ae:	f000 f84d 	bl	800674c <_free_r>
 80066b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80066b4:	b111      	cbz	r1, 80066bc <_reclaim_reent+0x94>
 80066b6:	4620      	mov	r0, r4
 80066b8:	f000 f848 	bl	800674c <_free_r>
 80066bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80066be:	b111      	cbz	r1, 80066c6 <_reclaim_reent+0x9e>
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 f843 	bl	800674c <_free_r>
 80066c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80066c8:	b111      	cbz	r1, 80066d0 <_reclaim_reent+0xa8>
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 f83e 	bl	800674c <_free_r>
 80066d0:	6a23      	ldr	r3, [r4, #32]
 80066d2:	b11b      	cbz	r3, 80066dc <_reclaim_reent+0xb4>
 80066d4:	4620      	mov	r0, r4
 80066d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066da:	4718      	bx	r3
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	bf00      	nop
 80066e0:	2000001c 	.word	0x2000001c

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	@ (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006728 <__libc_init_array+0x44>)
 80066f8:	f000 f87e 	bl	80067f8 <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	080068b0 	.word	0x080068b0
 8006720:	080068b0 	.word	0x080068b0
 8006724:	080068b0 	.word	0x080068b0
 8006728:	080068b4 	.word	0x080068b4

0800672c <__retarget_lock_acquire_recursive>:
 800672c:	4770      	bx	lr

0800672e <__retarget_lock_release_recursive>:
 800672e:	4770      	bx	lr

08006730 <memcpy>:
 8006730:	440a      	add	r2, r1
 8006732:	4291      	cmp	r1, r2
 8006734:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006738:	d100      	bne.n	800673c <memcpy+0xc>
 800673a:	4770      	bx	lr
 800673c:	b510      	push	{r4, lr}
 800673e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006746:	4291      	cmp	r1, r2
 8006748:	d1f9      	bne.n	800673e <memcpy+0xe>
 800674a:	bd10      	pop	{r4, pc}

0800674c <_free_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4605      	mov	r5, r0
 8006750:	2900      	cmp	r1, #0
 8006752:	d041      	beq.n	80067d8 <_free_r+0x8c>
 8006754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006758:	1f0c      	subs	r4, r1, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	bfb8      	it	lt
 800675e:	18e4      	addlt	r4, r4, r3
 8006760:	f000 f83e 	bl	80067e0 <__malloc_lock>
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <_free_r+0x90>)
 8006766:	6813      	ldr	r3, [r2, #0]
 8006768:	b933      	cbnz	r3, 8006778 <_free_r+0x2c>
 800676a:	6063      	str	r3, [r4, #4]
 800676c:	6014      	str	r4, [r2, #0]
 800676e:	4628      	mov	r0, r5
 8006770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006774:	f000 b83a 	b.w	80067ec <__malloc_unlock>
 8006778:	42a3      	cmp	r3, r4
 800677a:	d908      	bls.n	800678e <_free_r+0x42>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	1821      	adds	r1, r4, r0
 8006780:	428b      	cmp	r3, r1
 8006782:	bf01      	itttt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	1809      	addeq	r1, r1, r0
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	e7ed      	b.n	800676a <_free_r+0x1e>
 800678e:	461a      	mov	r2, r3
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b10b      	cbz	r3, 8006798 <_free_r+0x4c>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d9fa      	bls.n	800678e <_free_r+0x42>
 8006798:	6811      	ldr	r1, [r2, #0]
 800679a:	1850      	adds	r0, r2, r1
 800679c:	42a0      	cmp	r0, r4
 800679e:	d10b      	bne.n	80067b8 <_free_r+0x6c>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	4401      	add	r1, r0
 80067a4:	1850      	adds	r0, r2, r1
 80067a6:	4283      	cmp	r3, r0
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	d1e0      	bne.n	800676e <_free_r+0x22>
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	6053      	str	r3, [r2, #4]
 80067b2:	4408      	add	r0, r1
 80067b4:	6010      	str	r0, [r2, #0]
 80067b6:	e7da      	b.n	800676e <_free_r+0x22>
 80067b8:	d902      	bls.n	80067c0 <_free_r+0x74>
 80067ba:	230c      	movs	r3, #12
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	e7d6      	b.n	800676e <_free_r+0x22>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	1821      	adds	r1, r4, r0
 80067c4:	428b      	cmp	r3, r1
 80067c6:	bf04      	itt	eq
 80067c8:	6819      	ldreq	r1, [r3, #0]
 80067ca:	685b      	ldreq	r3, [r3, #4]
 80067cc:	6063      	str	r3, [r4, #4]
 80067ce:	bf04      	itt	eq
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6054      	str	r4, [r2, #4]
 80067d6:	e7ca      	b.n	800676e <_free_r+0x22>
 80067d8:	bd38      	pop	{r3, r4, r5, pc}
 80067da:	bf00      	nop
 80067dc:	20005490 	.word	0x20005490

080067e0 <__malloc_lock>:
 80067e0:	4801      	ldr	r0, [pc, #4]	@ (80067e8 <__malloc_lock+0x8>)
 80067e2:	f7ff bfa3 	b.w	800672c <__retarget_lock_acquire_recursive>
 80067e6:	bf00      	nop
 80067e8:	2000548c 	.word	0x2000548c

080067ec <__malloc_unlock>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__malloc_unlock+0x8>)
 80067ee:	f7ff bf9e 	b.w	800672e <__retarget_lock_release_recursive>
 80067f2:	bf00      	nop
 80067f4:	2000548c 	.word	0x2000548c

080067f8 <_init>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr

08006804 <_fini>:
 8006804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006806:	bf00      	nop
 8006808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680a:	bc08      	pop	{r3}
 800680c:	469e      	mov	lr, r3
 800680e:	4770      	bx	lr


egg_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004994  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b6c  08004b6c  00005b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b84  08004b84  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004b84  08004b84  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004b84  08004b84  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b84  08004b84  00005b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b88  08004b88  00005b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b8c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08004b98  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004b98  00006210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d9d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002696  00000000  00000000  00017dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001a470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d97  00000000  00000000  0001b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee98  00000000  00000000  0001c3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001199c  00000000  00000000  0003b247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1a24  00000000  00000000  0004cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b74  00000000  00000000  0011e64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001231c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b54 	.word	0x08004b54

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004b54 	.word	0x08004b54

08000218 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC2_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < ADC_COUNT; i++)
 8000220:	2300      	movs	r3, #0
 8000222:	73fb      	strb	r3, [r7, #15]
 8000224:	e015      	b.n	8000252 <HAL_ADC_ConvCpltCallback+0x3a>
	{
		voltage_data[i] = ADC_RAW_TO_VOLTAGE * (float)adc_data[i];
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	4a0f      	ldr	r2, [pc, #60]	@ (8000268 <HAL_ADC_ConvCpltCallback+0x50>)
 800022a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800022e:	b29b      	uxth	r3, r3
 8000230:	ee07 3a90 	vmov	s15, r3
 8000234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000238:	7bfb      	ldrb	r3, [r7, #15]
 800023a:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800026c <HAL_ADC_ConvCpltCallback+0x54>
 800023e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000242:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <HAL_ADC_ConvCpltCallback+0x58>)
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	4413      	add	r3, r2
 8000248:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < ADC_COUNT; i++)
 800024c:	7bfb      	ldrb	r3, [r7, #15]
 800024e:	3301      	adds	r3, #1
 8000250:	73fb      	strb	r3, [r7, #15]
 8000252:	7bfb      	ldrb	r3, [r7, #15]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d9e6      	bls.n	8000226 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	200001ac 	.word	0x200001ac
 800026c:	3a534067 	.word	0x3a534067
 8000270:	200001b0 	.word	0x200001b0

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 fc3d 	bl	8000af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f826 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000280:	f000 f9ca 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 8000284:	f000 f99e 	bl	80005c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000288:	f000 f86a 	bl	8000360 <MX_ADC1_Init>
  MX_ADC2_Init();
 800028c:	f000 f8e6 	bl	800045c <MX_ADC2_Init>
  MX_TIM1_Init();
 8000290:	f000 f944 	bl	800051c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  //HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);

  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_data, ADC_COUNT);
 8000294:	2202      	movs	r2, #2
 8000296:	4908      	ldr	r1, [pc, #32]	@ (80002b8 <main+0x44>)
 8000298:	4808      	ldr	r0, [pc, #32]	@ (80002bc <main+0x48>)
 800029a:	f002 f85f 	bl	800235c <HAL_ADCEx_MultiModeStart_DMA>
  HAL_ADC_Start(&hadc2);
 800029e:	4808      	ldr	r0, [pc, #32]	@ (80002c0 <main+0x4c>)
 80002a0:	f001 f824 	bl	80012ec <HAL_ADC_Start>

  HAL_TIM_Base_Start(&htim1);
 80002a4:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <main+0x50>)
 80002a6:	f003 feeb 	bl	8004080 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  i++;
 80002aa:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <main+0x54>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	3301      	adds	r3, #1
 80002b0:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <main+0x54>)
 80002b2:	6013      	str	r3, [r2, #0]
 80002b4:	e7f9      	b.n	80002aa <main+0x36>
 80002b6:	bf00      	nop
 80002b8:	200001ac 	.word	0x200001ac
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000094 	.word	0x20000094
 80002c4:	20000160 	.word	0x20000160
 80002c8:	200001b8 	.word	0x200001b8

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	@ 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2238      	movs	r2, #56	@ 0x38
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f004 fc0e 	bl	8004afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f002 fe80 	bl	8002ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f4:	2301      	movs	r3, #1
 80002f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fe:	2302      	movs	r3, #2
 8000300:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000302:	2303      	movs	r3, #3
 8000304:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000306:	2306      	movs	r3, #6
 8000308:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800030a:	2355      	movs	r3, #85	@ 0x55
 800030c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000316:	2302      	movs	r3, #2
 8000318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	4618      	mov	r0, r3
 8000320:	f002 ff1c 	bl	800315c <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800032a:	f000 f9ab 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000332:	2303      	movs	r3, #3
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2104      	movs	r1, #4
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fa1a 	bl	8003780 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000352:	f000 f997 	bl	8000684 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3750      	adds	r7, #80	@ 0x50
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b08c      	sub	sp, #48	@ 0x30
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2220      	movs	r2, #32
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f004 fbbf 	bl	8004afc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800037e:	4b35      	ldr	r3, [pc, #212]	@ (8000454 <MX_ADC1_Init+0xf4>)
 8000380:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000384:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000386:	4b33      	ldr	r3, [pc, #204]	@ (8000454 <MX_ADC1_Init+0xf4>)
 8000388:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800038c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800038e:	4b31      	ldr	r3, [pc, #196]	@ (8000454 <MX_ADC1_Init+0xf4>)
 8000390:	2200      	movs	r2, #0
 8000392:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000394:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <MX_ADC1_Init+0xf4>)
 8000396:	2200      	movs	r2, #0
 8000398:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <MX_ADC1_Init+0xf4>)
 800039c:	2200      	movs	r2, #0
 800039e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003a8:	2204      	movs	r2, #4
 80003aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ac:	4b29      	ldr	r3, [pc, #164]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003b2:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003be:	4b25      	ldr	r3, [pc, #148]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80003c6:	4b23      	ldr	r3, [pc, #140]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003c8:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80003cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80003ce:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80003d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003de:	4b1d      	ldr	r3, [pc, #116]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ec:	4819      	ldr	r0, [pc, #100]	@ (8000454 <MX_ADC1_Init+0xf4>)
 80003ee:	f000 fdf9 	bl	8000fe4 <HAL_ADC_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80003f8:	f000 f944 	bl	8000684 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80003fc:	2306      	movs	r3, #6
 80003fe:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8000400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000404:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000406:	2300      	movs	r3, #0
 8000408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800040a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800040e:	4619      	mov	r1, r3
 8000410:	4810      	ldr	r0, [pc, #64]	@ (8000454 <MX_ADC1_Init+0xf4>)
 8000412:	f002 f877 	bl	8002504 <HAL_ADCEx_MultiModeConfigChannel>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 800041c:	f000 f932 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000420:	4b0d      	ldr	r3, [pc, #52]	@ (8000458 <MX_ADC1_Init+0xf8>)
 8000422:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000424:	2306      	movs	r3, #6
 8000426:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000428:	2306      	movs	r3, #6
 800042a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042c:	237f      	movs	r3, #127	@ 0x7f
 800042e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000430:	2304      	movs	r3, #4
 8000432:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_ADC1_Init+0xf4>)
 800043e:	f001 fa49 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000448:	f000 f91c 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3730      	adds	r7, #48	@ 0x30
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000028 	.word	0x20000028
 8000458:	04300002 	.word	0x04300002

0800045c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	463b      	mov	r3, r7
 8000464:	2220      	movs	r2, #32
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f004 fb47 	bl	8004afc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800046e:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_ADC2_Init+0xb4>)
 8000470:	4a28      	ldr	r2, [pc, #160]	@ (8000514 <MX_ADC2_Init+0xb8>)
 8000472:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000474:	4b26      	ldr	r3, [pc, #152]	@ (8000510 <MX_ADC2_Init+0xb4>)
 8000476:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800047a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800047c:	4b24      	ldr	r3, [pc, #144]	@ (8000510 <MX_ADC2_Init+0xb4>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000482:	4b23      	ldr	r3, [pc, #140]	@ (8000510 <MX_ADC2_Init+0xb4>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000488:	4b21      	ldr	r3, [pc, #132]	@ (8000510 <MX_ADC2_Init+0xb4>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800048e:	4b20      	ldr	r3, [pc, #128]	@ (8000510 <MX_ADC2_Init+0xb4>)
 8000490:	2200      	movs	r2, #0
 8000492:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000494:	4b1e      	ldr	r3, [pc, #120]	@ (8000510 <MX_ADC2_Init+0xb4>)
 8000496:	2204      	movs	r2, #4
 8000498:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800049a:	4b1d      	ldr	r3, [pc, #116]	@ (8000510 <MX_ADC2_Init+0xb4>)
 800049c:	2200      	movs	r2, #0
 800049e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80004b4:	4b16      	ldr	r3, [pc, #88]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80004c2:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80004ca:	4811      	ldr	r0, [pc, #68]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004cc:	f000 fd8a 	bl	8000fe4 <HAL_ADC_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80004d6:	f000 f8d5 	bl	8000684 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <MX_ADC2_Init+0xbc>)
 80004dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004de:	2306      	movs	r3, #6
 80004e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004e6:	237f      	movs	r3, #127	@ 0x7f
 80004e8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ea:	2304      	movs	r3, #4
 80004ec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	4806      	ldr	r0, [pc, #24]	@ (8000510 <MX_ADC2_Init+0xb4>)
 80004f8:	f001 f9ec 	bl	80018d4 <HAL_ADC_ConfigChannel>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000502:	f000 f8bf 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000094 	.word	0x20000094
 8000514:	50000100 	.word	0x50000100
 8000518:	0c900008 	.word	0x0c900008

0800051c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000522:	f107 0310 	add.w	r3, r7, #16
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800053a:	4b20      	ldr	r3, [pc, #128]	@ (80005bc <MX_TIM1_Init+0xa0>)
 800053c:	4a20      	ldr	r2, [pc, #128]	@ (80005c0 <MX_TIM1_Init+0xa4>)
 800053e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8000540:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <MX_TIM1_Init+0xa0>)
 8000542:	2204      	movs	r2, #4
 8000544:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <MX_TIM1_Init+0xa0>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10302;
 800054c:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <MX_TIM1_Init+0xa0>)
 800054e:	f642 023e 	movw	r2, #10302	@ 0x283e
 8000552:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000554:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_TIM1_Init+0xa0>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <MX_TIM1_Init+0xa0>)
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000560:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_TIM1_Init+0xa0>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000566:	4815      	ldr	r0, [pc, #84]	@ (80005bc <MX_TIM1_Init+0xa0>)
 8000568:	f003 fd32 	bl	8003fd0 <HAL_TIM_Base_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000572:	f000 f887 	bl	8000684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800057a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	480e      	ldr	r0, [pc, #56]	@ (80005bc <MX_TIM1_Init+0xa0>)
 8000584:	f003 ff98 	bl	80044b8 <HAL_TIM_ConfigClockSource>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800058e:	f000 f879 	bl	8000684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000592:	2320      	movs	r3, #32
 8000594:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <MX_TIM1_Init+0xa0>)
 80005a4:	f004 f9e2 	bl	800496c <HAL_TIMEx_MasterConfigSynchronization>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005ae:	f000 f869 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	3720      	adds	r7, #32
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000160 	.word	0x20000160
 80005c0:	40012c00 	.word	0x40012c00

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_DMA_Init+0x50>)
 80005cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ce:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <MX_DMA_Init+0x50>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_DMA_Init+0x50>)
 80005d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_DMA_Init+0x50>)
 80005e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000614 <MX_DMA_Init+0x50>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_DMA_Init+0x50>)
 80005f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200b      	movs	r0, #11
 8000600:	f002 f8dc 	bl	80027bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f002 f8f3 	bl	80027f0 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <MX_GPIO_Init+0x44>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <MX_GPIO_Init+0x44>)
 8000624:	f043 0320 	orr.w	r3, r3, #32
 8000628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <MX_GPIO_Init+0x44>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	f003 0320 	and.w	r3, r3, #32
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <MX_GPIO_Init+0x44>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <MX_GPIO_Init+0x44>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <MX_GPIO_Init+0x44>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d101      	bne.n	8000676 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000672:	f000 fa59 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40014800 	.word	0x40014800

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <Error_Handler+0x8>

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <HAL_MspInit+0x44>)
 8000698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800069a:	4a0e      	ldr	r2, [pc, #56]	@ (80006d4 <HAL_MspInit+0x44>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <HAL_MspInit+0x44>)
 80006a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <HAL_MspInit+0x44>)
 80006b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b2:	4a08      	ldr	r2, [pc, #32]	@ (80006d4 <HAL_MspInit+0x44>)
 80006b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_MspInit+0x44>)
 80006bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006c6:	f002 fd39 	bl	800313c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000

080006d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b09c      	sub	sp, #112	@ 0x70
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	2244      	movs	r2, #68	@ 0x44
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f004 f9ff 	bl	8004afc <memset>
  if(hadc->Instance==ADC1)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000706:	d171      	bne.n	80007ec <HAL_ADC_MspInit+0x114>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800070c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800070e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000712:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fa69 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000724:	f7ff ffae 	bl	8000684 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000728:	4b58      	ldr	r3, [pc, #352]	@ (800088c <HAL_ADC_MspInit+0x1b4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a57      	ldr	r2, [pc, #348]	@ (800088c <HAL_ADC_MspInit+0x1b4>)
 8000730:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000732:	4b56      	ldr	r3, [pc, #344]	@ (800088c <HAL_ADC_MspInit+0x1b4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10b      	bne.n	8000752 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800073a:	4b55      	ldr	r3, [pc, #340]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a54      	ldr	r2, [pc, #336]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000740:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b52      	ldr	r3, [pc, #328]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b4f      	ldr	r3, [pc, #316]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a4e      	ldr	r2, [pc, #312]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800076a:	2301      	movs	r3, #1
 800076c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076e:	2303      	movs	r3, #3
 8000770:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f002 fab6 	bl	8002cf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000784:	4b43      	ldr	r3, [pc, #268]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 8000786:	4a44      	ldr	r2, [pc, #272]	@ (8000898 <HAL_ADC_MspInit+0x1c0>)
 8000788:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800078a:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 800078c:	2205      	movs	r2, #5
 800078e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000790:	4b40      	ldr	r3, [pc, #256]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000796:	4b3f      	ldr	r3, [pc, #252]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007b2:	4b38      	ldr	r3, [pc, #224]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007b8:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007be:	4835      	ldr	r0, [pc, #212]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007c0:	f002 f824 	bl	800280c <HAL_DMA_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80007ca:	f7ff ff5b 	bl	8000684 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a30      	ldr	r2, [pc, #192]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80007d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000894 <HAL_ADC_MspInit+0x1bc>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2012      	movs	r0, #18
 80007e0:	f001 ffec 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007e4:	2012      	movs	r0, #18
 80007e6:	f002 f803 	bl	80027f0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007ea:	e04a      	b.n	8000882 <HAL_ADC_MspInit+0x1aa>
  else if(hadc->Instance==ADC2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	@ (800089c <HAL_ADC_MspInit+0x1c4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d145      	bne.n	8000882 <HAL_ADC_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007fc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000800:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	4618      	mov	r0, r3
 8000808:	f003 f9f2 	bl	8003bf0 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8000812:	f7ff ff37 	bl	8000684 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <HAL_ADC_MspInit+0x1b4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <HAL_ADC_MspInit+0x1b4>)
 800081e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <HAL_ADC_MspInit+0x1b4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10b      	bne.n	8000840 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000828:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082c:	4a18      	ldr	r2, [pc, #96]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 800082e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_ADC_MspInit+0x1b8>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	2303      	movs	r3, #3
 800085e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f002 fa3f 	bl	8002cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2012      	movs	r0, #18
 8000878:	f001 ffa0 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800087c:	2012      	movs	r0, #18
 800087e:	f001 ffb7 	bl	80027f0 <HAL_NVIC_EnableIRQ>
}
 8000882:	bf00      	nop
 8000884:	3770      	adds	r7, #112	@ 0x70
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200001bc 	.word	0x200001bc
 8000890:	40021000 	.word	0x40021000
 8000894:	20000100 	.word	0x20000100
 8000898:	40020008 	.word	0x40020008
 800089c:	50000100 	.word	0x50000100

080008a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <HAL_TIM_Base_MspInit+0x44>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d113      	bne.n	80008da <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b2:	4b0d      	ldr	r3, [pc, #52]	@ (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a0c      	ldr	r2, [pc, #48]	@ (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <HAL_TIM_Base_MspInit+0x48>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 15, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	201a      	movs	r0, #26
 80008d0:	f001 ff74 	bl	80027bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80008d4:	201a      	movs	r0, #26
 80008d6:	f001 ff8b 	bl	80027f0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40012c00 	.word	0x40012c00
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	@ 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80008fc:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <HAL_InitTick+0xc4>)
 80008fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000900:	4a2b      	ldr	r2, [pc, #172]	@ (80009b0 <HAL_InitTick+0xc4>)
 8000902:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000906:	6613      	str	r3, [r2, #96]	@ 0x60
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <HAL_InitTick+0xc4>)
 800090a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800090c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 020c 	add.w	r2, r7, #12
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f003 f8ee 	bl	8003b00 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000924:	f003 f8d6 	bl	8003ad4 <HAL_RCC_GetPCLK2Freq>
 8000928:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800092c:	4a21      	ldr	r2, [pc, #132]	@ (80009b4 <HAL_InitTick+0xc8>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <HAL_InitTick+0xcc>)
 800093a:	4a20      	ldr	r2, [pc, #128]	@ (80009bc <HAL_InitTick+0xd0>)
 800093c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <HAL_InitTick+0xcc>)
 8000940:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000946:	4a1c      	ldr	r2, [pc, #112]	@ (80009b8 <HAL_InitTick+0xcc>)
 8000948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094a:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <HAL_InitTick+0xcc>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <HAL_InitTick+0xcc>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000958:	4817      	ldr	r0, [pc, #92]	@ (80009b8 <HAL_InitTick+0xcc>)
 800095a:	f003 fb39 	bl	8003fd0 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000964:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11b      	bne.n	80009a4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800096c:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <HAL_InitTick+0xcc>)
 800096e:	f003 fbe9 	bl	8004144 <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800097c:	2b00      	cmp	r3, #0
 800097e:	d111      	bne.n	80009a4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000980:	201a      	movs	r0, #26
 8000982:	f001 ff35 	bl	80027f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d808      	bhi.n	800099e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	201a      	movs	r0, #26
 8000992:	f001 ff13 	bl	80027bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_InitTick+0xd4>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	e002      	b.n	80009a4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3730      	adds	r7, #48	@ 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	200001c0 	.word	0x200001c0
 80009bc:	40014800 	.word	0x40014800
 80009c0:	20000004 	.word	0x20000004

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <DMA1_Channel1_IRQHandler+0x10>)
 8000a2a:	f002 f812 	bl	8002a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000100 	.word	0x20000100

08000a38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <ADC1_2_IRQHandler+0x14>)
 8000a3e:	f000 fd11 	bl	8001464 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000a42:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <ADC1_2_IRQHandler+0x18>)
 8000a44:	f000 fd0e 	bl	8001464 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	20000094 	.word	0x20000094

08000a54 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  if (htim1.Instance != NULL)
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <TIM1_TRG_COM_TIM17_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim1);
 8000a60:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8000a62:	f003 fbd9 	bl	8004218 <HAL_TIM_IRQHandler>
  }
  if (htim17.Instance != NULL)
 8000a66:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
  {
    HAL_TIM_IRQHandler(&htim17);
 8000a6e:	4803      	ldr	r0, [pc, #12]	@ (8000a7c <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8000a70:	f003 fbd2 	bl	8004218 <HAL_TIM_IRQHandler>
  }
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000160 	.word	0x20000160
 8000a7c:	200001c0 	.word	0x200001c0

08000a80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aa4:	480d      	ldr	r0, [pc, #52]	@ (8000adc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aa6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f004 f81b 	bl	8004b0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fbcd 	bl	8000274 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   r0, =_estack
 8000adc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae8:	08004b8c 	.word	0x08004b8c
  ldr r2, =_sbss
 8000aec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af0:	20000210 	.word	0x20000210

08000af4 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <COMP1_2_3_IRQHandler>

08000af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f001 fe50 	bl	80027a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	200f      	movs	r0, #15
 8000b08:	f7ff fef0 	bl	80008ec <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff fdba 	bl	8000690 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a03      	ldr	r2, [pc, #12]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b38:	6013      	str	r3, [r2, #0]
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	2000020c 	.word	0x2000020c
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	@ (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	2000020c 	.word	0x2000020c

08000b64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3360      	adds	r3, #96	@ 0x60
 8000bde:	461a      	mov	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <LL_ADC_SetOffset+0x44>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c04:	bf00      	nop
 8000c06:	371c      	adds	r7, #28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	03fff000 	.word	0x03fff000

08000c14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3360      	adds	r3, #96	@ 0x60
 8000c22:	461a      	mov	r2, r3
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3360      	adds	r3, #96	@ 0x60
 8000c50:	461a      	mov	r2, r3
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	431a      	orrs	r2, r3
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c6a:	bf00      	nop
 8000c6c:	371c      	adds	r7, #28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b087      	sub	sp, #28
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3360      	adds	r3, #96	@ 0x60
 8000c86:	461a      	mov	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000ca0:	bf00      	nop
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3360      	adds	r3, #96	@ 0x60
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000cd6:	bf00      	nop
 8000cd8:	371c      	adds	r7, #28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	615a      	str	r2, [r3, #20]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b087      	sub	sp, #28
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3330      	adds	r3, #48	@ 0x30
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	4413      	add	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f003 031f 	and.w	r3, r3, #31
 8000d58:	211f      	movs	r1, #31
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	401a      	ands	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0e9b      	lsrs	r3, r3, #26
 8000d66:	f003 011f 	and.w	r1, r3, #31
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3314      	adds	r3, #20
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	0e5b      	lsrs	r3, r3, #25
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	0d1b      	lsrs	r3, r3, #20
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	2107      	movs	r1, #7
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	401a      	ands	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	0d1b      	lsrs	r3, r3, #20
 8000de6:	f003 031f 	and.w	r3, r3, #31
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	431a      	orrs	r2, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000df6:	bf00      	nop
 8000df8:	371c      	adds	r7, #28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0318 	and.w	r3, r3, #24
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e28:	40d9      	lsrs	r1, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e32:	431a      	orrs	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	0007ffff 	.word	0x0007ffff

08000e4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 031f 	and.w	r3, r3, #31
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6093      	str	r3, [r2, #8]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ebc:	d101      	bne.n	8000ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ee4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f0c:	d101      	bne.n	8000f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <LL_ADC_IsEnabled+0x18>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <LL_ADC_IsEnabled+0x1a>
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f82:	f043 0204 	orr.w	r2, r3, #4
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	d101      	bne.n	8000fae <LL_ADC_REG_IsConversionOngoing+0x18>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d101      	bne.n	8000fd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e167      	b.n	80012ce <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fb63 	bl	80006d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff3f 	bl	8000ea8 <LL_ADC_IsDeepPowerDownEnabled>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff25 	bl	8000e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff5a 	bl	8000ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d115      	bne.n	8001076 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff3e 	bl	8000ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001054:	4ba0      	ldr	r3, [pc, #640]	@ (80012d8 <HAL_ADC_Init+0x2f4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	099b      	lsrs	r3, r3, #6
 800105a:	4aa0      	ldr	r2, [pc, #640]	@ (80012dc <HAL_ADC_Init+0x2f8>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	3301      	adds	r3, #1
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001068:	e002      	b.n	8001070 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3b01      	subs	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff3c 	bl	8000ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800108a:	f043 0210 	orr.w	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff75 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 80010ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 8100 	bne.w	80012bc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 80fc 	bne.w	80012bc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff35 	bl	8000f48 <LL_ADC_IsEnabled>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d111      	bne.n	8001108 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80010e8:	f7ff ff2e 	bl	8000f48 <LL_ADC_IsEnabled>
 80010ec:	4604      	mov	r4, r0
 80010ee:	487c      	ldr	r0, [pc, #496]	@ (80012e0 <HAL_ADC_Init+0x2fc>)
 80010f0:	f7ff ff2a 	bl	8000f48 <LL_ADC_IsEnabled>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4323      	orrs	r3, r4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4619      	mov	r1, r3
 8001102:	4878      	ldr	r0, [pc, #480]	@ (80012e4 <HAL_ADC_Init+0x300>)
 8001104:	f7ff fd2e 	bl	8000b64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7f5b      	ldrb	r3, [r3, #29]
 800110c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001112:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001118:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800111e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001126:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001132:	2b01      	cmp	r3, #1
 8001134:	d106      	bne.n	8001144 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	3b01      	subs	r3, #1
 800113c:	045b      	lsls	r3, r3, #17
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d009      	beq.n	8001160 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001150:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	4b60      	ldr	r3, [pc, #384]	@ (80012e8 <HAL_ADC_Init+0x304>)
 8001168:	4013      	ands	r3, r2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	430b      	orrs	r3, r1
 8001172:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff14 	bl	8000fbc <LL_ADC_INJ_IsConversionOngoing>
 8001194:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d16d      	bne.n	8001278 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d16a      	bne.n	8001278 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80011ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d017      	beq.n	8001204 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80011e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80011ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80011f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6911      	ldr	r1, [r2, #16]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6812      	ldr	r2, [r2, #0]
 80011fc:	430b      	orrs	r3, r1
 80011fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001202:	e013      	b.n	800122c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001212:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001224:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001228:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001232:	2b01      	cmp	r3, #1
 8001234:	d118      	bne.n	8001268 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001240:	f023 0304 	bic.w	r3, r3, #4
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800124c:	4311      	orrs	r1, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001252:	4311      	orrs	r1, r2
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001258:	430a      	orrs	r2, r1
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0201 	orr.w	r2, r2, #1
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	e007      	b.n	8001278 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10c      	bne.n	800129a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f023 010f 	bic.w	r1, r3, #15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
 8001298:	e007      	b.n	80012aa <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 020f 	bic.w	r2, r2, #15
 80012a8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ae:	f023 0303 	bic.w	r3, r3, #3
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012ba:	e007      	b.n	80012cc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c0:	f043 0210 	orr.w	r2, r3, #16
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80012cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	@ 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000
 80012dc:	053e2d63 	.word	0x053e2d63
 80012e0:	50000100 	.word	0x50000100
 80012e4:	50000300 	.word	0x50000300
 80012e8:	fff04007 	.word	0xfff04007

080012ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012f4:	4859      	ldr	r0, [pc, #356]	@ (800145c <HAL_ADC_Start+0x170>)
 80012f6:	f7ff fda9 	bl	8000e4c <LL_ADC_GetMultimode>
 80012fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe48 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	f040 809f 	bne.w	800144c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001314:	2b01      	cmp	r3, #1
 8001316:	d101      	bne.n	800131c <HAL_ADC_Start+0x30>
 8001318:	2302      	movs	r3, #2
 800131a:	e09a      	b.n	8001452 <HAL_ADC_Start+0x166>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fec5 	bl	80020b4 <ADC_Enable>
 800132a:	4603      	mov	r3, r0
 800132c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f040 8086 	bne.w	8001442 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800133a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a44      	ldr	r2, [pc, #272]	@ (8001460 <HAL_ADC_Start+0x174>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d002      	beq.n	800135a <HAL_ADC_Start+0x6e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	e001      	b.n	800135e <HAL_ADC_Start+0x72>
 800135a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	6812      	ldr	r2, [r2, #0]
 8001362:	4293      	cmp	r3, r2
 8001364:	d002      	beq.n	800136c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d105      	bne.n	8001378 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001370:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001384:	d106      	bne.n	8001394 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800138a:	f023 0206 	bic.w	r2, r3, #6
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	661a      	str	r2, [r3, #96]	@ 0x60
 8001392:	e002      	b.n	800139a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	221c      	movs	r2, #28
 80013a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001460 <HAL_ADC_Start+0x174>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d002      	beq.n	80013ba <HAL_ADC_Start+0xce>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	e001      	b.n	80013be <HAL_ADC_Start+0xd2>
 80013ba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d008      	beq.n	80013d8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d002      	beq.n	80013d8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	2b09      	cmp	r3, #9
 80013d6:	d114      	bne.n	8001402 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fdb7 	bl	8000f6e <LL_ADC_REG_StartConversion>
 8001400:	e026      	b.n	8001450 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001406:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <HAL_ADC_Start+0x174>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d002      	beq.n	800141e <HAL_ADC_Start+0x132>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	e001      	b.n	8001422 <HAL_ADC_Start+0x136>
 800141e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001422:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00f      	beq.n	8001450 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001434:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001438:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001440:	e006      	b.n	8001450 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800144a:	e001      	b.n	8001450 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800144c:	2302      	movs	r3, #2
 800144e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001450:	7dfb      	ldrb	r3, [r7, #23]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	50000300 	.word	0x50000300
 8001460:	50000100 	.word	0x50000100

08001464 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001480:	4883      	ldr	r0, [pc, #524]	@ (8001690 <HAL_ADC_IRQHandler+0x22c>)
 8001482:	f7ff fce3 	bl	8000e4c <LL_ADC_GetMultimode>
 8001486:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d017      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x5e>
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d012      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f001 f81b 	bl	80024f0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d004      	beq.n	80014d6 <HAL_ADC_IRQHandler+0x72>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10a      	bne.n	80014ec <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8085 	beq.w	80015ec <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d07f      	beq.n	80015ec <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbfd 	bl	8000d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d064      	beq.n	80015de <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5e      	ldr	r2, [pc, #376]	@ (8001694 <HAL_ADC_IRQHandler+0x230>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d002      	beq.n	8001524 <HAL_ADC_IRQHandler+0xc0>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	e001      	b.n	8001528 <HAL_ADC_IRQHandler+0xc4>
 8001524:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	4293      	cmp	r3, r2
 800152e:	d008      	beq.n	8001542 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d002      	beq.n	8001542 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b09      	cmp	r3, #9
 8001540:	d104      	bne.n	800154c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	e00d      	b.n	8001568 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a50      	ldr	r2, [pc, #320]	@ (8001694 <HAL_ADC_IRQHandler+0x230>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d002      	beq.n	800155c <HAL_ADC_IRQHandler+0xf8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	e001      	b.n	8001560 <HAL_ADC_IRQHandler+0xfc>
 800155c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001560:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d135      	bne.n	80015de <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	2b08      	cmp	r3, #8
 800157e:	d12e      	bne.n	80015de <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fd06 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11a      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020c 	bic.w	r2, r2, #12
 800159e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d112      	bne.n	80015de <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015c4:	e00b      	b.n	80015de <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ca:	f043 0210 	orr.w	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7fe fe1a 	bl	8000218 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	220c      	movs	r2, #12
 80015ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d004      	beq.n	8001600 <HAL_ADC_IRQHandler+0x19c>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10b      	bne.n	8001618 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 809e 	beq.w	8001748 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8098 	beq.w	8001748 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fba6 	bl	8000d86 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800163a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb61 	bl	8000d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001646:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a11      	ldr	r2, [pc, #68]	@ (8001694 <HAL_ADC_IRQHandler+0x230>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d002      	beq.n	8001658 <HAL_ADC_IRQHandler+0x1f4>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	e001      	b.n	800165c <HAL_ADC_IRQHandler+0x1f8>
 8001658:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	4293      	cmp	r3, r2
 8001662:	d008      	beq.n	8001676 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2b06      	cmp	r3, #6
 800166e:	d002      	beq.n	8001676 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b07      	cmp	r3, #7
 8001674:	d104      	bne.n	8001680 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
 800167e:	e011      	b.n	80016a4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a03      	ldr	r2, [pc, #12]	@ (8001694 <HAL_ADC_IRQHandler+0x230>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d006      	beq.n	8001698 <HAL_ADC_IRQHandler+0x234>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	e005      	b.n	800169c <HAL_ADC_IRQHandler+0x238>
 8001690:	50000300 	.word	0x50000300
 8001694:	50000100 	.word	0x50000100
 8001698:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800169c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d047      	beq.n	800173a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <HAL_ADC_IRQHandler+0x260>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03f      	beq.n	800173a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d13a      	bne.n	800173a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ce:	2b40      	cmp	r3, #64	@ 0x40
 80016d0:	d133      	bne.n	800173a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d12e      	bne.n	800173a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fc6b 	bl	8000fbc <LL_ADC_INJ_IsConversionOngoing>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11a      	bne.n	8001722 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80016fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001700:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d112      	bne.n	800173a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001720:	e00b      	b.n	800173a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001726:	f043 0210 	orr.w	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001732:	f043 0201 	orr.w	r2, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 feb0 	bl	80024a0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2260      	movs	r2, #96	@ 0x60
 8001746:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <HAL_ADC_IRQHandler+0x312>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001760:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f89f 	bl	80018ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d012      	beq.n	80017a6 <HAL_ADC_IRQHandler+0x342>
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 fe96 	bl	80024c8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d012      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x372>
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00d      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 fe88 	bl	80024dc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d036      	beq.n	800184e <HAL_ADC_IRQHandler+0x3ea>
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f003 0310 	and.w	r3, r3, #16
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d031      	beq.n	800184e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f6:	e014      	b.n	8001822 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80017fe:	4825      	ldr	r0, [pc, #148]	@ (8001894 <HAL_ADC_IRQHandler+0x430>)
 8001800:	f7ff fb32 	bl	8000e68 <LL_ADC_GetMultiDMATransfer>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800180a:	2301      	movs	r3, #1
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
 800180e:	e008      	b.n	8001822 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800181e:	2301      	movs	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10e      	bne.n	8001846 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001838:	f043 0202 	orr.w	r2, r3, #2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f83d 	bl	80018c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2210      	movs	r2, #16
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_ADC_IRQHandler+0x426>
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d013      	beq.n	800188a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001872:	f043 0208 	orr.w	r2, r3, #8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001882:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fe15 	bl	80024b4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	50000300 	.word	0x50000300

08001898 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0b6      	sub	sp, #216	@ 0xd8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x22>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e3c8      	b.n	8002088 <HAL_ADC_ConfigChannel+0x7b4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fb47 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 83ad 	bne.w	800206a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6859      	ldr	r1, [r3, #4]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	f7ff fa06 	bl	8000d2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fb35 	bl	8000f96 <LL_ADC_REG_IsConversionOngoing>
 800192c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fb41 	bl	8000fbc <LL_ADC_INJ_IsConversionOngoing>
 800193a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800193e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 81d9 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 81d4 	bne.w	8001cfa <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800195a:	d10f      	bne.n	800197c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff fa20 	bl	8000dac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9b4 	bl	8000ce2 <LL_ADC_SetSamplingTimeCommonConfig>
 800197a:	e00e      	b.n	800199a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	461a      	mov	r2, r3
 800198a:	f7ff fa0f 	bl	8000dac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9a4 	bl	8000ce2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d022      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6919      	ldr	r1, [r3, #16]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019cc:	f7ff f8fe 	bl	8000bcc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	6919      	ldr	r1, [r3, #16]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	461a      	mov	r2, r3
 80019de:	f7ff f94a 	bl	8000c76 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x124>
 80019f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019f6:	e000      	b.n	80019fa <HAL_ADC_ConfigChannel+0x126>
 80019f8:	2300      	movs	r3, #0
 80019fa:	461a      	mov	r2, r3
 80019fc:	f7ff f956 	bl	8000cac <LL_ADC_SetOffsetSaturation>
 8001a00:	e17b      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff f903 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x15a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f8f8 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	0e9b      	lsrs	r3, r3, #26
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	e01e      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x198>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f8ed 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a44:	fa93 f3a3 	rbit	r3, r3
 8001a48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001a5c:	2320      	movs	r3, #32
 8001a5e:	e004      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1b0>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	f003 031f 	and.w	r3, r3, #31
 8001a82:	e018      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1e2>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001aa0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001aa8:	2320      	movs	r3, #32
 8001aaa:	e004      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001aac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8bc 	bl	8000c40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8a0 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10a      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x220>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff f895 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001aea:	4603      	mov	r3, r0
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	f003 021f 	and.w	r2, r3, #31
 8001af2:	e01e      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x25e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f88a 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001b22:	2320      	movs	r3, #32
 8001b24:	e004      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001b26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x276>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	0e9b      	lsrs	r3, r3, #26
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	e018      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x2a8>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001b66:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	e004      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d106      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f859 	bl	8000c40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2102      	movs	r1, #2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff f83d 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x2e6>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f832 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x324>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2102      	movs	r1, #2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f827 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001be0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e004      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x33c>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	e016      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x36a>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e004      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d106      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	2102      	movs	r1, #2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fff8 	bl	8000c40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2103      	movs	r1, #3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe ffdc 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10a      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x3a8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe ffd1 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	0e9b      	lsrs	r3, r3, #26
 8001c76:	f003 021f 	and.w	r2, r3, #31
 8001c7a:	e017      	b.n	8001cac <HAL_ADC_ConfigChannel+0x3d8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2103      	movs	r1, #3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ffc6 	bl	8000c14 <LL_ADC_GetOffsetChannel>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c96:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e003      	b.n	8001caa <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001ca2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x3f0>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	e011      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x414>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e003      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe ffa3 	bl	8000c40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f922 	bl	8000f48 <LL_ADC_IsEnabled>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 8140 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff f873 	bl	8000e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4a8f      	ldr	r2, [pc, #572]	@ (8001f60 <HAL_ADC_ConfigChannel+0x68c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f040 8131 	bne.w	8001f8c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10b      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x47e>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	3301      	adds	r3, #1
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b09      	cmp	r3, #9
 8001d48:	bf94      	ite	ls
 8001d4a:	2301      	movls	r3, #1
 8001d4c:	2300      	movhi	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	e019      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x4b2>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d62:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001d64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	e003      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001d6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d079      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x4d2>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0e9b      	lsrs	r3, r3, #26
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	069b      	lsls	r3, r3, #26
 8001da0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001da4:	e015      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x4fe>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001db6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	069b      	lsls	r3, r3, #26
 8001dce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x51e>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 031f 	and.w	r3, r3, #31
 8001dea:	2101      	movs	r1, #1
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	e017      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x54e>
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e003      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e10:	fab3 f383 	clz	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e22:	ea42 0103 	orr.w	r1, r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10a      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x574>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 021f 	and.w	r2, r3, #31
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	e018      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x5a6>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001e60:	2320      	movs	r3, #32
 8001e62:	e003      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f003 021f 	and.w	r2, r3, #31
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	e081      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x5c6>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0e9b      	lsrs	r3, r3, #26
 8001e90:	3301      	adds	r3, #1
 8001e92:	069b      	lsls	r3, r3, #26
 8001e94:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e98:	e015      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x5f2>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e003      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	069b      	lsls	r3, r3, #26
 8001ec2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x612>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0e9b      	lsrs	r3, r3, #26
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2101      	movs	r1, #1
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	e017      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x642>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	61fb      	str	r3, [r7, #28]
  return result;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001efe:	2320      	movs	r3, #32
 8001f00:	e003      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	ea42 0103 	orr.w	r1, r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x66e>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	0e9b      	lsrs	r3, r3, #26
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f003 021f 	and.w	r2, r3, #31
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	3b1e      	subs	r3, #30
 8001f3a:	051b      	lsls	r3, r3, #20
 8001f3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f40:	e01e      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x6ac>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	613b      	str	r3, [r7, #16]
  return result;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e006      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x698>
 8001f5e:	bf00      	nop
 8001f60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	3b1e      	subs	r3, #30
 8001f7a:	051b      	lsls	r3, r3, #20
 8001f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe ff10 	bl	8000dac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b3f      	ldr	r3, [pc, #252]	@ (8002090 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d071      	beq.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f98:	483e      	ldr	r0, [pc, #248]	@ (8002094 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f9a:	f7fe fe09 	bl	8000bb0 <LL_ADC_GetCommonPathInternalCh>
 8001f9e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	@ (8002098 <HAL_ADC_ConfigChannel+0x7c4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d004      	beq.n	8001fb6 <HAL_ADC_ConfigChannel+0x6e2>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <HAL_ADC_ConfigChannel+0x7c8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d127      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d121      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fca:	d157      	bne.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482f      	ldr	r0, [pc, #188]	@ (8002094 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fd8:	f7fe fdd7 	bl	8000b8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fdc:	4b30      	ldr	r3, [pc, #192]	@ (80020a0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4a30      	ldr	r2, [pc, #192]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ff6:	e002      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002004:	e03a      	b.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a27      	ldr	r2, [pc, #156]	@ (80020a8 <HAL_ADC_ConfigChannel+0x7d4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d113      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002010:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002014:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10d      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a22      	ldr	r2, [pc, #136]	@ (80020ac <HAL_ADC_ConfigChannel+0x7d8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02a      	beq.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800202a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800202e:	4619      	mov	r1, r3
 8002030:	4818      	ldr	r0, [pc, #96]	@ (8002094 <HAL_ADC_ConfigChannel+0x7c0>)
 8002032:	f7fe fdaa 	bl	8000b8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002036:	e021      	b.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_ADC_ConfigChannel+0x7dc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d11c      	bne.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d116      	bne.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a16      	ldr	r2, [pc, #88]	@ (80020ac <HAL_ADC_ConfigChannel+0x7d8>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d011      	beq.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002060:	4619      	mov	r1, r3
 8002062:	480c      	ldr	r0, [pc, #48]	@ (8002094 <HAL_ADC_ConfigChannel+0x7c0>)
 8002064:	f7fe fd91 	bl	8000b8a <LL_ADC_SetCommonPathInternalCh>
 8002068:	e008      	b.n	800207c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002084:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002088:	4618      	mov	r0, r3
 800208a:	37d8      	adds	r7, #216	@ 0xd8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	80080000 	.word	0x80080000
 8002094:	50000300 	.word	0x50000300
 8002098:	c3210000 	.word	0xc3210000
 800209c:	90c00010 	.word	0x90c00010
 80020a0:	20000000 	.word	0x20000000
 80020a4:	053e2d63 	.word	0x053e2d63
 80020a8:	c7520000 	.word	0xc7520000
 80020ac:	50000100 	.word	0x50000100
 80020b0:	cb840000 	.word	0xcb840000

080020b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe ff3f 	bl	8000f48 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d169      	bne.n	80021a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	4b36      	ldr	r3, [pc, #216]	@ (80021b0 <ADC_Enable+0xfc>)
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00d      	beq.n	80020fa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e055      	b.n	80021a6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe ff0e 	bl	8000f20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002104:	482b      	ldr	r0, [pc, #172]	@ (80021b4 <ADC_Enable+0x100>)
 8002106:	f7fe fd53 	bl	8000bb0 <LL_ADC_GetCommonPathInternalCh>
 800210a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800210c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002114:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <ADC_Enable+0x104>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <ADC_Enable+0x108>)
 800211c:	fba2 2303 	umull	r2, r3, r2, r3
 8002120:	099b      	lsrs	r3, r3, #6
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800212e:	e002      	b.n	8002136 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3b01      	subs	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f9      	bne.n	8002130 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800213c:	f7fe fd06 	bl	8000b4c <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002142:	e028      	b.n	8002196 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fefd 	bl	8000f48 <LL_ADC_IsEnabled>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fee1 	bl	8000f20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800215e:	f7fe fcf5 	bl	8000b4c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d914      	bls.n	8002196 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d00d      	beq.n	8002196 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e007      	b.n	80021a6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d1cf      	bne.n	8002144 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	8000003f 	.word	0x8000003f
 80021b4:	50000300 	.word	0x50000300
 80021b8:	20000000 	.word	0x20000000
 80021bc:	053e2d63 	.word	0x053e2d63

080021c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d14b      	bne.n	8002272 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d021      	beq.n	8002238 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fd85 	bl	8000d08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d032      	beq.n	800226a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12b      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002216:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d11f      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002236:	e018      	b.n	800226a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d111      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002256:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7fd ffd4 	bl	8000218 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002270:	e00e      	b.n	8002290 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7ff fb1e 	bl	80018c0 <HAL_ADC_ErrorCallback>
}
 8002284:	e004      	b.n	8002290 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff faf6 	bl	8001898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d2:	f043 0204 	orr.w	r2, r3, #4
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f7ff faf0 	bl	80018c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <LL_ADC_IsEnabled>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_StartConversion>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800231e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	609a      	str	r2, [r3, #8]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <LL_ADC_REG_IsConversionOngoing>:
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d101      	bne.n	800234e <LL_ADC_REG_IsConversionOngoing+0x18>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0a2      	sub	sp, #136	@ 0x88
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ffe2 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002378:	2302      	movs	r3, #2
 800237a:	e082      	b.n	8002482 <HAL_ADCEx_MultiModeStart_DMA+0x126>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002386:	2302      	movs	r3, #2
 8002388:	e07b      	b.n	8002482 <HAL_ADCEx_MultiModeStart_DMA+0x126>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002392:	2300      	movs	r3, #0
 8002394:	673b      	str	r3, [r7, #112]	@ 0x70
    ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002396:	2300      	movs	r3, #0
 8002398:	677b      	str	r3, [r7, #116]	@ 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023a2:	d102      	bne.n	80023aa <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80023a4:	4b39      	ldr	r3, [pc, #228]	@ (800248c <HAL_ADCEx_MultiModeStart_DMA+0x130>)
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e001      	b.n	80023ae <HAL_ADCEx_MultiModeStart_DMA+0x52>
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]

    if (tmp_hadc_slave.Instance == NULL)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	f043 0220 	orr.w	r2, r3, #32
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e05a      	b.n	8002482 <HAL_ADCEx_MultiModeStart_DMA+0x126>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff fe71 	bl	80020b4 <ADC_Enable>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80023d8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmp_hadc_slave);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe65 	bl	80020b4 <ADC_Enable>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80023f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d13e      	bne.n	8002476 <HAL_ADCEx_MultiModeStart_DMA+0x11a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	65da      	str	r2, [r3, #92]	@ 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	4a1e      	ldr	r2, [pc, #120]	@ (8002490 <HAL_ADCEx_MultiModeStart_DMA+0x134>)
 8002418:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241e:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <HAL_ADCEx_MultiModeStart_DMA+0x138>)
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	4a1c      	ldr	r2, [pc, #112]	@ (8002498 <HAL_ADCEx_MultiModeStart_DMA+0x13c>)
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800242a:	4b1c      	ldr	r3, [pc, #112]	@ (800249c <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 800242c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	221c      	movs	r2, #28
 8002436:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0210 	orr.w	r2, r2, #16
 800244e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002454:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002458:	330c      	adds	r3, #12
 800245a:	4619      	mov	r1, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f000 fa7c 	bl	800295c <HAL_DMA_Start_IT>
 8002464:	4603      	mov	r3, r0
 8002466:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff4d 	bl	800230e <LL_ADC_REG_StartConversion>
 8002474:	e003      	b.n	800247e <HAL_ADCEx_MultiModeStart_DMA+0x122>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 800247e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3788      	adds	r7, #136	@ 0x88
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	50000100 	.word	0x50000100
 8002490:	080021c1 	.word	0x080021c1
 8002494:	08002299 	.word	0x08002299
 8002498:	080022b5 	.word	0x080022b5
 800249c:	50000300 	.word	0x50000300

080024a0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b0a1      	sub	sp, #132	@ 0x84
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800251e:	2302      	movs	r3, #2
 8002520:	e08b      	b.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800252a:	2300      	movs	r3, #0
 800252c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800252e:	2300      	movs	r3, #0
 8002530:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800253a:	d102      	bne.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800253c:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	e001      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e06a      	b.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fee5 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 800256c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fedf 	bl	8002336 <LL_ADC_REG_IsConversionOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d14c      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800257e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002580:	2b00      	cmp	r3, #0
 8002582:	d149      	bne.n	8002618 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002584:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002586:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d028      	beq.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002590:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025a2:	035b      	lsls	r3, r3, #13
 80025a4:	430b      	orrs	r3, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025b0:	f7ff fe9a 	bl	80022e8 <LL_ADC_IsEnabled>
 80025b4:	4604      	mov	r4, r0
 80025b6:	4823      	ldr	r0, [pc, #140]	@ (8002644 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025b8:	f7ff fe96 	bl	80022e8 <LL_ADC_IsEnabled>
 80025bc:	4603      	mov	r3, r0
 80025be:	4323      	orrs	r3, r4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d133      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025cc:	f023 030f 	bic.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	6811      	ldr	r1, [r2, #0]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	6892      	ldr	r2, [r2, #8]
 80025d8:	430a      	orrs	r2, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025de:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025e0:	e024      	b.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ec:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ee:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80025f2:	f7ff fe79 	bl	80022e8 <LL_ADC_IsEnabled>
 80025f6:	4604      	mov	r4, r0
 80025f8:	4812      	ldr	r0, [pc, #72]	@ (8002644 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80025fa:	f7ff fe75 	bl	80022e8 <LL_ADC_IsEnabled>
 80025fe:	4603      	mov	r3, r0
 8002600:	4323      	orrs	r3, r4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d112      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800260e:	f023 030f 	bic.w	r3, r3, #15
 8002612:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002614:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002616:	e009      	b.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800262a:	e000      	b.n	800262e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002636:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800263a:	4618      	mov	r0, r3
 800263c:	3784      	adds	r7, #132	@ 0x84
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	50000100 	.word	0x50000100
 8002648:	50000300 	.word	0x50000300

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	@ (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	@ (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	@ (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff4c 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027ca:	f7ff ff63 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	6978      	ldr	r0, [r7, #20]
 80027d6:	f7ff ffb3 	bl	8002740 <NVIC_EncodePriority>
 80027da:	4602      	mov	r2, r0
 80027dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff82 	bl	80026ec <__NVIC_SetPriority>
}
 80027e8:	bf00      	nop
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff56 	bl	80026b0 <__NVIC_EnableIRQ>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e08d      	b.n	800293a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_DMA_Init+0x138>)
 8002826:	429a      	cmp	r2, r3
 8002828:	d80f      	bhi.n	800284a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	4b45      	ldr	r3, [pc, #276]	@ (8002948 <HAL_DMA_Init+0x13c>)
 8002832:	4413      	add	r3, r2
 8002834:	4a45      	ldr	r2, [pc, #276]	@ (800294c <HAL_DMA_Init+0x140>)
 8002836:	fba2 2303 	umull	r2, r3, r2, r3
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	009a      	lsls	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a42      	ldr	r2, [pc, #264]	@ (8002950 <HAL_DMA_Init+0x144>)
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
 8002848:	e00e      	b.n	8002868 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <HAL_DMA_Init+0x148>)
 8002852:	4413      	add	r3, r2
 8002854:	4a3d      	ldr	r2, [pc, #244]	@ (800294c <HAL_DMA_Init+0x140>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	009a      	lsls	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a3c      	ldr	r2, [pc, #240]	@ (8002958 <HAL_DMA_Init+0x14c>)
 8002866:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800287e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9b6 	bl	8002c2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028c8:	d102      	bne.n	80028d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028e4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <HAL_DMA_Init+0x104>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d80c      	bhi.n	8002910 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f9d6 	bl	8002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	e008      	b.n	8002922 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40020407 	.word	0x40020407
 8002948:	bffdfff8 	.word	0xbffdfff8
 800294c:	cccccccd 	.word	0xcccccccd
 8002950:	40020000 	.word	0x40020000
 8002954:	bffdfbf8 	.word	0xbffdfbf8
 8002958:	40020400 	.word	0x40020400

0800295c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_DMA_Start_IT+0x20>
 8002978:	2302      	movs	r3, #2
 800297a:	e066      	b.n	8002a4a <HAL_DMA_Start_IT+0xee>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d155      	bne.n	8002a3c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0201 	bic.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f8fb 	bl	8002bb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 020e 	orr.w	r2, r2, #14
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e00f      	b.n	80029f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 020a 	orr.w	r2, r2, #10
 80029f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a10:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a28:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e005      	b.n	8002a48 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
 8002a46:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2204      	movs	r2, #4
 8002a74:	409a      	lsls	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d026      	beq.n	8002acc <HAL_DMA_IRQHandler+0x7a>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d021      	beq.n	8002acc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0204 	bic.w	r2, r2, #4
 8002aa4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f003 021f 	and.w	r2, r3, #31
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d071      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002aca:	e06c      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02e      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d029      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 020a 	bic.w	r2, r2, #10
 8002b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d038      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b3c:	e033      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2208      	movs	r2, #8
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d02a      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d025      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
}
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bc6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bd8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bde:	f003 021f 	and.w	r2, r3, #31
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d108      	bne.n	8002c10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c0e:	e007      	b.n	8002c20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	60da      	str	r2, [r3, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b16      	ldr	r3, [pc, #88]	@ (8002c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d802      	bhi.n	8002c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e001      	b.n	8002c4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002c46:	4b15      	ldr	r3, [pc, #84]	@ (8002c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c48:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	3b08      	subs	r3, #8
 8002c56:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2201      	movs	r2, #1
 8002c80:	409a      	lsls	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40020407 	.word	0x40020407
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020820 	.word	0x40020820
 8002ca0:	cccccccd 	.word	0xcccccccd
 8002ca4:	40020880 	.word	0x40020880

08002ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a08      	ldr	r2, [pc, #32]	@ (8002cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	1000823f 	.word	0x1000823f
 8002cec:	40020940 	.word	0x40020940

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cfe:	e15a      	b.n	8002fb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2101      	movs	r1, #1
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 814c 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d005      	beq.n	8002d30 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d130      	bne.n	8002d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d66:	2201      	movs	r2, #1
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4013      	ands	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	f003 0201 	and.w	r2, r3, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d017      	beq.n	8002dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4013      	ands	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d123      	bne.n	8002e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	220f      	movs	r2, #15
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	08da      	lsrs	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3208      	adds	r2, #8
 8002e1c:	6939      	ldr	r1, [r7, #16]
 8002e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0203 	and.w	r2, r3, #3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e64:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e68:	4a5a      	ldr	r2, [pc, #360]	@ (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e70:	4b58      	ldr	r3, [pc, #352]	@ (8002fd4 <HAL_GPIO_Init+0x2e4>)
 8002e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e7c:	4a56      	ldr	r2, [pc, #344]	@ (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_GPIO_Init+0x1f8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a4c      	ldr	r2, [pc, #304]	@ (8002fdc <HAL_GPIO_Init+0x2ec>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d019      	beq.n	8002ee4 <HAL_GPIO_Init+0x1f4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a4b      	ldr	r2, [pc, #300]	@ (8002fe0 <HAL_GPIO_Init+0x2f0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_GPIO_Init+0x1f0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe4 <HAL_GPIO_Init+0x2f4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00d      	beq.n	8002edc <HAL_GPIO_Init+0x1ec>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a49      	ldr	r2, [pc, #292]	@ (8002fe8 <HAL_GPIO_Init+0x2f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x1e8>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <HAL_GPIO_Init+0x2fc>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_GPIO_Init+0x1e4>
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	e00a      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	e008      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x1fa>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002efa:	4937      	ldr	r1, [pc, #220]	@ (8002fd8 <HAL_GPIO_Init+0x2e8>)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f08:	4b39      	ldr	r3, [pc, #228]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f32:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f56:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f80:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002faa:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_GPIO_Init+0x300>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f ae9d 	bne.w	8002d00 <HAL_GPIO_Init+0x10>
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	48000400 	.word	0x48000400
 8002fe0:	48000800 	.word	0x48000800
 8002fe4:	48000c00 	.word	0x48000c00
 8002fe8:	48001000 	.word	0x48001000
 8002fec:	48001400 	.word	0x48001400
 8002ff0:	40010400 	.word	0x40010400

08002ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d141      	bne.n	8003086 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003002:	4b4b      	ldr	r3, [pc, #300]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800300a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800300e:	d131      	bne.n	8003074 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003010:	4b47      	ldr	r3, [pc, #284]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003016:	4a46      	ldr	r2, [pc, #280]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800301c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003020:	4b43      	ldr	r3, [pc, #268]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003028:	4a41      	ldr	r2, [pc, #260]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800302e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003030:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2232      	movs	r2, #50	@ 0x32
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	4a3f      	ldr	r2, [pc, #252]	@ (8003138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	3301      	adds	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003046:	e002      	b.n	800304e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305a:	d102      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f2      	bne.n	8003048 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003062:	4b33      	ldr	r3, [pc, #204]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800306e:	d158      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e057      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800307a:	4a2d      	ldr	r2, [pc, #180]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003084:	e04d      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800308c:	d141      	bne.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800308e:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800309a:	d131      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800309c:	4b24      	ldr	r3, [pc, #144]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030a2:	4a23      	ldr	r2, [pc, #140]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ac:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2232      	movs	r2, #50	@ 0x32
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003138 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	0c9b      	lsrs	r3, r3, #18
 80030ce:	3301      	adds	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d2:	e002      	b.n	80030da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030da:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030e6:	d102      	bne.n	80030ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f2      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fa:	d112      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e011      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003106:	4a0a      	ldr	r2, [pc, #40]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003110:	e007      	b.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003112:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800311a:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003120:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40007000 	.word	0x40007000
 8003134:	20000000 	.word	0x20000000
 8003138:	431bde83 	.word	0x431bde83

0800313c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800314a:	6093      	str	r3, [r2, #8]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000

0800315c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e2fe      	b.n	800376c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d075      	beq.n	8003266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317a:	4b97      	ldr	r3, [pc, #604]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003184:	4b94      	ldr	r3, [pc, #592]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0x3e>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d002      	beq.n	80031a0 <HAL_RCC_OscConfig+0x44>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b8d      	ldr	r3, [pc, #564]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x108>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e2d9      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x74>
 80031c2:	4b85      	ldr	r3, [pc, #532]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a84      	ldr	r2, [pc, #528]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x98>
 80031da:	4b7f      	ldr	r3, [pc, #508]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a7e      	ldr	r2, [pc, #504]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b7c      	ldr	r3, [pc, #496]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a7b      	ldr	r2, [pc, #492]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xb0>
 80031f4:	4b78      	ldr	r3, [pc, #480]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a77      	ldr	r2, [pc, #476]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b75      	ldr	r3, [pc, #468]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a74      	ldr	r2, [pc, #464]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd fc9a 	bl	8000b4c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800321c:	f7fd fc96 	bl	8000b4c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e29e      	b.n	800376c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	4b6a      	ldr	r3, [pc, #424]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xc0>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fd fc86 	bl	8000b4c <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fd fc82 	bl	8000b4c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	@ 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e28a      	b.n	800376c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	4b60      	ldr	r3, [pc, #384]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0xe8>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d075      	beq.n	800335e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003272:	4b59      	ldr	r3, [pc, #356]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800327c:	4b56      	ldr	r3, [pc, #344]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d102      	bne.n	8003292 <HAL_RCC_OscConfig+0x136>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d002      	beq.n	8003298 <HAL_RCC_OscConfig+0x13c>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d11f      	bne.n	80032d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003298:	4b4f      	ldr	r3, [pc, #316]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x154>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e25d      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	4b49      	ldr	r3, [pc, #292]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	061b      	lsls	r3, r3, #24
 80032be:	4946      	ldr	r1, [pc, #280]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032c4:	4b45      	ldr	r3, [pc, #276]	@ (80033dc <HAL_RCC_OscConfig+0x280>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd fb0f 	bl	80008ec <HAL_InitTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d043      	beq.n	800335c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e249      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d023      	beq.n	8003328 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	4b3d      	ldr	r3, [pc, #244]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3c      	ldr	r2, [pc, #240]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fd fc2e 	bl	8000b4c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7fd fc2a 	bl	8000b4c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e232      	b.n	800376c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003306:	4b34      	ldr	r3, [pc, #208]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	492d      	ldr	r1, [pc, #180]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
 8003326:	e01a      	b.n	800335e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003328:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a2a      	ldr	r2, [pc, #168]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800332e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fc0a 	bl	8000b4c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333c:	f7fd fc06 	bl	8000b4c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e20e      	b.n	800376c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334e:	4b22      	ldr	r3, [pc, #136]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x1e0>
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800335c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d041      	beq.n	80033ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01c      	beq.n	80033ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003378:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fd fbe3 	bl	8000b4c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7fd fbdf 	bl	8000b4c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e1e7      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339c:	4b0e      	ldr	r3, [pc, #56]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 800339e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0ef      	beq.n	800338a <HAL_RCC_OscConfig+0x22e>
 80033aa:	e020      	b.n	80033ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b2:	4a09      	ldr	r2, [pc, #36]	@ (80033d8 <HAL_RCC_OscConfig+0x27c>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fbc6 	bl	8000b4c <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033c2:	e00d      	b.n	80033e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fd fbc2 	bl	8000b4c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d906      	bls.n	80033e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e1ca      	b.n	800376c <HAL_RCC_OscConfig+0x610>
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1ea      	bne.n	80033c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 80a6 	beq.w	8003548 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003400:	4b84      	ldr	r3, [pc, #528]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_RCC_OscConfig+0x2b4>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x2b6>
 8003410:	2300      	movs	r3, #0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003416:	4b7f      	ldr	r3, [pc, #508]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	4a7e      	ldr	r2, [pc, #504]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	@ 0x58
 8003422:	4b7c      	ldr	r3, [pc, #496]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003432:	4b79      	ldr	r3, [pc, #484]	@ (8003618 <HAL_RCC_OscConfig+0x4bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343e:	4b76      	ldr	r3, [pc, #472]	@ (8003618 <HAL_RCC_OscConfig+0x4bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a75      	ldr	r2, [pc, #468]	@ (8003618 <HAL_RCC_OscConfig+0x4bc>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fd fb7f 	bl	8000b4c <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fd fb7b 	bl	8000b4c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e183      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003464:	4b6c      	ldr	r3, [pc, #432]	@ (8003618 <HAL_RCC_OscConfig+0x4bc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d108      	bne.n	800348a <HAL_RCC_OscConfig+0x32e>
 8003478:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800347a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347e:	4a65      	ldr	r2, [pc, #404]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003488:	e024      	b.n	80034d4 <HAL_RCC_OscConfig+0x378>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b05      	cmp	r3, #5
 8003490:	d110      	bne.n	80034b4 <HAL_RCC_OscConfig+0x358>
 8003492:	4b60      	ldr	r3, [pc, #384]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	4a5e      	ldr	r2, [pc, #376]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x378>
 80034b4:	4b57      	ldr	r3, [pc, #348]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	4a56      	ldr	r2, [pc, #344]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034c4:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ca:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034cc:	f023 0304 	bic.w	r3, r3, #4
 80034d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fd fb36 	bl	8000b4c <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd fb32 	bl	8000b4c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e138      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fa:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ed      	beq.n	80034e4 <HAL_RCC_OscConfig+0x388>
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fd fb1f 	bl	8000b4c <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fd fb1b 	bl	8000b4c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e121      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003528:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ed      	bne.n	8003512 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	4a34      	ldr	r2, [pc, #208]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003546:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d03c      	beq.n	80035ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01c      	beq.n	8003596 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800355c:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800355e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003562:	4a2c      	ldr	r2, [pc, #176]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd faee 	bl	8000b4c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003574:	f7fd faea 	bl	8000b4c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0f2      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003586:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003588:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ef      	beq.n	8003574 <HAL_RCC_OscConfig+0x418>
 8003594:	e01b      	b.n	80035ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003596:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 8003598:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800359c:	4a1d      	ldr	r2, [pc, #116]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fd fad1 	bl	8000b4c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ae:	f7fd facd 	bl	8000b4c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e0d5      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c0:	4b14      	ldr	r3, [pc, #80]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80035c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ef      	bne.n	80035ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80c9 	beq.w	800376a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	f000 8083 	beq.w	80036ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d15e      	bne.n	80036ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a08      	ldr	r2, [pc, #32]	@ (8003614 <HAL_RCC_OscConfig+0x4b8>)
 80035f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd faa7 	bl	8000b4c <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003600:	e00c      	b.n	800361c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fd faa3 	bl	8000b4c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d905      	bls.n	800361c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0ab      	b.n	800376c <HAL_RCC_OscConfig+0x610>
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361c:	4b55      	ldr	r3, [pc, #340]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ec      	bne.n	8003602 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003628:	4b52      	ldr	r3, [pc, #328]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	4b52      	ldr	r3, [pc, #328]	@ (8003778 <HAL_RCC_OscConfig+0x61c>)
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6a11      	ldr	r1, [r2, #32]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003638:	3a01      	subs	r2, #1
 800363a:	0112      	lsls	r2, r2, #4
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003642:	0212      	lsls	r2, r2, #8
 8003644:	4311      	orrs	r1, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800364a:	0852      	lsrs	r2, r2, #1
 800364c:	3a01      	subs	r2, #1
 800364e:	0552      	lsls	r2, r2, #21
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003656:	0852      	lsrs	r2, r2, #1
 8003658:	3a01      	subs	r2, #1
 800365a:	0652      	lsls	r2, r2, #25
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003662:	06d2      	lsls	r2, r2, #27
 8003664:	430a      	orrs	r2, r1
 8003666:	4943      	ldr	r1, [pc, #268]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 8003668:	4313      	orrs	r3, r2
 800366a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b41      	ldr	r3, [pc, #260]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a40      	ldr	r2, [pc, #256]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 8003672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003676:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003678:	4b3e      	ldr	r3, [pc, #248]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4a3d      	ldr	r2, [pc, #244]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003682:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd fa62 	bl	8000b4c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd fa5e 	bl	8000b4c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e066      	b.n	800376c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	4b35      	ldr	r3, [pc, #212]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x530>
 80036aa:	e05e      	b.n	800376a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ac:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a30      	ldr	r2, [pc, #192]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fd fa48 	bl	8000b4c <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fd fa44 	bl	8000b4c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e04c      	b.n	800376c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d2:	4b28      	ldr	r3, [pc, #160]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036de:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	4924      	ldr	r1, [pc, #144]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <HAL_RCC_OscConfig+0x620>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	60cb      	str	r3, [r1, #12]
 80036ea:	e03e      	b.n	800376a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e039      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80036f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003774 <HAL_RCC_OscConfig+0x618>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0203 	and.w	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	429a      	cmp	r2, r3
 800370a:	d12c      	bne.n	8003766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	3b01      	subs	r3, #1
 8003718:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	429a      	cmp	r2, r3
 800371c:	d123      	bne.n	8003766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800372a:	429a      	cmp	r2, r3
 800372c:	d11b      	bne.n	8003766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003738:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d113      	bne.n	8003766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	3b01      	subs	r3, #1
 800374c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d109      	bne.n	8003766 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	019f800c 	.word	0x019f800c
 800377c:	feeefffc 	.word	0xfeeefffc

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e11e      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b91      	ldr	r3, [pc, #580]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d910      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b8e      	ldr	r3, [pc, #568]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 020f 	bic.w	r2, r3, #15
 80037ae:	498c      	ldr	r1, [pc, #560]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b8a      	ldr	r3, [pc, #552]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e106      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d073      	beq.n	80038bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d129      	bne.n	8003830 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037dc:	4b81      	ldr	r3, [pc, #516]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0f4      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80037ec:	f000 f9ba 	bl	8003b64 <RCC_GetSysClockFreqFromPLLSource>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4a7c      	ldr	r2, [pc, #496]	@ (80039e8 <HAL_RCC_ClockConfig+0x268>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d93f      	bls.n	800387a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80037fa:	4b7a      	ldr	r3, [pc, #488]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800380e:	2b00      	cmp	r3, #0
 8003810:	d033      	beq.n	800387a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	d12f      	bne.n	800387a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800381a:	4b72      	ldr	r3, [pc, #456]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003822:	4a70      	ldr	r2, [pc, #448]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003828:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e024      	b.n	800387a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d107      	bne.n	8003848 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003838:	4b6a      	ldr	r3, [pc, #424]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0c6      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003848:	4b66      	ldr	r3, [pc, #408]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0be      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003858:	f000 f8ce 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 800385c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4a61      	ldr	r2, [pc, #388]	@ (80039e8 <HAL_RCC_ClockConfig+0x268>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d909      	bls.n	800387a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003866:	4b5f      	ldr	r3, [pc, #380]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800386e:	4a5d      	ldr	r2, [pc, #372]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003874:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003876:	2380      	movs	r3, #128	@ 0x80
 8003878:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4b5a      	ldr	r3, [pc, #360]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 0203 	bic.w	r2, r3, #3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4957      	ldr	r1, [pc, #348]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003888:	4313      	orrs	r3, r2
 800388a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fd f95e 	bl	8000b4c <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fd f95a 	bl	8000b4c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e095      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b4e      	ldr	r3, [pc, #312]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b43      	ldr	r3, [pc, #268]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a42      	ldr	r2, [pc, #264]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80038ec:	4b3d      	ldr	r3, [pc, #244]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80038f4:	4a3b      	ldr	r2, [pc, #236]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b39      	ldr	r3, [pc, #228]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4936      	ldr	r1, [pc, #216]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
 800390e:	e008      	b.n	8003922 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b80      	cmp	r3, #128	@ 0x80
 8003914:	d105      	bne.n	8003922 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003916:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4a32      	ldr	r2, [pc, #200]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800391c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003920:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003922:	4b2f      	ldr	r3, [pc, #188]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d21d      	bcs.n	800396c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003930:	4b2b      	ldr	r3, [pc, #172]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 020f 	bic.w	r2, r3, #15
 8003938:	4929      	ldr	r1, [pc, #164]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003940:	f7fd f904 	bl	8000b4c <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fd f900 	bl	8000b4c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e03b      	b.n	80039d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395e:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <HAL_RCC_ClockConfig+0x260>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d1ed      	bne.n	8003948 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4917      	ldr	r1, [pc, #92]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003996:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490f      	ldr	r1, [pc, #60]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039aa:	f000 f825 	bl	80039f8 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0c      	ldr	r3, [pc, #48]	@ (80039e4 <HAL_RCC_ClockConfig+0x264>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490c      	ldr	r1, [pc, #48]	@ (80039ec <HAL_RCC_ClockConfig+0x26c>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	fa22 f303 	lsr.w	r3, r2, r3
 80039c6:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <HAL_RCC_ClockConfig+0x270>)
 80039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_RCC_ClockConfig+0x274>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc ff8c 	bl	80008ec <HAL_InitTick>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40022000 	.word	0x40022000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	04c4b400 	.word	0x04c4b400
 80039ec:	08004b6c 	.word	0x08004b6c
 80039f0:	20000000 	.word	0x20000000
 80039f4:	20000004 	.word	0x20000004

080039f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039fe:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d102      	bne.n	8003a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	e047      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a10:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d102      	bne.n	8003a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a1c:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	e03e      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a22:	4b23      	ldr	r3, [pc, #140]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d136      	bne.n	8003a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a2e:	4b20      	ldr	r3, [pc, #128]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a38:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	3301      	adds	r3, #1
 8003a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a56:	68d2      	ldr	r2, [r2, #12]
 8003a58:	0a12      	lsrs	r2, r2, #8
 8003a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
      break;
 8003a64:	e00c      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a66:	4a13      	ldr	r2, [pc, #76]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	4a10      	ldr	r2, [pc, #64]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	0a12      	lsrs	r2, r2, #8
 8003a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	617b      	str	r3, [r7, #20]
      break;
 8003a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a80:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	0e5b      	lsrs	r3, r3, #25
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e001      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003aa0:	693b      	ldr	r3, [r7, #16]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	016e3600 	.word	0x016e3600

08003abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	@ (8003ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000000 	.word	0x20000000

08003ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ad8:	f7ff fff0 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	0adb      	lsrs	r3, r3, #11
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4904      	ldr	r1, [pc, #16]	@ (8003afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08004b7c 	.word	0x08004b7c

08003b00 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	220f      	movs	r2, #15
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003b10:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_RCC_GetClockConfig+0x5c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0203 	and.w	r2, r3, #3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003b28:	4b0c      	ldr	r3, [pc, #48]	@ (8003b5c <HAL_RCC_GetClockConfig+0x5c>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003b34:	4b09      	ldr	r3, [pc, #36]	@ (8003b5c <HAL_RCC_GetClockConfig+0x5c>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	08db      	lsrs	r3, r3, #3
 8003b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_RCC_GetClockConfig+0x60>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40022000 	.word	0x40022000

08003b64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b74:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	3301      	adds	r3, #1
 8003b80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d10c      	bne.n	8003ba2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b88:	4a17      	ldr	r2, [pc, #92]	@ (8003be8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	4a14      	ldr	r2, [pc, #80]	@ (8003be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b92:	68d2      	ldr	r2, [r2, #12]
 8003b94:	0a12      	lsrs	r2, r2, #8
 8003b96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	617b      	str	r3, [r7, #20]
    break;
 8003ba0:	e00c      	b.n	8003bbc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ba2:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	4a0e      	ldr	r2, [pc, #56]	@ (8003be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bac:	68d2      	ldr	r2, [r2, #12]
 8003bae:	0a12      	lsrs	r2, r2, #8
 8003bb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
    break;
 8003bba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0e5b      	lsrs	r3, r3, #25
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bd6:	687b      	ldr	r3, [r7, #4]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40021000 	.word	0x40021000
 8003be8:	016e3600 	.word	0x016e3600
 8003bec:	00f42400 	.word	0x00f42400

08003bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8098 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b43      	ldr	r3, [pc, #268]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10d      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	4a3f      	ldr	r2, [pc, #252]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a39      	ldr	r2, [pc, #228]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c46:	f7fc ff81 	bl	8000b4c <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c4c:	e009      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c4e:	f7fc ff7d 	bl	8000b4c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d902      	bls.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003c60:	e005      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c62:	4b30      	ldr	r3, [pc, #192]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0ef      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d159      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c74:	4b2a      	ldr	r3, [pc, #168]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01e      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d019      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c90:	4b23      	ldr	r3, [pc, #140]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c9c:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cac:	4b1c      	ldr	r3, [pc, #112]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cbc:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7fc ff3d 	bl	8000b4c <HAL_GetTick>
 8003cd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd4:	e00b      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fc ff39 	bl	8000b4c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d902      	bls.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	74fb      	strb	r3, [r7, #19]
            break;
 8003cec:	e006      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cee:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ec      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d18:	e008      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d1a:	7cfb      	ldrb	r3, [r7, #19]
 8003d1c:	74bb      	strb	r3, [r7, #18]
 8003d1e:	e005      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d2c:	7c7b      	ldrb	r3, [r7, #17]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d105      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d32:	4ba6      	ldr	r3, [pc, #664]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d36:	4aa5      	ldr	r2, [pc, #660]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d4a:	4ba0      	ldr	r3, [pc, #640]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f023 0203 	bic.w	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	499c      	ldr	r1, [pc, #624]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d6c:	4b97      	ldr	r3, [pc, #604]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d72:	f023 020c 	bic.w	r2, r3, #12
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4994      	ldr	r1, [pc, #592]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	498b      	ldr	r1, [pc, #556]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003db0:	4b86      	ldr	r3, [pc, #536]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	4983      	ldr	r1, [pc, #524]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd2:	4b7e      	ldr	r3, [pc, #504]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	497a      	ldr	r1, [pc, #488]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df4:	4b75      	ldr	r3, [pc, #468]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	4972      	ldr	r1, [pc, #456]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e16:	4b6d      	ldr	r3, [pc, #436]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4969      	ldr	r1, [pc, #420]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e38:	4b64      	ldr	r3, [pc, #400]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4961      	ldr	r1, [pc, #388]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	4958      	ldr	r1, [pc, #352]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e7c:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	4950      	ldr	r1, [pc, #320]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003eb4:	4b45      	ldr	r3, [pc, #276]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	4942      	ldr	r1, [pc, #264]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eec:	4b37      	ldr	r3, [pc, #220]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	4934      	ldr	r1, [pc, #208]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a2e      	ldr	r2, [pc, #184]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f24:	4b29      	ldr	r3, [pc, #164]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f32:	4926      	ldr	r1, [pc, #152]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a20      	ldr	r2, [pc, #128]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6a:	4918      	ldr	r1, [pc, #96]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7c:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f94:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	490a      	ldr	r1, [pc, #40]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a04      	ldr	r2, [pc, #16]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003fc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000

08003fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e049      	b.n	8004076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fc fc52 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f000 fb74 	bl	80046fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e042      	b.n	800411e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a21      	ldr	r2, [pc, #132]	@ (800412c <HAL_TIM_Base_Start+0xac>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_TIM_Base_Start+0x5c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b2:	d013      	beq.n	80040dc <HAL_TIM_Base_Start+0x5c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004130 <HAL_TIM_Base_Start+0xb0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_TIM_Base_Start+0x5c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004134 <HAL_TIM_Base_Start+0xb4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_TIM_Base_Start+0x5c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004138 <HAL_TIM_Base_Start+0xb8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_Base_Start+0x5c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a19      	ldr	r2, [pc, #100]	@ (800413c <HAL_TIM_Base_Start+0xbc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d115      	bne.n	8004108 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	4b17      	ldr	r3, [pc, #92]	@ (8004140 <HAL_TIM_Base_Start+0xc0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d015      	beq.n	800411a <HAL_TIM_Base_Start+0x9a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f4:	d011      	beq.n	800411a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004106:	e008      	b.n	800411a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e000      	b.n	800411c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40013400 	.word	0x40013400
 800413c:	40014000 	.word	0x40014000
 8004140:	00010007 	.word	0x00010007

08004144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d001      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e04a      	b.n	80041f2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a21      	ldr	r2, [pc, #132]	@ (8004200 <HAL_TIM_Base_Start_IT+0xbc>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d018      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x6c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004186:	d013      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	@ (8004204 <HAL_TIM_Base_Start_IT+0xc0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00e      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x6c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1c      	ldr	r2, [pc, #112]	@ (8004208 <HAL_TIM_Base_Start_IT+0xc4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x6c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	@ (800420c <HAL_TIM_Base_Start_IT+0xc8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x6c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_TIM_Base_Start_IT+0xcc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d115      	bne.n	80041dc <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	4b17      	ldr	r3, [pc, #92]	@ (8004214 <HAL_TIM_Base_Start_IT+0xd0>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d015      	beq.n	80041ee <HAL_TIM_Base_Start_IT+0xaa>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c8:	d011      	beq.n	80041ee <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	e008      	b.n	80041ee <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e000      	b.n	80041f0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40013400 	.word	0x40013400
 8004210:	40014000 	.word	0x40014000
 8004214:	00010007 	.word	0x00010007

08004218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d020      	beq.n	800427c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0202 	mvn.w	r2, #2
 800424c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa2c 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa1e 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fa2f 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0204 	mvn.w	r2, #4
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa06 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9f8 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fa09 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0208 	mvn.w	r2, #8
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2204      	movs	r2, #4
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f9e0 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9d2 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f9e3 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d020      	beq.n	8004360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0210 	mvn.w	r2, #16
 8004330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2208      	movs	r2, #8
 8004336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9ba 	bl	80046c0 <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f9ac 	bl	80046ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f9bd 	bl	80046d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0201 	mvn.w	r2, #1
 800437c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fc f96e 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438a:	2b00      	cmp	r3, #0
 800438c:	d104      	bne.n	8004398 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb69 	bl	8004a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fb61 	bl	8004a98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00c      	beq.n	80043fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f977 	bl	80046e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00c      	beq.n	800441e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0220 	mvn.w	r2, #32
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fb29 	bl	8004a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00c      	beq.n	8004442 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fb35 	bl	8004aac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00c      	beq.n	8004466 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800445e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb2d 	bl	8004ac0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00c      	beq.n	800448a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d007      	beq.n	800448a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fb25 	bl	8004ad4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d007      	beq.n	80044ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80044a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb1d 	bl	8004ae8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_ConfigClockSource+0x1c>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0de      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x1da>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80044f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a63      	ldr	r2, [pc, #396]	@ (800469c <HAL_TIM_ConfigClockSource+0x1e4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	f000 80a9 	beq.w	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 8004514:	4a61      	ldr	r2, [pc, #388]	@ (800469c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	f200 80ae 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 800451c:	4a60      	ldr	r2, [pc, #384]	@ (80046a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	f000 80a1 	beq.w	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 8004524:	4a5e      	ldr	r2, [pc, #376]	@ (80046a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	f200 80a6 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 800452c:	4a5d      	ldr	r2, [pc, #372]	@ (80046a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800452e:	4293      	cmp	r3, r2
 8004530:	f000 8099 	beq.w	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 8004534:	4a5b      	ldr	r2, [pc, #364]	@ (80046a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f200 809e 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 800453c:	4a5a      	ldr	r2, [pc, #360]	@ (80046a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	f000 8091 	beq.w	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 8004544:	4a58      	ldr	r2, [pc, #352]	@ (80046a8 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f200 8096 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 800454c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004550:	f000 8089 	beq.w	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 8004554:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004558:	f200 808e 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004560:	d03e      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0x128>
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004566:	f200 8087 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	f000 8086 	beq.w	800467e <HAL_TIM_ConfigClockSource+0x1c6>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004576:	d87f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 8004578:	2b70      	cmp	r3, #112	@ 0x70
 800457a:	d01a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xfa>
 800457c:	2b70      	cmp	r3, #112	@ 0x70
 800457e:	d87b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 8004580:	2b60      	cmp	r3, #96	@ 0x60
 8004582:	d050      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x16e>
 8004584:	2b60      	cmp	r3, #96	@ 0x60
 8004586:	d877      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 8004588:	2b50      	cmp	r3, #80	@ 0x50
 800458a:	d03c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x14e>
 800458c:	2b50      	cmp	r3, #80	@ 0x50
 800458e:	d873      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	d058      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x18e>
 8004594:	2b40      	cmp	r3, #64	@ 0x40
 8004596:	d86f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 8004598:	2b30      	cmp	r3, #48	@ 0x30
 800459a:	d064      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 800459c:	2b30      	cmp	r3, #48	@ 0x30
 800459e:	d86b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d060      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d867      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05c      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d05a      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x1ae>
 80045b0:	e062      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	f000 f9b3 	bl	800492c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e04f      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	f000 f99c 	bl	800492c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e03c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 f90e 	bl	8004834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2150      	movs	r1, #80	@ 0x50
 800461e:	4618      	mov	r0, r3
 8004620:	f000 f967 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 8004624:	e02c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 f92d 	bl	8004892 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2160      	movs	r1, #96	@ 0x60
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f957 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 8004644:	e01c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	461a      	mov	r2, r3
 8004654:	f000 f8ee 	bl	8004834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2140      	movs	r1, #64	@ 0x40
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f947 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 8004664:	e00c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 f93e 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 8004676:	e003      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e000      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800467e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	00100070 	.word	0x00100070
 80046a0:	00100040 	.word	0x00100040
 80046a4:	00100030 	.word	0x00100030
 80046a8:	00100020 	.word	0x00100020

080046ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a42      	ldr	r2, [pc, #264]	@ (8004818 <TIM_Base_SetConfig+0x11c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00f      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471a:	d00b      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <TIM_Base_SetConfig+0x120>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a3e      	ldr	r2, [pc, #248]	@ (8004820 <TIM_Base_SetConfig+0x124>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_Base_SetConfig+0x38>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a3d      	ldr	r2, [pc, #244]	@ (8004824 <TIM_Base_SetConfig+0x128>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d108      	bne.n	8004746 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a33      	ldr	r2, [pc, #204]	@ (8004818 <TIM_Base_SetConfig+0x11c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01b      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004754:	d017      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a30      	ldr	r2, [pc, #192]	@ (800481c <TIM_Base_SetConfig+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2f      	ldr	r2, [pc, #188]	@ (8004820 <TIM_Base_SetConfig+0x124>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2e      	ldr	r2, [pc, #184]	@ (8004824 <TIM_Base_SetConfig+0x128>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2d      	ldr	r2, [pc, #180]	@ (8004828 <TIM_Base_SetConfig+0x12c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2c      	ldr	r2, [pc, #176]	@ (800482c <TIM_Base_SetConfig+0x130>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2b      	ldr	r2, [pc, #172]	@ (8004830 <TIM_Base_SetConfig+0x134>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a16      	ldr	r2, [pc, #88]	@ (8004818 <TIM_Base_SetConfig+0x11c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00f      	beq.n	80047e4 <TIM_Base_SetConfig+0xe8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a17      	ldr	r2, [pc, #92]	@ (8004824 <TIM_Base_SetConfig+0x128>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <TIM_Base_SetConfig+0xe8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a16      	ldr	r2, [pc, #88]	@ (8004828 <TIM_Base_SetConfig+0x12c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_Base_SetConfig+0xe8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a15      	ldr	r2, [pc, #84]	@ (800482c <TIM_Base_SetConfig+0x130>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0xe8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a14      	ldr	r2, [pc, #80]	@ (8004830 <TIM_Base_SetConfig+0x134>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d105      	bne.n	800480a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]
  }
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40013400 	.word	0x40013400
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800

08004834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800485e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 030a 	bic.w	r3, r3, #10
 8004870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f023 0210 	bic.w	r2, r3, #16
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	031b      	lsls	r3, r3, #12
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	f043 0307 	orr.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	021a      	lsls	r2, r3, #8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	431a      	orrs	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	609a      	str	r2, [r3, #8]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e065      	b.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d108      	bne.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80049d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1b      	ldr	r2, [pc, #108]	@ (8004a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d018      	beq.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d013      	beq.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00e      	beq.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a12      	ldr	r2, [pc, #72]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10c      	bne.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40013400 	.word	0x40013400
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40014000 	.word	0x40014000

08004a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <memset>:
 8004afc:	4402      	add	r2, r0
 8004afe:	4603      	mov	r3, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d100      	bne.n	8004b06 <memset+0xa>
 8004b04:	4770      	bx	lr
 8004b06:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0a:	e7f9      	b.n	8004b00 <memset+0x4>

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	@ (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1b64      	subs	r4, r4, r5
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2600      	movs	r6, #0
 8004b18:	42a6      	cmp	r6, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 f818 	bl	8004b54 <_init>
 8004b24:	1b64      	subs	r4, r4, r5
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2600      	movs	r6, #0
 8004b2a:	42a6      	cmp	r6, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b34:	4798      	blx	r3
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3e:	4798      	blx	r3
 8004b40:	3601      	adds	r6, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08004b84 	.word	0x08004b84
 8004b48:	08004b84 	.word	0x08004b84
 8004b4c:	08004b84 	.word	0x08004b84
 8004b50:	08004b88 	.word	0x08004b88

08004b54 <_init>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr

08004b60 <_fini>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr
